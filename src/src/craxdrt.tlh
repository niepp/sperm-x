// Created by Microsoft (R) C/C++ Compiler Version 12.00.8168.0 (ed5f1042).
//
// craxdrt.tlh
//
// C++ source equivalent of Win32 type library craxdrt.dll
// compiler-generated file created 06/29/09 at 18:29:31 - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

//
// Forward references and typedefs
//

struct /* coclass */ Report;
struct __declspec(uuid("af376800-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ IReport;
struct __declspec(uuid("af376803-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ IAreas;
struct __declspec(uuid("af376805-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ IArea;
struct __declspec(uuid("af376804-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ ISections;
struct __declspec(uuid("af376806-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ ISection;
struct __declspec(uuid("af376807-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ IReportObjects;
struct __declspec(uuid("af376809-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ IFieldObject;
struct __declspec(uuid("af37680c-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ ITextObject;
struct __declspec(uuid("af37680b-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ IFieldElements;
struct __declspec(uuid("af37680a-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ IFieldElement;
struct __declspec(uuid("af37680d-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ IFieldDefinition;
typedef enum __MIDL___MIDL_itf_crvb60r_0232_0001 CRFieldValueType;
struct __declspec(uuid("af376827-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ IBlobFieldObject;
struct __declspec(uuid("af37680e-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ IDatabaseFieldDefinition;
struct __declspec(uuid("af376810-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ ISubreportObject;
struct __declspec(uuid("af37684e-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ ISubreportLinks;
struct __declspec(uuid("af37684d-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ ISubreportLink;
struct __declspec(uuid("af376828-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ ILineObject;
struct __declspec(uuid("af376829-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ IBoxObject;
struct __declspec(uuid("af37682a-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ ICrossTabObject;
struct __declspec(uuid("af376852-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ IObjectSummaryFieldDefinitions;
struct __declspec(uuid("af376815-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ ISummaryFieldDefinition;
struct __declspec(uuid("af376808-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ IReportObject;
struct __declspec(uuid("af37684f-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ ICrossTabGroups;
struct __declspec(uuid("af376850-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ ICrossTabGroup;
struct __declspec(uuid("af376826-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ ICROleObject;
struct __declspec(uuid("af376824-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ IGraphObject;
struct __declspec(uuid("af376851-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ IFieldDefinitions;
struct __declspec(uuid("af376818-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ IDatabase;
struct __declspec(uuid("af376819-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ IDatabaseTables;
struct __declspec(uuid("af37681a-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ IDatabaseTable;
struct __declspec(uuid("af37681d-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ IDatabaseFieldDefinitions;
struct __declspec(uuid("af376860-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ INameValuePairs;
struct __declspec(uuid("af37681b-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ ITableLinks;
struct __declspec(uuid("af37681c-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ ITableLink;
struct __declspec(uuid("af37681e-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ IFormulaFieldDefinitions;
struct __declspec(uuid("af37680f-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ IFormulaFieldDefinition;
struct __declspec(uuid("af37681f-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ IParameterFieldDefinitions;
struct __declspec(uuid("af376812-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ IParameterFieldDefinition;
struct __declspec(uuid("af376820-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ IGroupNameFieldDefinitions;
struct __declspec(uuid("af376813-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ IGroupNameFieldDefinition;
struct __declspec(uuid("af376821-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ ISummaryFieldDefinitions;
struct __declspec(uuid("af37682b-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ IPageEngine;
struct __declspec(uuid("af37682c-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ IPageGenerator;
struct __declspec(uuid("af37682d-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ IPages;
struct __declspec(uuid("af37682e-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ IPage;
struct __declspec(uuid("af37682f-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ IExportOptions;
struct __declspec(uuid("af376830-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ IApplication;
struct __declspec(uuid("af376831-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ ISortFields;
struct __declspec(uuid("af376832-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ ISortField;
struct __declspec(uuid("af376833-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ IPrintingStatus;
struct __declspec(uuid("af376822-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ IRunningTotalFieldDefinitions;
struct __declspec(uuid("af376816-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ IRunningTotalFieldDefinition;
struct __declspec(uuid("af376823-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ ISQLExpressionFieldDefinitions;
struct __declspec(uuid("af376817-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ ISQLExpressionFieldDefinition;
struct __declspec(uuid("af37685c-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ IReportAlerts;
struct __declspec(uuid("af37685b-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ IReportAlert;
struct __declspec(uuid("af37685e-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ IReportAlertInstances;
struct __declspec(uuid("af37685d-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ IReportAlertInstance;
struct __declspec(uuid("3dcc8fb4-c434-11d1-a817-00a0c92784cd"))
/* interface */ ICrystalReportSource;
struct __declspec(uuid("3dcc8fb5-c434-11d1-a817-00a0c92784cd"))
/* interface */ ICrystalReportProperties;
struct __declspec(uuid("6876d971-f0f2-11d1-bedf-00a0c95a6a5c"))
/* interface */ ICrystalReportSourceProperties;
struct __declspec(uuid("a9a6c0ee-956b-4c15-9b1c-b4255508b244"))
/* interface */ ICrystalReportSourceProperties4;
struct __declspec(uuid("25a6cb81-5a76-11d3-bfc3-00a0c9da4fa2"))
/* interface */ ICrystalReportSourceProperties3;
struct __declspec(uuid("b25f55d1-2313-11d2-bf21-00a0c95a6a5c"))
/* interface */ ICrystalReportSourceProperties2;
struct __declspec(uuid("b4742013-45a6-11d1-abec-00a0c9274b91"))
/* interface */ ICrystalReportPrinterPort;
struct __declspec(uuid("b4742143-45a6-11d1-abec-00a0c9274b91"))
/* interface */ ICrystalReportPrinterPortEx;
struct __declspec(uuid("3dcc8fb3-c434-11d1-a817-00a0c92784cd"))
/* interface */ ICrystalReportSourceEvents;
struct __declspec(uuid("af376802-6120-4e28-96dd-63fd2dc27b7a"))
/* dispinterface */ IReportEvent;
struct __declspec(uuid("bd10a9c0-07cc-11d2-beff-00a0c95a6a5c"))
/* interface */ ICrystalReportExport;
struct __declspec(uuid("4d773761-0ad4-11d2-bf01-00a0c95a6a5c"))
/* interface */ ICrystalReportExportEvents;
struct /* coclass */ Areas;
struct /* coclass */ Sections;
struct /* coclass */ Area;
struct /* coclass */ Section;
struct __declspec(uuid("af37684b-6120-4e28-96dd-63fd2dc27b7a"))
/* dispinterface */ ISectionEvent;
struct /* coclass */ ReportObjects;
struct /* coclass */ FieldObject;
struct /* coclass */ TextObject;
struct /* coclass */ SubreportObject;
struct /* coclass */ DatabaseFieldDefinition;
struct /* coclass */ FormulaFieldDefinition;
struct /* coclass */ ParameterFieldDefinition;
struct /* coclass */ GroupNameFieldDefinition;
struct /* coclass */ SpecialVarFieldDefinition;
struct __declspec(uuid("af376814-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ ISpecialVarFieldDefinition;
struct /* coclass */ SummaryFieldDefinition;
struct /* coclass */ RunningTotalFieldDefinition;
struct /* coclass */ SQLExpressionFieldDefinition;
struct /* coclass */ Database;
struct /* coclass */ DatabaseTables;
struct /* coclass */ DatabaseTable;
struct /* coclass */ DatabaseFieldDefinitions;
struct /* coclass */ FormulaFieldDefinitions;
struct /* coclass */ ParameterFieldDefinitions;
struct /* coclass */ GroupNameFieldDefinitions;
struct /* coclass */ SummaryFieldDefinitions;
struct /* coclass */ RunningTotalFieldDefinitions;
struct /* coclass */ SQLExpressionFieldDefinitions;
struct /* coclass */ GraphObject;
struct /* coclass */ MapObject;
struct __declspec(uuid("af376825-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ IMapObject;
struct /* coclass */ OleObject;
struct /* coclass */ BlobFieldObject;
struct /* coclass */ LineObject;
struct /* coclass */ BoxObject;
struct /* coclass */ OlapGridObject;
struct __declspec(uuid("af37685f-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ IOlapGridObject;
struct /* coclass */ CrossTabObject;
struct /* coclass */ PageEngine;
struct /* coclass */ PageGenerator;
struct /* coclass */ Pages;
struct /* coclass */ Page;
struct /* coclass */ ExportOptions;
struct /* coclass */ Application;
struct /* coclass */ FormattingInfo;
struct __declspec(uuid("af37684c-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ IFormattingInfo;
struct /* coclass */ SortFields;
struct /* coclass */ SortField;
struct /* coclass */ PrintingStatus;
struct /* coclass */ SubreportLink;
struct /* coclass */ SubreportLinks;
struct /* coclass */ CrossTabGroups;
struct /* coclass */ CrossTabGroup;
struct /* coclass */ FieldDefinitions;
struct /* coclass */ ObjectSummaryFieldDefinitions;
struct /* coclass */ TableLink;
struct /* coclass */ TableLinks;
struct /* coclass */ FieldMappingData;
struct __declspec(uuid("af376856-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ IFieldMappingData;
struct /* coclass */ ParameterValue;
struct __declspec(uuid("af376857-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ IParameterValue;
struct /* coclass */ ParameterValues;
struct __declspec(uuid("af376858-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ IParameterValues;
struct /* coclass */ ParameterValueInfo;
struct __declspec(uuid("af376859-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ IParameterValueInfo;
struct /* coclass */ ParameterValueInfos;
struct __declspec(uuid("af37685a-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ IParameterValueInfos;
struct /* coclass */ ReportAlert;
struct /* coclass */ ReportAlerts;
struct /* coclass */ ReportAlertInstance;
struct /* coclass */ ReportAlertInstances;
struct /* coclass */ FieldElements;
struct /* coclass */ FieldElement;
struct /* coclass */ ConnectionProperties;
struct /* coclass */ ConnectionProperty;
struct __declspec(uuid("af376861-6120-4e28-96dd-63fd2dc27b7a"))
/* dual interface */ IConnectionProperty;
struct __declspec(uuid("3dcc8fb6-c434-11d1-a817-00a0c92784cd"))
/* interface */ ICrystalReportSourceEx;
struct __declspec(uuid("b4742163-45a6-11d1-abec-00a0c9274b91"))
/* interface */ ICrystalReportSourceEx2;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(IReport, __uuidof(IReport));
_COM_SMARTPTR_TYPEDEF(IAreas, __uuidof(IAreas));
_COM_SMARTPTR_TYPEDEF(IArea, __uuidof(IArea));
_COM_SMARTPTR_TYPEDEF(ISections, __uuidof(ISections));
_COM_SMARTPTR_TYPEDEF(ISection, __uuidof(ISection));
_COM_SMARTPTR_TYPEDEF(IReportObjects, __uuidof(IReportObjects));
_COM_SMARTPTR_TYPEDEF(IFieldObject, __uuidof(IFieldObject));
_COM_SMARTPTR_TYPEDEF(ITextObject, __uuidof(ITextObject));
_COM_SMARTPTR_TYPEDEF(IFieldElements, __uuidof(IFieldElements));
_COM_SMARTPTR_TYPEDEF(IFieldElement, __uuidof(IFieldElement));
_COM_SMARTPTR_TYPEDEF(IFieldDefinition, __uuidof(IFieldDefinition));
_COM_SMARTPTR_TYPEDEF(IBlobFieldObject, __uuidof(IBlobFieldObject));
_COM_SMARTPTR_TYPEDEF(IDatabaseFieldDefinition, __uuidof(IDatabaseFieldDefinition));
_COM_SMARTPTR_TYPEDEF(ISubreportObject, __uuidof(ISubreportObject));
_COM_SMARTPTR_TYPEDEF(ISubreportLinks, __uuidof(ISubreportLinks));
_COM_SMARTPTR_TYPEDEF(ISubreportLink, __uuidof(ISubreportLink));
_COM_SMARTPTR_TYPEDEF(ILineObject, __uuidof(ILineObject));
_COM_SMARTPTR_TYPEDEF(IBoxObject, __uuidof(IBoxObject));
_COM_SMARTPTR_TYPEDEF(ICrossTabObject, __uuidof(ICrossTabObject));
_COM_SMARTPTR_TYPEDEF(IObjectSummaryFieldDefinitions, __uuidof(IObjectSummaryFieldDefinitions));
_COM_SMARTPTR_TYPEDEF(ISummaryFieldDefinition, __uuidof(ISummaryFieldDefinition));
_COM_SMARTPTR_TYPEDEF(IReportObject, __uuidof(IReportObject));
_COM_SMARTPTR_TYPEDEF(ICrossTabGroups, __uuidof(ICrossTabGroups));
_COM_SMARTPTR_TYPEDEF(ICrossTabGroup, __uuidof(ICrossTabGroup));
_COM_SMARTPTR_TYPEDEF(ICROleObject, __uuidof(ICROleObject));
_COM_SMARTPTR_TYPEDEF(IGraphObject, __uuidof(IGraphObject));
_COM_SMARTPTR_TYPEDEF(IFieldDefinitions, __uuidof(IFieldDefinitions));
_COM_SMARTPTR_TYPEDEF(IDatabase, __uuidof(IDatabase));
_COM_SMARTPTR_TYPEDEF(IDatabaseTables, __uuidof(IDatabaseTables));
_COM_SMARTPTR_TYPEDEF(IDatabaseTable, __uuidof(IDatabaseTable));
_COM_SMARTPTR_TYPEDEF(IDatabaseFieldDefinitions, __uuidof(IDatabaseFieldDefinitions));
_COM_SMARTPTR_TYPEDEF(INameValuePairs, __uuidof(INameValuePairs));
_COM_SMARTPTR_TYPEDEF(ITableLinks, __uuidof(ITableLinks));
_COM_SMARTPTR_TYPEDEF(ITableLink, __uuidof(ITableLink));
_COM_SMARTPTR_TYPEDEF(IFormulaFieldDefinitions, __uuidof(IFormulaFieldDefinitions));
_COM_SMARTPTR_TYPEDEF(IFormulaFieldDefinition, __uuidof(IFormulaFieldDefinition));
_COM_SMARTPTR_TYPEDEF(IParameterFieldDefinitions, __uuidof(IParameterFieldDefinitions));
_COM_SMARTPTR_TYPEDEF(IParameterFieldDefinition, __uuidof(IParameterFieldDefinition));
_COM_SMARTPTR_TYPEDEF(IGroupNameFieldDefinitions, __uuidof(IGroupNameFieldDefinitions));
_COM_SMARTPTR_TYPEDEF(IGroupNameFieldDefinition, __uuidof(IGroupNameFieldDefinition));
_COM_SMARTPTR_TYPEDEF(ISummaryFieldDefinitions, __uuidof(ISummaryFieldDefinitions));
_COM_SMARTPTR_TYPEDEF(IPageEngine, __uuidof(IPageEngine));
_COM_SMARTPTR_TYPEDEF(IPageGenerator, __uuidof(IPageGenerator));
_COM_SMARTPTR_TYPEDEF(IPages, __uuidof(IPages));
_COM_SMARTPTR_TYPEDEF(IPage, __uuidof(IPage));
_COM_SMARTPTR_TYPEDEF(IExportOptions, __uuidof(IExportOptions));
_COM_SMARTPTR_TYPEDEF(IApplication, __uuidof(IApplication));
_COM_SMARTPTR_TYPEDEF(ISortFields, __uuidof(ISortFields));
_COM_SMARTPTR_TYPEDEF(ISortField, __uuidof(ISortField));
_COM_SMARTPTR_TYPEDEF(IPrintingStatus, __uuidof(IPrintingStatus));
_COM_SMARTPTR_TYPEDEF(IRunningTotalFieldDefinitions, __uuidof(IRunningTotalFieldDefinitions));
_COM_SMARTPTR_TYPEDEF(IRunningTotalFieldDefinition, __uuidof(IRunningTotalFieldDefinition));
_COM_SMARTPTR_TYPEDEF(ISQLExpressionFieldDefinitions, __uuidof(ISQLExpressionFieldDefinitions));
_COM_SMARTPTR_TYPEDEF(ISQLExpressionFieldDefinition, __uuidof(ISQLExpressionFieldDefinition));
_COM_SMARTPTR_TYPEDEF(IReportAlerts, __uuidof(IReportAlerts));
_COM_SMARTPTR_TYPEDEF(IReportAlert, __uuidof(IReportAlert));
_COM_SMARTPTR_TYPEDEF(IReportAlertInstances, __uuidof(IReportAlertInstances));
_COM_SMARTPTR_TYPEDEF(IReportAlertInstance, __uuidof(IReportAlertInstance));
_COM_SMARTPTR_TYPEDEF(ICrystalReportSource, __uuidof(ICrystalReportSource));
_COM_SMARTPTR_TYPEDEF(ICrystalReportProperties, __uuidof(ICrystalReportProperties));
_COM_SMARTPTR_TYPEDEF(ICrystalReportSourceProperties, __uuidof(ICrystalReportSourceProperties));
_COM_SMARTPTR_TYPEDEF(ICrystalReportSourceProperties2, __uuidof(ICrystalReportSourceProperties2));
_COM_SMARTPTR_TYPEDEF(ICrystalReportSourceProperties3, __uuidof(ICrystalReportSourceProperties3));
_COM_SMARTPTR_TYPEDEF(ICrystalReportSourceProperties4, __uuidof(ICrystalReportSourceProperties4));
_COM_SMARTPTR_TYPEDEF(ICrystalReportPrinterPort, __uuidof(ICrystalReportPrinterPort));
_COM_SMARTPTR_TYPEDEF(ICrystalReportPrinterPortEx, __uuidof(ICrystalReportPrinterPortEx));
_COM_SMARTPTR_TYPEDEF(ICrystalReportSourceEvents, __uuidof(ICrystalReportSourceEvents));
_COM_SMARTPTR_TYPEDEF(IReportEvent, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(ICrystalReportExport, __uuidof(ICrystalReportExport));
_COM_SMARTPTR_TYPEDEF(ICrystalReportExportEvents, __uuidof(ICrystalReportExportEvents));
_COM_SMARTPTR_TYPEDEF(ISectionEvent, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(ISpecialVarFieldDefinition, __uuidof(ISpecialVarFieldDefinition));
_COM_SMARTPTR_TYPEDEF(IMapObject, __uuidof(IMapObject));
_COM_SMARTPTR_TYPEDEF(IOlapGridObject, __uuidof(IOlapGridObject));
_COM_SMARTPTR_TYPEDEF(IFormattingInfo, __uuidof(IFormattingInfo));
_COM_SMARTPTR_TYPEDEF(IFieldMappingData, __uuidof(IFieldMappingData));
_COM_SMARTPTR_TYPEDEF(IParameterValue, __uuidof(IParameterValue));
_COM_SMARTPTR_TYPEDEF(IParameterValues, __uuidof(IParameterValues));
_COM_SMARTPTR_TYPEDEF(IParameterValueInfo, __uuidof(IParameterValueInfo));
_COM_SMARTPTR_TYPEDEF(IParameterValueInfos, __uuidof(IParameterValueInfos));
_COM_SMARTPTR_TYPEDEF(IConnectionProperty, __uuidof(IConnectionProperty));
_COM_SMARTPTR_TYPEDEF(ICrystalReportSourceEx, __uuidof(ICrystalReportSourceEx));
_COM_SMARTPTR_TYPEDEF(ICrystalReportSourceEx2, __uuidof(ICrystalReportSourceEx2));

//
// Type library items
//

struct __declspec(uuid("e27eaf34-4c73-4e7a-abc6-ef90f3482bd0"))
Report;
    // [ default ] interface IReport
    // interface ICrystalReportSource
    // interface ICrystalReportProperties
    // interface ICrystalReportSourceProperties
    // interface ICrystalReportSourceProperties4
    // interface ICrystalReportPrinterPort
    // interface ICrystalReportPrinterPortEx
    // [ source ] interface ICrystalReportSourceEvents
    // [ default, source ] dispinterface IReportEvent
    // interface ICrystalReportExport
    // [ source ] interface ICrystalReportExportEvents

struct __declspec(uuid("af376800-6120-4e28-96dd-63fd2dc27b7a"))
IReport : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNeedUpdatePages))
    VARIANT_BOOL NeedUpdatePages;
    __declspec(property(get=GetReportTitle,put=PutReportTitle))
    _bstr_t ReportTitle;
    __declspec(property(get=GetReportSubject,put=PutReportSubject))
    _bstr_t ReportSubject;
    __declspec(property(get=GetReportAuthor,put=PutReportAuthor))
    _bstr_t ReportAuthor;
    __declspec(property(get=GetReportComments,put=PutReportComments))
    _bstr_t ReportComments;
    __declspec(property(get=GetReportTemplate,put=PutReportTemplate))
    _bstr_t ReportTemplate;
    __declspec(property(get=GetKeywordsInReport,put=PutKeywordsInReport))
    _bstr_t KeywordsInReport;
    __declspec(property(get=GetApplicationName,put=PutApplicationName))
    _bstr_t ApplicationName;
    __declspec(property(get=GetEnableAsyncQuery,put=PutEnableAsyncQuery))
    VARIANT_BOOL EnableAsyncQuery;
    __declspec(property(get=GetEnableGeneratingDataForHiddenObject,put=PutEnableGeneratingDataForHiddenObject))
    VARIANT_BOOL EnableGeneratingDataForHiddenObject;
    __declspec(property(get=GetRunningTotalFields))
    IRunningTotalFieldDefinitionsPtr RunningTotalFields;
    __declspec(property(get=GetPerformGroupingOnServer,put=PutPerformGroupingOnServer))
    VARIANT_BOOL PerformGroupingOnServer;
    __declspec(property(get=GetCanPerformGroupingOnServer))
    VARIANT_BOOL CanPerformGroupingOnServer;
    __declspec(property(get=GetSQLQueryString,put=PutSQLQueryString))
    _bstr_t SQLQueryString;
    __declspec(property(get=GetSQLExpressionFields))
    ISQLExpressionFieldDefinitionsPtr SQLExpressionFields;
    __declspec(property(get=GetPageEngine))
    IPageEnginePtr PageEngine;
    __declspec(property(get=GetEnablePerformQueriesAsynchronously,put=PutEnablePerformQueriesAsynchronously))
    VARIANT_BOOL EnablePerformQueriesAsynchronously;
    __declspec(property(get=GetEnableSelectDistinctRecords,put=PutEnableSelectDistinctRecords))
    VARIANT_BOOL EnableSelectDistinctRecords;
    __declspec(property(get=GetReportFormatStyle,put=PutReportFormatStyle))
    enum CRReportFormatStyle ReportFormatStyle;
    __declspec(property(get=GetPrinterDuplex,put=PutPrinterDuplex))
    enum CRPrinterDuplexType PrinterDuplex;
    __declspec(property(get=GetPaperSource,put=PutPaperSource))
    enum CRPaperSource PaperSource;
    __declspec(property(get=GetExportOptions))
    IExportOptionsPtr ExportOptions;
    __declspec(property(get=GetSavePreviewPicture,put=PutSavePreviewPicture))
    VARIANT_BOOL SavePreviewPicture;
    __declspec(property(get=GetFieldMappingType,put=PutFieldMappingType))
    enum CRFieldMappingType FieldMappingType;
    __declspec(property(get=GetGroupSortFields))
    ISortFieldsPtr GroupSortFields;
    __declspec(property(get=GetAreas))
    IAreasPtr Areas;
    __declspec(property(get=GetSections))
    ISectionsPtr Sections;
    __declspec(property(get=GetPrintDate,put=PutPrintDate))
    DATE PrintDate;
    __declspec(property(get=GetUseIndexForSpeed,put=PutUseIndexForSpeed))
    VARIANT_BOOL UseIndexForSpeed;
    __declspec(property(get=GetTranslateDosStrings,put=PutTranslateDosStrings))
    VARIANT_BOOL TranslateDosStrings;
    __declspec(property(get=GetTranslateDosMemos,put=PutTranslateDosMemos))
    VARIANT_BOOL TranslateDosMemos;
    __declspec(property(get=GetConvertDateTimeType,put=PutConvertDateTimeType))
    enum CRConvertDateTimeType ConvertDateTimeType;
    __declspec(property(get=GetConvertNullFieldToDefault,put=PutConvertNullFieldToDefault))
    VARIANT_BOOL ConvertNullFieldToDefault;
    __declspec(property(get=GetCaseInsensitiveSQLData,put=PutCaseInsensitiveSQLData))
    VARIANT_BOOL CaseInsensitiveSQLData;
    __declspec(property(get=GetVerifyOnEveryPrint,put=PutVerifyOnEveryPrint))
    VARIANT_BOOL VerifyOnEveryPrint;
    __declspec(property(get=GetDatabase))
    IDatabasePtr Database;
    __declspec(property(get=GetPrinterName))
    _bstr_t PrinterName;
    __declspec(property(get=GetDriverName))
    _bstr_t DriverName;
    __declspec(property(get=GetPortName))
    _bstr_t PortName;
    __declspec(property(get=GetPaperOrientation,put=PutPaperOrientation))
    enum CRPaperOrientation PaperOrientation;
    __declspec(property(get=GetPaperSize,put=PutPaperSize))
    enum CRPaperSize PaperSize;
    __declspec(property(get=GetApplication))
    IApplicationPtr Application;
    __declspec(property(get=GetFormulaFields))
    IFormulaFieldDefinitionsPtr FormulaFields;
    __declspec(property(get=GetParameterFields))
    IParameterFieldDefinitionsPtr ParameterFields;
    __declspec(property(get=GetGroupNameFields))
    IGroupNameFieldDefinitionsPtr GroupNameFields;
    __declspec(property(get=GetReportAlerts))
    IReportAlertsPtr ReportAlerts;
    __declspec(property(get=GetEnableParameterPrompting,put=PutEnableParameterPrompting))
    VARIANT_BOOL EnableParameterPrompting;
    __declspec(property(get=GetDisplayProgressDialog,put=PutDisplayProgressDialog))
    VARIANT_BOOL DisplayProgressDialog;
    __declspec(property(get=GetRecordSelectionFormula,put=PutRecordSelectionFormula))
    _bstr_t RecordSelectionFormula;
    __declspec(property(get=GetGroupSelectionFormula,put=PutGroupSelectionFormula))
    _bstr_t GroupSelectionFormula;
    __declspec(property(get=GetRecordSortFields))
    ISortFieldsPtr RecordSortFields;
    __declspec(property(get=GetFormulaSyntax,put=PutFormulaSyntax))
    enum CRFormulaSyntax FormulaSyntax;
    __declspec(property(get=GetLastGetFormulaSyntax))
    enum CRFormulaSyntax LastGetFormulaSyntax;
    __declspec(property(get=GetSummaryFields))
    ISummaryFieldDefinitionsPtr SummaryFields;
    __declspec(property(get=GetParent))
    IReportPtr Parent;
    __declspec(property(get=GetKind))
    enum CRReportKind Kind;
    __declspec(property(get=GetNumberOfGroup))
    long NumberOfGroup;
    __declspec(property(get=GetMorePrintEngineErrorMessages,put=PutMorePrintEngineErrorMessages))
    VARIANT_BOOL MorePrintEngineErrorMessages;
    __declspec(property(get=GetHasSavedData))
    VARIANT_BOOL HasSavedData;
    __declspec(property(get=GetLeftMargin,put=PutLeftMargin))
    long LeftMargin;
    __declspec(property(get=GetRightMargin,put=PutRightMargin))
    long RightMargin;
    __declspec(property(get=GetTopMargin,put=PutTopMargin))
    long TopMargin;
    __declspec(property(get=GetBottomMargin,put=PutBottomMargin))
    long BottomMargin;
    __declspec(property(get=GetPrintingStatus))
    IPrintingStatusPtr PrintingStatus;

    //
    // Wrapper methods for error-handling
    //

    IAreasPtr GetAreas ( );
    ISectionsPtr GetSections ( );
    DATE GetPrintDate ( );
    void PutPrintDate (
        DATE pDate );
    VARIANT_BOOL GetUseIndexForSpeed ( );
    void PutUseIndexForSpeed (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetTranslateDosStrings ( );
    void PutTranslateDosStrings (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetTranslateDosMemos ( );
    void PutTranslateDosMemos (
        VARIANT_BOOL pBool );
    enum CRConvertDateTimeType GetConvertDateTimeType ( );
    void PutConvertDateTimeType (
        enum CRConvertDateTimeType pDateTimeType );
    VARIANT_BOOL GetConvertNullFieldToDefault ( );
    void PutConvertNullFieldToDefault (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetCaseInsensitiveSQLData ( );
    void PutCaseInsensitiveSQLData (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetVerifyOnEveryPrint ( );
    void PutVerifyOnEveryPrint (
        VARIANT_BOOL pBool );
    IDatabasePtr GetDatabase ( );
    _bstr_t GetPrinterName ( );
    _bstr_t GetDriverName ( );
    _bstr_t GetPortName ( );
    enum CRPaperOrientation GetPaperOrientation ( );
    void PutPaperOrientation (
        enum CRPaperOrientation pPaperOrientation );
    enum CRPaperSize GetPaperSize ( );
    void PutPaperSize (
        enum CRPaperSize pPaperSize );
    HRESULT Save (
        _bstr_t pReportFileName );
    HRESULT PrintOut (
        const _variant_t & promptUser = vtMissing,
        const _variant_t & numberOfCopy = vtMissing,
        const _variant_t & collated = vtMissing,
        const _variant_t & startPageN = vtMissing,
        const _variant_t & stopPageN = vtMissing );
    HRESULT SelectPrinter (
        _bstr_t pDriverName,
        _bstr_t pPrinterName,
        _bstr_t pPortName );
    IFormulaFieldDefinitionsPtr GetFormulaFields ( );
    IParameterFieldDefinitionsPtr GetParameterFields ( );
    IGroupNameFieldDefinitionsPtr GetGroupNameFields ( );
    ISummaryFieldDefinitionsPtr GetSummaryFields ( );
    enum CRReportKind GetKind ( );
    IReportPtr GetParent ( );
    long GetNumberOfGroup ( );
    VARIANT_BOOL GetMorePrintEngineErrorMessages ( );
    void PutMorePrintEngineErrorMessages (
        VARIANT_BOOL pBool );
    long GetLeftMargin ( );
    void PutLeftMargin (
        long pLeftMargin );
    long GetRightMargin ( );
    void PutRightMargin (
        long pRightMargin );
    long GetTopMargin ( );
    void PutTopMargin (
        long pTopMargin );
    long GetBottomMargin ( );
    void PutBottomMargin (
        long pBottomMargin );
    IPageEnginePtr GetPageEngine ( );
    HRESULT Export (
        const _variant_t & promptUser = vtMissing );
    IExportOptionsPtr GetExportOptions ( );
    IApplicationPtr GetApplication ( );
    VARIANT_BOOL GetEnableParameterPrompting ( );
    void PutEnableParameterPrompting (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetDisplayProgressDialog ( );
    void PutDisplayProgressDialog (
        VARIANT_BOOL pBool );
    _bstr_t GetRecordSelectionFormula ( );
    void PutRecordSelectionFormula (
        _bstr_t ppRecordSelectionFormula );
    _bstr_t GetGroupSelectionFormula ( );
    void PutGroupSelectionFormula (
        _bstr_t ppGroupSelectionFormula );
    ISortFieldsPtr GetRecordSortFields ( );
    HRESULT CancelPrinting ( );
    VARIANT_BOOL GetHasSavedData ( );
    HRESULT DiscardSavedData ( );
    IPrintingStatusPtr GetPrintingStatus ( );
    _bstr_t GetReportTitle ( );
    void PutReportTitle (
        _bstr_t ppReportTitle );
    _bstr_t GetReportSubject ( );
    void PutReportSubject (
        _bstr_t ppReportSubject );
    _bstr_t GetReportAuthor ( );
    void PutReportAuthor (
        _bstr_t ppReportAuthor );
    _bstr_t GetReportComments ( );
    void PutReportComments (
        _bstr_t ppReportComments );
    _bstr_t GetReportTemplate ( );
    void PutReportTemplate (
        _bstr_t ppReportTemplate );
    _bstr_t GetKeywordsInReport ( );
    void PutKeywordsInReport (
        _bstr_t ppKeywordsInReport );
    _bstr_t GetApplicationName ( );
    void PutApplicationName (
        _bstr_t ppApplicationName );
    HRESULT ReadRecords ( );
    _variant_t GetNextRows (
        long startRowN,
        long * pRowN );
    IRunningTotalFieldDefinitionsPtr GetRunningTotalFields ( );
    VARIANT_BOOL GetPerformGroupingOnServer ( );
    void PutPerformGroupingOnServer (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetCanPerformGroupingOnServer ( );
    _bstr_t GetSQLQueryString ( );
    void PutSQLQueryString (
        _bstr_t ppSQLQueryString );
    ISQLExpressionFieldDefinitionsPtr GetSQLExpressionFields ( );
    IReportPtr OpenSubreport (
        _bstr_t pSubreportName );
    ISortFieldsPtr GetGroupSortFields ( );
    HRESULT AddGroup (
        short GroupNumber,
        IDispatch * pConditionField,
        enum CRGroupCondition Condition,
        enum CRSortDirection SortDirection );
    HRESULT SetDialogParentWindow (
        long hWnd );
    VARIANT_BOOL GetEnablePerformQueriesAsynchronously ( );
    void PutEnablePerformQueriesAsynchronously (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetEnableSelectDistinctRecords ( );
    void PutEnableSelectDistinctRecords (
        VARIANT_BOOL pBool );
    HRESULT AddReportVariable (
        enum CRReportVariableValueType type,
        _bstr_t pName,
        long arraySize,
        const _variant_t & reserved = vtMissing );
    _variant_t GetReportVariableValue (
        _bstr_t pName );
    HRESULT SetReportVariableValue (
        _bstr_t pName,
        const _variant_t & var );
    enum CRReportFormatStyle GetReportFormatStyle ( );
    void PutReportFormatStyle (
        enum CRReportFormatStyle pFormatStyle );
    HRESULT DeleteGroup (
        short GroupNumber );
    VARIANT_BOOL GetEnableAsyncQuery ( );
    void PutEnableAsyncQuery (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetEnableGeneratingDataForHiddenObject ( );
    void PutEnableGeneratingDataForHiddenObject (
        VARIANT_BOOL pBool );
    void PutPrinterDuplex (
        enum CRPrinterDuplexType pPrinterDuplexType );
    enum CRPrinterDuplexType GetPrinterDuplex ( );
    void PutPaperSource (
        enum CRPaperSource pPaperSource );
    enum CRPaperSource GetPaperSource ( );
    VARIANT_BOOL GetSavePreviewPicture ( );
    void PutSavePreviewPicture (
        VARIANT_BOOL pBool );
    HRESULT PrinterSetup (
        long hWnd );
    HRESULT AutoSetUnboundFieldSource (
        enum CRBindingMatchType matchType,
        const _variant_t & bindSubReports = vtMissing );
    HRESULT SaveAs (
        _bstr_t pFilePath,
        enum CRReportFileFormat fileFormat );
    void PutFieldMappingType (
        enum CRFieldMappingType fldMappingType );
    enum CRFieldMappingType GetFieldMappingType ( );
    enum CRFormulaSyntax GetFormulaSyntax ( );
    void PutFormulaSyntax (
        enum CRFormulaSyntax pFormulaSyntax );
    enum CRFormulaSyntax GetLastGetFormulaSyntax ( );
    VARIANT_BOOL GetNeedUpdatePages ( );
    IReportAlertsPtr GetReportAlerts ( );
    HRESULT SwapGroups (
        short sourceGroupN,
        short targetGroupN );
    HRESULT SetUserPaperSize (
        short length,
        short Width );
    HRESULT PrintOutEx (
        const _variant_t & promptUser,
        const _variant_t & numberOfCopy,
        const _variant_t & collated,
        const _variant_t & startPageN,
        const _variant_t & stopPageN,
        _bstr_t printFileName );
    long PrinterSetupEx (
        long hWnd );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Areas (
        struct IAreas * * ppAreas ) = 0;
    virtual HRESULT __stdcall get_Sections (
        struct ISections * * ppSections ) = 0;
    virtual HRESULT __stdcall get_PrintDate (
        DATE * pDate ) = 0;
    virtual HRESULT __stdcall put_PrintDate (
        DATE pDate ) = 0;
    virtual HRESULT __stdcall get_UseIndexForSpeed (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_UseIndexForSpeed (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_TranslateDosStrings (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_TranslateDosStrings (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_TranslateDosMemos (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_TranslateDosMemos (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_ConvertDateTimeType (
        enum CRConvertDateTimeType * pDateTimeType ) = 0;
    virtual HRESULT __stdcall put_ConvertDateTimeType (
        enum CRConvertDateTimeType pDateTimeType ) = 0;
    virtual HRESULT __stdcall get_ConvertNullFieldToDefault (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_ConvertNullFieldToDefault (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_CaseInsensitiveSQLData (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_CaseInsensitiveSQLData (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_VerifyOnEveryPrint (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_VerifyOnEveryPrint (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_Database (
        struct IDatabase * * ppDatabase ) = 0;
    virtual HRESULT __stdcall get_PrinterName (
        BSTR * ppPrinterName ) = 0;
    virtual HRESULT __stdcall get_DriverName (
        BSTR * ppDriverName ) = 0;
    virtual HRESULT __stdcall get_PortName (
        BSTR * ppPortName ) = 0;
    virtual HRESULT __stdcall get_PaperOrientation (
        enum CRPaperOrientation * pPaperOrientation ) = 0;
    virtual HRESULT __stdcall put_PaperOrientation (
        enum CRPaperOrientation pPaperOrientation ) = 0;
    virtual HRESULT __stdcall get_PaperSize (
        enum CRPaperSize * pPaperSize ) = 0;
    virtual HRESULT __stdcall put_PaperSize (
        enum CRPaperSize pPaperSize ) = 0;
    virtual HRESULT __stdcall raw_Save (
        BSTR pReportFileName ) = 0;
    virtual HRESULT __stdcall raw_PrintOut (
        VARIANT promptUser = vtMissing,
        VARIANT numberOfCopy = vtMissing,
        VARIANT collated = vtMissing,
        VARIANT startPageN = vtMissing,
        VARIANT stopPageN = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_SelectPrinter (
        BSTR pDriverName,
        BSTR pPrinterName,
        BSTR pPortName ) = 0;
    virtual HRESULT __stdcall get_FormulaFields (
        struct IFormulaFieldDefinitions * * ppFormulaFields ) = 0;
    virtual HRESULT __stdcall get_ParameterFields (
        struct IParameterFieldDefinitions * * ppParameterFields ) = 0;
    virtual HRESULT __stdcall get_GroupNameFields (
        struct IGroupNameFieldDefinitions * * ppGroupNameFields ) = 0;
    virtual HRESULT __stdcall get_SummaryFields (
        struct ISummaryFieldDefinitions * * ppSummaryFieldDefinitions ) = 0;
    virtual HRESULT __stdcall get_Kind (
        enum CRReportKind * pReportKind ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct IReport * * ppReport ) = 0;
    virtual HRESULT __stdcall get_NumberOfGroup (
        long * pNumberOfGroup ) = 0;
    virtual HRESULT __stdcall get_MorePrintEngineErrorMessages (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_MorePrintEngineErrorMessages (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_LeftMargin (
        long * pLeftMargin ) = 0;
    virtual HRESULT __stdcall put_LeftMargin (
        long pLeftMargin ) = 0;
    virtual HRESULT __stdcall get_RightMargin (
        long * pRightMargin ) = 0;
    virtual HRESULT __stdcall put_RightMargin (
        long pRightMargin ) = 0;
    virtual HRESULT __stdcall get_TopMargin (
        long * pTopMargin ) = 0;
    virtual HRESULT __stdcall put_TopMargin (
        long pTopMargin ) = 0;
    virtual HRESULT __stdcall get_BottomMargin (
        long * pBottomMargin ) = 0;
    virtual HRESULT __stdcall put_BottomMargin (
        long pBottomMargin ) = 0;
    virtual HRESULT __stdcall get_PageEngine (
        struct IPageEngine * * ppPageEngine ) = 0;
    virtual HRESULT __stdcall raw_Export (
        VARIANT promptUser = vtMissing ) = 0;
    virtual HRESULT __stdcall get_ExportOptions (
        struct IExportOptions * * ppExportOptions ) = 0;
    virtual HRESULT __stdcall get_Application (
        struct IApplication * * ppApplication ) = 0;
    virtual HRESULT __stdcall get_EnableParameterPrompting (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_EnableParameterPrompting (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_DisplayProgressDialog (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_DisplayProgressDialog (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_RecordSelectionFormula (
        BSTR * ppRecordSelectionFormula ) = 0;
    virtual HRESULT __stdcall put_RecordSelectionFormula (
        BSTR ppRecordSelectionFormula ) = 0;
    virtual HRESULT __stdcall get_GroupSelectionFormula (
        BSTR * ppGroupSelectionFormula ) = 0;
    virtual HRESULT __stdcall put_GroupSelectionFormula (
        BSTR ppGroupSelectionFormula ) = 0;
    virtual HRESULT __stdcall get_RecordSortFields (
        struct ISortFields * * ppRecordSortFields ) = 0;
    virtual HRESULT __stdcall raw_CancelPrinting ( ) = 0;
    virtual HRESULT __stdcall get_HasSavedData (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall raw_DiscardSavedData ( ) = 0;
    virtual HRESULT __stdcall get_PrintingStatus (
        struct IPrintingStatus * * ppPrintingStatus ) = 0;
    virtual HRESULT __stdcall get_ReportTitle (
        BSTR * ppReportTitle ) = 0;
    virtual HRESULT __stdcall put_ReportTitle (
        BSTR ppReportTitle ) = 0;
    virtual HRESULT __stdcall get_ReportSubject (
        BSTR * ppReportSubject ) = 0;
    virtual HRESULT __stdcall put_ReportSubject (
        BSTR ppReportSubject ) = 0;
    virtual HRESULT __stdcall get_ReportAuthor (
        BSTR * ppReportAuthor ) = 0;
    virtual HRESULT __stdcall put_ReportAuthor (
        BSTR ppReportAuthor ) = 0;
    virtual HRESULT __stdcall get_ReportComments (
        BSTR * ppReportComments ) = 0;
    virtual HRESULT __stdcall put_ReportComments (
        BSTR ppReportComments ) = 0;
    virtual HRESULT __stdcall get_ReportTemplate (
        BSTR * ppReportTemplate ) = 0;
    virtual HRESULT __stdcall put_ReportTemplate (
        BSTR ppReportTemplate ) = 0;
    virtual HRESULT __stdcall get_KeywordsInReport (
        BSTR * ppKeywordsInReport ) = 0;
    virtual HRESULT __stdcall put_KeywordsInReport (
        BSTR ppKeywordsInReport ) = 0;
    virtual HRESULT __stdcall get_ApplicationName (
        BSTR * ppApplicationName ) = 0;
    virtual HRESULT __stdcall put_ApplicationName (
        BSTR ppApplicationName ) = 0;
    virtual HRESULT __stdcall raw_ReadRecords ( ) = 0;
    virtual HRESULT __stdcall raw_GetNextRows (
        long startRowN,
        long * pRowN,
        VARIANT * pRowset ) = 0;
    virtual HRESULT __stdcall get_RunningTotalFields (
        struct IRunningTotalFieldDefinitions * * ppRunningTotalFieldDefinitions ) = 0;
    virtual HRESULT __stdcall get_PerformGroupingOnServer (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_PerformGroupingOnServer (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_CanPerformGroupingOnServer (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall get_SQLQueryString (
        BSTR * ppSQLQueryString ) = 0;
    virtual HRESULT __stdcall put_SQLQueryString (
        BSTR ppSQLQueryString ) = 0;
    virtual HRESULT __stdcall get_SQLExpressionFields (
        struct ISQLExpressionFieldDefinitions * * ppSQLExpressionFieldDefinitions ) = 0;
    virtual HRESULT __stdcall raw_OpenSubreport (
        BSTR pSubreportName,
        struct IReport * * ppSubreport ) = 0;
    virtual HRESULT __stdcall get_GroupSortFields (
        struct ISortFields * * ppGroupSortFields ) = 0;
    virtual HRESULT __stdcall raw_AddGroup (
        short GroupNumber,
        IDispatch * pConditionField,
        enum CRGroupCondition Condition,
        enum CRSortDirection SortDirection ) = 0;
    virtual HRESULT __stdcall raw_SetDialogParentWindow (
        long hWnd ) = 0;
    virtual HRESULT __stdcall get_EnablePerformQueriesAsynchronously (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_EnablePerformQueriesAsynchronously (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_EnableSelectDistinctRecords (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_EnableSelectDistinctRecords (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall raw_AddReportVariable (
        enum CRReportVariableValueType type,
        BSTR pName,
        long arraySize,
        VARIANT reserved = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_GetReportVariableValue (
        BSTR pName,
        VARIANT * ppVar ) = 0;
    virtual HRESULT __stdcall raw_SetReportVariableValue (
        BSTR pName,
        VARIANT var ) = 0;
    virtual HRESULT __stdcall get_ReportFormatStyle (
        enum CRReportFormatStyle * pFormatStyle ) = 0;
    virtual HRESULT __stdcall put_ReportFormatStyle (
        enum CRReportFormatStyle pFormatStyle ) = 0;
    virtual HRESULT __stdcall raw_DeleteGroup (
        short GroupNumber ) = 0;
    virtual HRESULT __stdcall get_EnableAsyncQuery (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_EnableAsyncQuery (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_EnableGeneratingDataForHiddenObject (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_EnableGeneratingDataForHiddenObject (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall put_PrinterDuplex (
        enum CRPrinterDuplexType pPrinterDuplexType ) = 0;
    virtual HRESULT __stdcall get_PrinterDuplex (
        enum CRPrinterDuplexType * pPrinterDuplexType ) = 0;
    virtual HRESULT __stdcall put_PaperSource (
        enum CRPaperSource pPaperSource ) = 0;
    virtual HRESULT __stdcall get_PaperSource (
        enum CRPaperSource * pPaperSource ) = 0;
    virtual HRESULT __stdcall get_SavePreviewPicture (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_SavePreviewPicture (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall raw_PrinterSetup (
        long hWnd ) = 0;
    virtual HRESULT __stdcall raw_AutoSetUnboundFieldSource (
        enum CRBindingMatchType matchType,
        VARIANT bindSubReports = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_SaveAs (
        BSTR pFilePath,
        enum CRReportFileFormat fileFormat ) = 0;
    virtual HRESULT __stdcall put_FieldMappingType (
        enum CRFieldMappingType fldMappingType ) = 0;
    virtual HRESULT __stdcall get_FieldMappingType (
        enum CRFieldMappingType * fldMappingType ) = 0;
    virtual HRESULT __stdcall get_FormulaSyntax (
        enum CRFormulaSyntax * pFormulaSyntax ) = 0;
    virtual HRESULT __stdcall put_FormulaSyntax (
        enum CRFormulaSyntax pFormulaSyntax ) = 0;
    virtual HRESULT __stdcall get_LastGetFormulaSyntax (
        enum CRFormulaSyntax * pLastGetFormulaSyntax ) = 0;
    virtual HRESULT __stdcall get_NeedUpdatePages (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall get_ReportAlerts (
        struct IReportAlerts * * ppReportAlerts ) = 0;
    virtual HRESULT __stdcall raw_SwapGroups (
        short sourceGroupN,
        short targetGroupN ) = 0;
    virtual HRESULT __stdcall raw_SetUserPaperSize (
        short length,
        short Width ) = 0;
    virtual HRESULT __stdcall raw_PrintOutEx (
        VARIANT promptUser,
        VARIANT numberOfCopy,
        VARIANT collated,
        VARIANT startPageN,
        VARIANT stopPageN,
        BSTR printFileName ) = 0;
    virtual HRESULT __stdcall raw_PrinterSetupEx (
        long hWnd,
        long * retVal ) = 0;
};

struct __declspec(uuid("af376803-6120-4e28-96dd-63fd2dc27b7a"))
IAreas : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAreaPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IReportPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    IAreaPtr GetItem (
        const _variant_t & index );
    long GetCount ( );
    IReportPtr GetParent ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * ppNewEnum ) = 0;
    virtual HRESULT __stdcall get_Item (
        VARIANT index,
        struct IArea * * ppArea ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * pCount ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct IReport * * ppReport ) = 0;
};

struct __declspec(uuid("af376805-6120-4e28-96dd-63fd2dc27b7a"))
IArea : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKeepTogether,put=PutKeepTogether))
    VARIANT_BOOL KeepTogether;
    __declspec(property(get=GetNewPageBefore,put=PutNewPageBefore))
    VARIANT_BOOL NewPageBefore;
    __declspec(property(get=GetNewPageAfter,put=PutNewPageAfter))
    VARIANT_BOOL NewPageAfter;
    __declspec(property(get=GetResetPageNumberAfter,put=PutResetPageNumberAfter))
    VARIANT_BOOL ResetPageNumberAfter;
    __declspec(property(get=GetPrintAtBottomOfPage,put=PutPrintAtBottomOfPage))
    VARIANT_BOOL PrintAtBottomOfPage;
    __declspec(property(get=GetTopOrBottomNGroupSortOrder,put=PutTopOrBottomNGroupSortOrder))
    enum CRTopBottomNGroupSortOrder TopOrBottomNGroupSortOrder;
    __declspec(property(get=GetNumberOfTopOrBottomNGroups,put=PutNumberOfTopOrBottomNGroups))
    short NumberOfTopOrBottomNGroups;
    __declspec(property(get=GetDiscardOtherGroups,put=PutDiscardOtherGroups))
    VARIANT_BOOL DiscardOtherGroups;
    __declspec(property(get=GetTopOrBottomNSortField,put=PutTopOrBottomNSortField))
    ISummaryFieldDefinitionPtr TopOrBottomNSortField;
    __declspec(property(get=GetDetailWidth))
    long DetailWidth;
    __declspec(property(get=GetDetailHeight))
    long DetailHeight;
    __declspec(property(get=GetGroupNumber))
    short GroupNumber;
    __declspec(property(get=GetCopiesToPrint,put=PutCopiesToPrint))
    short CopiesToPrint;
    __declspec(property(get=GetSortDirection,put=PutSortDirection))
    enum CRSortDirection SortDirection;
    __declspec(property(get=GetRepeatGroupHeader,put=PutRepeatGroupHeader))
    VARIANT_BOOL RepeatGroupHeader;
    __declspec(property(get=GetKeepGroupTogether,put=PutKeepGroupTogether))
    VARIANT_BOOL KeepGroupTogether;
    __declspec(property(get=GetGroupCondition,put=PutGroupCondition))
    enum CRGroupCondition GroupCondition;
    __declspec(property(get=GetGroupConditionField,put=PutGroupConditionField))
    IDispatchPtr GroupConditionField;
    __declspec(property(get=GetParent))
    IReportPtr Parent;
    __declspec(property(get=GetKind))
    enum CRAreaKind Kind;
    __declspec(property(get=GetHorizontalGap))
    long HorizontalGap;
    __declspec(property(get=GetSections))
    ISectionsPtr Sections;
    __declspec(property(get=GetHideForDrillDown,put=PutHideForDrillDown))
    VARIANT_BOOL HideForDrillDown;
    __declspec(property(get=GetConditionFormula,put=PutConditionFormula))
    _bstr_t ConditionFormula[];
    __declspec(property(get=GetSuppress,put=PutSuppress))
    VARIANT_BOOL Suppress;
    __declspec(property(get=GetEnableHierarchicalGroupSorting,put=PutEnableHierarchicalGroupSorting))
    VARIANT_BOOL EnableHierarchicalGroupSorting;
    __declspec(property(get=GetParentIDField))
    IFieldDefinitionPtr ParentIDField;
    __declspec(property(get=GetInstanceIDField))
    IFieldDefinitionPtr InstanceIDField;
    __declspec(property(get=GetGroupIndent,put=PutGroupIndent))
    long GroupIndent;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t ppName );
    enum CRAreaKind GetKind ( );
    ISectionsPtr GetSections ( );
    IReportPtr GetParent ( );
    VARIANT_BOOL GetSuppress ( );
    void PutSuppress (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetHideForDrillDown ( );
    void PutHideForDrillDown (
        VARIANT_BOOL pBool );
    short GetGroupNumber ( );
    short GetCopiesToPrint ( );
    void PutCopiesToPrint (
        short pCopiesToPrint );
    VARIANT_BOOL GetKeepTogether ( );
    void PutKeepTogether (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetNewPageAfter ( );
    void PutNewPageAfter (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetNewPageBefore ( );
    void PutNewPageBefore (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetPrintAtBottomOfPage ( );
    void PutPrintAtBottomOfPage (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetResetPageNumberAfter ( );
    void PutResetPageNumberAfter (
        VARIANT_BOOL pBool );
    enum CRSortDirection GetSortDirection ( );
    void PutSortDirection (
        enum CRSortDirection pSortDirection );
    VARIANT_BOOL GetRepeatGroupHeader ( );
    void PutRepeatGroupHeader (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetKeepGroupTogether ( );
    void PutKeepGroupTogether (
        VARIANT_BOOL pBool );
    enum CRGroupCondition GetGroupCondition ( );
    void PutGroupCondition (
        enum CRGroupCondition pGroupCondition );
    IDispatchPtr GetGroupConditionField ( );
    void PutGroupConditionField (
        IDispatch * ppConditionField );
    long GetDetailWidth ( );
    long GetDetailHeight ( );
    long GetHorizontalGap ( );
    enum CRTopBottomNGroupSortOrder GetTopOrBottomNGroupSortOrder ( );
    void PutTopOrBottomNGroupSortOrder (
        enum CRTopBottomNGroupSortOrder pTopOrBottomNGroupSortOrder );
    short GetNumberOfTopOrBottomNGroups ( );
    void PutNumberOfTopOrBottomNGroups (
        short pNumberOfTopOrBottomNGroups );
    VARIANT_BOOL GetDiscardOtherGroups ( );
    void PutDiscardOtherGroups (
        VARIANT_BOOL pBool );
    ISummaryFieldDefinitionPtr GetTopOrBottomNSortField ( );
    void PutTopOrBottomNSortField (
        struct ISummaryFieldDefinition * ppTopOrBottomNSortField );
    VARIANT_BOOL GetEnableHierarchicalGroupSorting ( );
    void PutEnableHierarchicalGroupSorting (
        VARIANT_BOOL pBool );
    IFieldDefinitionPtr GetParentIDField ( );
    HRESULT SetParentIDField (
        const _variant_t & ParentIDField );
    IFieldDefinitionPtr GetInstanceIDField ( );
    HRESULT SetInstanceIDField (
        const _variant_t & InstanceIDField );
    long GetGroupIndent ( );
    void PutGroupIndent (
        long pGroupIndent );
    _variant_t GetSpecifiedGroups ( );
    void PutSpecifiedGroups (
        VARIANT * pSpecifedGroupArray );
    _bstr_t GetConditionFormula (
        const _variant_t & FormulaName );
    void PutConditionFormula (
        const _variant_t & FormulaName,
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Name (
        BSTR * ppName ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR ppName ) = 0;
    virtual HRESULT __stdcall get_Kind (
        enum CRAreaKind * pAreaKind ) = 0;
    virtual HRESULT __stdcall get_Sections (
        struct ISections * * ppSections ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct IReport * * ppParent ) = 0;
    virtual HRESULT __stdcall get_Suppress (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_Suppress (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_HideForDrillDown (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_HideForDrillDown (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_GroupNumber (
        short * pGroupNumber ) = 0;
    virtual HRESULT __stdcall get_CopiesToPrint (
        short * pCopiesToPrint ) = 0;
    virtual HRESULT __stdcall put_CopiesToPrint (
        short pCopiesToPrint ) = 0;
    virtual HRESULT __stdcall get_KeepTogether (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_KeepTogether (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_NewPageAfter (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_NewPageAfter (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_NewPageBefore (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_NewPageBefore (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_PrintAtBottomOfPage (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_PrintAtBottomOfPage (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_ResetPageNumberAfter (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_ResetPageNumberAfter (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_SortDirection (
        enum CRSortDirection * pSortDirection ) = 0;
    virtual HRESULT __stdcall put_SortDirection (
        enum CRSortDirection pSortDirection ) = 0;
    virtual HRESULT __stdcall get_RepeatGroupHeader (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_RepeatGroupHeader (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_KeepGroupTogether (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_KeepGroupTogether (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_GroupCondition (
        enum CRGroupCondition * pGroupCondition ) = 0;
    virtual HRESULT __stdcall put_GroupCondition (
        enum CRGroupCondition pGroupCondition ) = 0;
    virtual HRESULT __stdcall get_GroupConditionField (
        IDispatch * * ppConditionField ) = 0;
    virtual HRESULT __stdcall put_GroupConditionField (
        IDispatch * ppConditionField ) = 0;
    virtual HRESULT __stdcall get_DetailWidth (
        long * pDetailWidth ) = 0;
    virtual HRESULT __stdcall get_DetailHeight (
        long * pDetailHeight ) = 0;
    virtual HRESULT __stdcall get_HorizontalGap (
        long * pHorizontalGap ) = 0;
    virtual HRESULT __stdcall get_TopOrBottomNGroupSortOrder (
        enum CRTopBottomNGroupSortOrder * pTopOrBottomNGroupSortOrder ) = 0;
    virtual HRESULT __stdcall put_TopOrBottomNGroupSortOrder (
        enum CRTopBottomNGroupSortOrder pTopOrBottomNGroupSortOrder ) = 0;
    virtual HRESULT __stdcall get_NumberOfTopOrBottomNGroups (
        short * pNumberOfTopOrBottomNGroups ) = 0;
    virtual HRESULT __stdcall put_NumberOfTopOrBottomNGroups (
        short pNumberOfTopOrBottomNGroups ) = 0;
    virtual HRESULT __stdcall get_DiscardOtherGroups (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_DiscardOtherGroups (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_TopOrBottomNSortField (
        struct ISummaryFieldDefinition * * ppTopOrBottomNSortField ) = 0;
    virtual HRESULT __stdcall put_TopOrBottomNSortField (
        struct ISummaryFieldDefinition * ppTopOrBottomNSortField ) = 0;
    virtual HRESULT __stdcall get_EnableHierarchicalGroupSorting (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_EnableHierarchicalGroupSorting (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_ParentIDField (
        struct IFieldDefinition * * ppParentIDField ) = 0;
    virtual HRESULT __stdcall raw_SetParentIDField (
        VARIANT ParentIDField ) = 0;
    virtual HRESULT __stdcall get_InstanceIDField (
        struct IFieldDefinition * * ppInstanceIDField ) = 0;
    virtual HRESULT __stdcall raw_SetInstanceIDField (
        VARIANT InstanceIDField ) = 0;
    virtual HRESULT __stdcall get_GroupIndent (
        long * pGroupIndent ) = 0;
    virtual HRESULT __stdcall put_GroupIndent (
        long pGroupIndent ) = 0;
    virtual HRESULT __stdcall get_SpecifiedGroups (
        VARIANT * pSpecifedGroupArray ) = 0;
    virtual HRESULT __stdcall put_SpecifiedGroups (
        VARIANT * pSpecifedGroupArray ) = 0;
    virtual HRESULT __stdcall get_ConditionFormula (
        VARIANT FormulaName,
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_ConditionFormula (
        VARIANT FormulaName,
        BSTR pVal ) = 0;
};

enum CRAreaKind
{
    crReportHeader = 1,
    crPageHeader = 2,
    crGroupHeader = 3,
    crDetail = 4,
    crGroupFooter = 5,
    crPageFooter = 7,
    crReportFooter = 8
};

struct __declspec(uuid("af376804-6120-4e28-96dd-63fd2dc27b7a"))
ISections : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    ISectionPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDispatchPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    ISectionPtr GetItem (
        const _variant_t & index );
    long GetCount ( );
    IDispatchPtr GetParent ( );
    ISectionPtr Add (
        const _variant_t & index = vtMissing );
    HRESULT Delete (
        const _variant_t & index );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * ppNewEnum ) = 0;
    virtual HRESULT __stdcall get_Item (
        VARIANT index,
        struct ISection * * ppSection ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * pCount ) = 0;
    virtual HRESULT __stdcall get_Parent (
        IDispatch * * ppParent ) = 0;
    virtual HRESULT __stdcall raw_Add (
        VARIANT index,
        struct ISection * * ppSection ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT index ) = 0;
};

struct __declspec(uuid("af376806-6120-4e28-96dd-63fd2dc27b7a"))
ISection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetReportObjects))
    IReportObjectsPtr ReportObjects;
    __declspec(property(get=GetNumber))
    short Number;
    __declspec(property(get=GetNewPageBefore,put=PutNewPageBefore))
    VARIANT_BOOL NewPageBefore;
    __declspec(property(get=GetParent))
    IAreaPtr Parent;
    __declspec(property(get=GetNewPageAfter,put=PutNewPageAfter))
    VARIANT_BOOL NewPageAfter;
    __declspec(property(get=GetResetPageNumberAfter,put=PutResetPageNumberAfter))
    VARIANT_BOOL ResetPageNumberAfter;
    __declspec(property(get=GetPrintAtBottomOfPage,put=PutPrintAtBottomOfPage))
    VARIANT_BOOL PrintAtBottomOfPage;
    __declspec(property(get=GetWidth))
    long Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    long Height;
    __declspec(property(get=GetUnderlaySection,put=PutUnderlaySection))
    VARIANT_BOOL UnderlaySection;
    __declspec(property(get=GetSuppressIfBlank,put=PutSuppressIfBlank))
    VARIANT_BOOL SuppressIfBlank;
    __declspec(property(get=GetMinimumHeight))
    long MinimumHeight;
    __declspec(property(get=GetCssClass,put=PutCssClass))
    _bstr_t CssClass;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    OLE_COLOR BackColor;
    __declspec(property(get=GetSuppress,put=PutSuppress))
    VARIANT_BOOL Suppress;
    __declspec(property(get=GetKeepTogether,put=PutKeepTogether))
    VARIANT_BOOL KeepTogether;
    __declspec(property(get=GetConditionFormula,put=PutConditionFormula))
    _bstr_t ConditionFormula[];

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t ppName );
    long GetHeight ( );
    void PutHeight (
        long pHeight );
    IReportObjectsPtr GetReportObjects ( );
    long GetWidth ( );
    OLE_COLOR GetBackColor ( );
    void PutBackColor (
        OLE_COLOR pBackColor );
    VARIANT_BOOL GetSuppress ( );
    void PutSuppress (
        VARIANT_BOOL pBool );
    IAreaPtr GetParent ( );
    short GetNumber ( );
    VARIANT_BOOL GetNewPageBefore ( );
    void PutNewPageBefore (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetNewPageAfter ( );
    void PutNewPageAfter (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetKeepTogether ( );
    void PutKeepTogether (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetResetPageNumberAfter ( );
    void PutResetPageNumberAfter (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetPrintAtBottomOfPage ( );
    void PutPrintAtBottomOfPage (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetUnderlaySection ( );
    void PutUnderlaySection (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetSuppressIfBlank ( );
    void PutSuppressIfBlank (
        VARIANT_BOOL pBool );
    long GetMinimumHeight ( );
    IFieldObjectPtr AddFieldObject (
        const _variant_t & Field,
        long Left,
        long Top );
    ITextObjectPtr AddTextObject (
        _bstr_t pText,
        long Left,
        long Top,
        const _variant_t & formatText = vtMissing );
    IBlobFieldObjectPtr AddBlobFieldObject (
        const _variant_t & Field,
        long Left,
        long Top );
    IFieldObjectPtr AddSpecialVarFieldObject (
        enum CRSpecialVarType specialVarType,
        long Left,
        long Top );
    ISubreportObjectPtr AddSubreportObject (
        _bstr_t pSubreportName,
        long Left,
        long Top );
    ISubreportObjectPtr ImportSubreport (
        _bstr_t subreportFileName,
        long Left,
        long Top );
    HRESULT DeleteObject (
        const _variant_t & reportObject );
    ILineObjectPtr AddLineObject (
        long Left,
        long Top,
        long Right,
        long Bottom,
        const _variant_t & pEndSection = vtMissing );
    IBoxObjectPtr AddBoxObject (
        long Left,
        long Top,
        long Right,
        long Bottom,
        const _variant_t & pEndSection = vtMissing );
    ICrossTabObjectPtr AddCrossTabObject (
        long Left,
        long Top );
    ICROleObjectPtr AddPictureObject (
        _bstr_t pImageFilePath,
        long Left,
        long Top );
    IGraphObjectPtr AddGraphObject (
        enum CRGraphDataType graphDataType,
        long Left,
        long Top,
        const _variant_t & pCrossTabObject = vtMissing );
    IFieldObjectPtr AddSummaryFieldObject (
        const _variant_t & Field,
        enum CRSummaryType SummaryType,
        long Left,
        long Top,
        const _variant_t & secondSummaryFieldOrFactor = vtMissing );
    IFieldObjectPtr AddUnboundFieldObject (
        CRFieldValueType ValueType,
        long Left,
        long Top );
    _bstr_t GetConditionFormula (
        const _variant_t & FormulaName );
    void PutConditionFormula (
        const _variant_t & FormulaName,
        _bstr_t pVal );
    _bstr_t GetCssClass ( );
    void PutCssClass (
        _bstr_t ppCssClass );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Name (
        BSTR * ppName ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR ppName ) = 0;
    virtual HRESULT __stdcall get_Height (
        long * pHeight ) = 0;
    virtual HRESULT __stdcall put_Height (
        long pHeight ) = 0;
    virtual HRESULT __stdcall get_ReportObjects (
        struct IReportObjects * * ppReportObjects ) = 0;
    virtual HRESULT __stdcall get_Width (
        long * pWidth ) = 0;
    virtual HRESULT __stdcall get_BackColor (
        OLE_COLOR * pBackColor ) = 0;
    virtual HRESULT __stdcall put_BackColor (
        OLE_COLOR pBackColor ) = 0;
    virtual HRESULT __stdcall get_Suppress (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_Suppress (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct IArea * * ppArea ) = 0;
    virtual HRESULT __stdcall get_Number (
        short * pNumber ) = 0;
    virtual HRESULT __stdcall get_NewPageBefore (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_NewPageBefore (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_NewPageAfter (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_NewPageAfter (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_KeepTogether (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_KeepTogether (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_ResetPageNumberAfter (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_ResetPageNumberAfter (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_PrintAtBottomOfPage (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_PrintAtBottomOfPage (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_UnderlaySection (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_UnderlaySection (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_SuppressIfBlank (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_SuppressIfBlank (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_MinimumHeight (
        long * pMinimumHeight ) = 0;
    virtual HRESULT __stdcall raw_AddFieldObject (
        VARIANT Field,
        long Left,
        long Top,
        struct IFieldObject * * ppFieldObject ) = 0;
    virtual HRESULT __stdcall raw_AddTextObject (
        BSTR pText,
        long Left,
        long Top,
        VARIANT formatText,
        struct ITextObject * * ppTextObject ) = 0;
    virtual HRESULT __stdcall raw_AddBlobFieldObject (
        VARIANT Field,
        long Left,
        long Top,
        struct IBlobFieldObject * * ppBlobFieldObject ) = 0;
    virtual HRESULT __stdcall raw_AddSpecialVarFieldObject (
        enum CRSpecialVarType specialVarType,
        long Left,
        long Top,
        struct IFieldObject * * ppFieldObject ) = 0;
    virtual HRESULT __stdcall raw_AddSubreportObject (
        BSTR pSubreportName,
        long Left,
        long Top,
        struct ISubreportObject * * ppSubreportObject ) = 0;
    virtual HRESULT __stdcall raw_ImportSubreport (
        BSTR subreportFileName,
        long Left,
        long Top,
        struct ISubreportObject * * ppSubreportObject ) = 0;
    virtual HRESULT __stdcall raw_DeleteObject (
        VARIANT reportObject ) = 0;
    virtual HRESULT __stdcall raw_AddLineObject (
        long Left,
        long Top,
        long Right,
        long Bottom,
        VARIANT pEndSection,
        struct ILineObject * * ppBoxObject ) = 0;
    virtual HRESULT __stdcall raw_AddBoxObject (
        long Left,
        long Top,
        long Right,
        long Bottom,
        VARIANT pEndSection,
        struct IBoxObject * * ppBoxObject ) = 0;
    virtual HRESULT __stdcall raw_AddCrossTabObject (
        long Left,
        long Top,
        struct ICrossTabObject * * ppCrossTabObject ) = 0;
    virtual HRESULT __stdcall raw_AddPictureObject (
        BSTR pImageFilePath,
        long Left,
        long Top,
        struct ICROleObject * * ppOleObject ) = 0;
    virtual HRESULT __stdcall raw_AddGraphObject (
        enum CRGraphDataType graphDataType,
        long Left,
        long Top,
        VARIANT pCrossTabObject,
        struct IGraphObject * * ppGraphObject ) = 0;
    virtual HRESULT __stdcall raw_AddSummaryFieldObject (
        VARIANT Field,
        enum CRSummaryType SummaryType,
        long Left,
        long Top,
        VARIANT secondSummaryFieldOrFactor,
        struct IFieldObject * * ppFieldObject ) = 0;
    virtual HRESULT __stdcall raw_AddUnboundFieldObject (
        CRFieldValueType ValueType,
        long Left,
        long Top,
        struct IFieldObject * * ppFieldObject ) = 0;
    virtual HRESULT __stdcall get_ConditionFormula (
        VARIANT FormulaName,
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_ConditionFormula (
        VARIANT FormulaName,
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_CssClass (
        BSTR * ppCssClass ) = 0;
    virtual HRESULT __stdcall put_CssClass (
        BSTR ppCssClass ) = 0;
};

struct __declspec(uuid("af376807-6120-4e28-96dd-63fd2dc27b7a"))
IReportObjects : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IDispatchPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    ISectionPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    IDispatchPtr GetItem (
        const _variant_t & index );
    long GetCount ( );
    ISectionPtr GetParent ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * ppNewEnum ) = 0;
    virtual HRESULT __stdcall get_Item (
        VARIANT index,
        IDispatch * * ppReportObject ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * pCount ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct ISection * * ppParent ) = 0;
};

struct __declspec(uuid("af376809-6120-4e28-96dd-63fd2dc27b7a"))
IFieldObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetAmPmType,put=PutAmPmType))
    enum CRAmPmType AmPmType;
    __declspec(property(get=GetHourType,put=PutHourType))
    enum CRHourType HourType;
    __declspec(property(get=GetMinuteType,put=PutMinuteType))
    enum CRMinuteType MinuteType;
    __declspec(property(get=GetSecondType,put=PutSecondType))
    enum CRSecondType SecondType;
    __declspec(property(get=GetPmString,put=PutPmString))
    _bstr_t PmString;
    __declspec(property(get=GetAmString,put=PutAmString))
    _bstr_t AmString;
    __declspec(property(get=GetMinuteSecondSeparator,put=PutMinuteSecondSeparator))
    _bstr_t MinuteSecondSeparator;
    __declspec(property(get=GetHourMinuteSeparator,put=PutHourMinuteSeparator))
    _bstr_t HourMinuteSeparator;
    __declspec(property(get=GetMaxNumberOfLines,put=PutMaxNumberOfLines))
    short MaxNumberOfLines;
    __declspec(property(get=GetPreviousValue))
    _variant_t PreviousValue;
    __declspec(property(get=GetNextValue))
    _variant_t NextValue;
    __declspec(property(get=GetHeight,put=PutHeight))
    long Height;
    __declspec(property(get=GetLeftLineStyle,put=PutLeftLineStyle))
    enum CRLineStyle LeftLineStyle;
    __declspec(property(get=GetRightLineStyle,put=PutRightLineStyle))
    enum CRLineStyle RightLineStyle;
    __declspec(property(get=GetTopLineStyle,put=PutTopLineStyle))
    enum CRLineStyle TopLineStyle;
    __declspec(property(get=GetBottomLineStyle,put=PutBottomLineStyle))
    enum CRLineStyle BottomLineStyle;
    __declspec(property(get=GetCssClass,put=PutCssClass))
    _bstr_t CssClass;
    __declspec(property(get=GetHyperlinkType,put=PutHyperlinkType))
    enum CRHyperlinkType HyperlinkType;
    __declspec(property(get=GetHyperlinkText,put=PutHyperlinkText))
    _bstr_t HyperlinkText;
    __declspec(property(get=GetConditionFormula,put=PutConditionFormula))
    _bstr_t ConditionFormula[];
    __declspec(property(get=GetDisplayReverseSign,put=PutDisplayReverseSign))
    VARIANT_BOOL DisplayReverseSign;
    __declspec(property(get=GetZeroValueString,put=PutZeroValueString))
    _bstr_t ZeroValueString;
    __declspec(property(get=GetCharacterSpacing,put=PutCharacterSpacing))
    long CharacterSpacing;
    __declspec(property(get=GetLineSpacing))
    double LineSpacing;
    __declspec(property(get=GetLineSpacingType))
    enum CRLineSpacingType LineSpacingType;
    __declspec(property(get=GetTextRotationAngle,put=PutTextRotationAngle))
    enum CRRotationAngle TextRotationAngle;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetFirstLineIndent,put=PutFirstLineIndent))
    long FirstLineIndent;
    __declspec(property(get=GetLeftIndent,put=PutLeftIndent))
    long LeftIndent;
    __declspec(property(get=GetRightIndent,put=PutRightIndent))
    long RightIndent;
    __declspec(property(get=GetTextFormat,put=PutTextFormat))
    enum CRTextFormat TextFormat;
    __declspec(property(get=GetParent))
    ISectionPtr Parent;
    __declspec(property(get=GetKind))
    enum CRObjectKind Kind;
    __declspec(property(get=GetLeft,put=PutLeft))
    long Left;
    __declspec(property(get=GetLeadingDayPosition,put=PutLeadingDayPosition))
    enum CRLeadingDayPosition LeadingDayPosition;
    __declspec(property(get=GetDateEraType,put=PutDateEraType))
    enum CRDateEraType DateEraType;
    __declspec(property(get=GetDateCalendarType,put=PutDateCalendarType))
    enum CRDateCalendarType DateCalendarType;
    __declspec(property(get=GetDatePrefixSeparator,put=PutDatePrefixSeparator))
    _bstr_t DatePrefixSeparator;
    __declspec(property(get=GetDateSuffixSeparator,put=PutDateSuffixSeparator))
    _bstr_t DateSuffixSeparator;
    __declspec(property(get=GetTop,put=PutTop))
    long Top;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetEnableTightHorizontal,put=PutEnableTightHorizontal))
    VARIANT_BOOL EnableTightHorizontal;
    __declspec(property(get=GetHasDropShadow,put=PutHasDropShadow))
    VARIANT_BOOL HasDropShadow;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    OLE_COLOR BackColor;
    __declspec(property(get=GetBorderColor,put=PutBorderColor))
    OLE_COLOR BorderColor;
    __declspec(property(get=GetSuppress,put=PutSuppress))
    VARIANT_BOOL Suppress;
    __declspec(property(get=GetCloseAtPageBreak,put=PutCloseAtPageBreak))
    VARIANT_BOOL CloseAtPageBreak;
    __declspec(property(get=GetKeepTogether,put=PutKeepTogether))
    VARIANT_BOOL KeepTogether;
    __declspec(property(get=GetTextColor,put=PutTextColor))
    OLE_COLOR TextColor;
    __declspec(property(get=GetField))
    IDispatchPtr Field;
    __declspec(property(get=GetHorAlignment,put=PutHorAlignment))
    enum CRAlignment HorAlignment;
    __declspec(property(get=GetValue))
    _variant_t Value;
    __declspec(property(get=GetCanGrow,put=PutCanGrow))
    VARIANT_BOOL CanGrow;
    __declspec(property(get=GetSuppressIfDuplicated,put=PutSuppressIfDuplicated))
    VARIANT_BOOL SuppressIfDuplicated;
    __declspec(property(get=GetSuppressIfZero,put=PutSuppressIfZero))
    VARIANT_BOOL SuppressIfZero;
    __declspec(property(get=GetUseSystemDefaults,put=PutUseSystemDefaults))
    VARIANT_BOOL UseSystemDefaults;
    __declspec(property(get=GetNegativeType,put=PutNegativeType))
    enum CRNegativeType NegativeType;
    __declspec(property(get=GetThousandsSeparators,put=PutThousandsSeparators))
    VARIANT_BOOL ThousandsSeparators;
    __declspec(property(get=GetUseLeadingZero,put=PutUseLeadingZero))
    VARIANT_BOOL UseLeadingZero;
    __declspec(property(get=GetDecimalPlaces,put=PutDecimalPlaces))
    short DecimalPlaces;
    __declspec(property(get=GetRoundingType,put=PutRoundingType))
    enum CRRoundingType RoundingType;
    __declspec(property(get=GetThousandSymbol,put=PutThousandSymbol))
    _bstr_t ThousandSymbol;
    __declspec(property(get=GetDecimalSymbol,put=PutDecimalSymbol))
    _bstr_t DecimalSymbol;
    __declspec(property(get=GetCurrencySymbolType,put=PutCurrencySymbolType))
    enum CRCurrencySymbolType CurrencySymbolType;
    __declspec(property(get=GetUseOneSymbolPerPage,put=PutUseOneSymbolPerPage))
    VARIANT_BOOL UseOneSymbolPerPage;
    __declspec(property(get=GetCurrencyPositionType,put=PutCurrencyPositionType))
    enum CRCurrencyPositionType CurrencyPositionType;
    __declspec(property(get=GetCurrencySymbol,put=PutCurrencySymbol))
    _bstr_t CurrencySymbol;
    __declspec(property(get=GetBooleanOutputType,put=PutBooleanOutputType))
    enum CRBooleanOutputType BooleanOutputType;
    __declspec(property(get=GetDateWindowsDefaultType,put=PutDateWindowsDefaultType))
    enum CRDateWindowsDefaultType DateWindowsDefaultType;
    __declspec(property(get=GetDateOrder,put=PutDateOrder))
    enum CRDateOrder DateOrder;
    __declspec(property(get=GetYearType,put=PutYearType))
    enum CRYearType YearType;
    __declspec(property(get=GetMonthType,put=PutMonthType))
    enum CRMonthType MonthType;
    __declspec(property(get=GetDayType,put=PutDayType))
    enum CRDayType DayType;
    __declspec(property(get=GetLeadingDayType,put=PutLeadingDayType))
    enum CRLeadingDayType LeadingDayType;
    __declspec(property(get=GetLeadingDaySeparator,put=PutLeadingDaySeparator))
    _bstr_t LeadingDaySeparator;
    __declspec(property(get=GetDateFirstSeparator,put=PutDateFirstSeparator))
    _bstr_t DateFirstSeparator;
    __declspec(property(get=GetDateSecondSeparator,put=PutDateSecondSeparator))
    _bstr_t DateSecondSeparator;
    __declspec(property(get=GetTimeBase,put=PutTimeBase))
    enum CRTimeBase TimeBase;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t ppName );
    enum CRObjectKind GetKind ( );
    long GetLeft ( );
    void PutLeft (
        long pLeft );
    long GetTop ( );
    void PutTop (
        long pTop );
    long GetWidth ( );
    void PutWidth (
        long pWidth );
    long GetHeight ( );
    void PutHeight (
        long pHeight );
    enum CRLineStyle GetLeftLineStyle ( );
    void PutLeftLineStyle (
        enum CRLineStyle pLeftLineStyle );
    enum CRLineStyle GetRightLineStyle ( );
    void PutRightLineStyle (
        enum CRLineStyle pRightLineStyle );
    enum CRLineStyle GetTopLineStyle ( );
    void PutTopLineStyle (
        enum CRLineStyle pTopLineStyle );
    enum CRLineStyle GetBottomLineStyle ( );
    void PutBottomLineStyle (
        enum CRLineStyle pBottomLineStyle );
    VARIANT_BOOL GetEnableTightHorizontal ( );
    void PutEnableTightHorizontal (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetHasDropShadow ( );
    void PutHasDropShadow (
        VARIANT_BOOL pBool );
    OLE_COLOR GetBackColor ( );
    void PutBackColor (
        OLE_COLOR pBackColor );
    OLE_COLOR GetBorderColor ( );
    void PutBorderColor (
        OLE_COLOR pBorderColor );
    ISectionPtr GetParent ( );
    VARIANT_BOOL GetSuppress ( );
    void PutSuppress (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetCloseAtPageBreak ( );
    void PutCloseAtPageBreak (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetKeepTogether ( );
    void PutKeepTogether (
        VARIANT_BOOL pBool );
    OLE_COLOR GetTextColor ( );
    void PutTextColor (
        OLE_COLOR pTextColor );
    IFontDisp * GetFont ( );
    void PutRefFont (
        IFontDisp * ppFont );
    IDispatchPtr GetField ( );
    enum CRAlignment GetHorAlignment ( );
    void PutHorAlignment (
        enum CRAlignment pHorAlignment );
    _variant_t GetValue ( );
    VARIANT_BOOL GetCanGrow ( );
    void PutCanGrow (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetSuppressIfDuplicated ( );
    void PutSuppressIfDuplicated (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetUseSystemDefaults ( );
    void PutUseSystemDefaults (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetSuppressIfZero ( );
    void PutSuppressIfZero (
        VARIANT_BOOL pBool );
    enum CRNegativeType GetNegativeType ( );
    void PutNegativeType (
        enum CRNegativeType pNegativeType );
    VARIANT_BOOL GetThousandsSeparators ( );
    void PutThousandsSeparators (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetUseLeadingZero ( );
    void PutUseLeadingZero (
        VARIANT_BOOL pBool );
    short GetDecimalPlaces ( );
    void PutDecimalPlaces (
        short pDecimalPlaces );
    enum CRRoundingType GetRoundingType ( );
    void PutRoundingType (
        enum CRRoundingType pRoundingType );
    _bstr_t GetThousandSymbol ( );
    void PutThousandSymbol (
        _bstr_t ppThousandSymbol );
    _bstr_t GetDecimalSymbol ( );
    void PutDecimalSymbol (
        _bstr_t ppDecimalSymbol );
    enum CRCurrencySymbolType GetCurrencySymbolType ( );
    void PutCurrencySymbolType (
        enum CRCurrencySymbolType pCurrencySymbolType );
    VARIANT_BOOL GetUseOneSymbolPerPage ( );
    void PutUseOneSymbolPerPage (
        VARIANT_BOOL pBool );
    enum CRCurrencyPositionType GetCurrencyPositionType ( );
    void PutCurrencyPositionType (
        enum CRCurrencyPositionType pCurrencyPositionType );
    _bstr_t GetCurrencySymbol ( );
    void PutCurrencySymbol (
        _bstr_t ppCurrencySymbol );
    enum CRBooleanOutputType GetBooleanOutputType ( );
    void PutBooleanOutputType (
        enum CRBooleanOutputType pBooleanOutputType );
    enum CRDateWindowsDefaultType GetDateWindowsDefaultType ( );
    void PutDateWindowsDefaultType (
        enum CRDateWindowsDefaultType pDateWindowsDefaultType );
    enum CRDateOrder GetDateOrder ( );
    void PutDateOrder (
        enum CRDateOrder pDateOrder );
    enum CRYearType GetYearType ( );
    void PutYearType (
        enum CRYearType pYearType );
    enum CRMonthType GetMonthType ( );
    void PutMonthType (
        enum CRMonthType pMonthType );
    enum CRDayType GetDayType ( );
    void PutDayType (
        enum CRDayType pDayType );
    enum CRLeadingDayType GetLeadingDayType ( );
    void PutLeadingDayType (
        enum CRLeadingDayType pLeadingDayType );
    _bstr_t GetLeadingDaySeparator ( );
    void PutLeadingDaySeparator (
        _bstr_t ppLeadingDaySeparator );
    _bstr_t GetDateFirstSeparator ( );
    void PutDateFirstSeparator (
        _bstr_t ppDateFirstSeparator );
    _bstr_t GetDateSecondSeparator ( );
    void PutDateSecondSeparator (
        _bstr_t ppDateSecondSeparator );
    enum CRTimeBase GetTimeBase ( );
    void PutTimeBase (
        enum CRTimeBase pTimeBase );
    enum CRAmPmType GetAmPmType ( );
    void PutAmPmType (
        enum CRAmPmType pAmPmType );
    enum CRHourType GetHourType ( );
    void PutHourType (
        enum CRHourType pHourType );
    enum CRMinuteType GetMinuteType ( );
    void PutMinuteType (
        enum CRMinuteType pMinuteType );
    enum CRSecondType GetSecondType ( );
    void PutSecondType (
        enum CRSecondType pSecondType );
    _bstr_t GetPmString ( );
    void PutPmString (
        _bstr_t ppPmString );
    _bstr_t GetAmString ( );
    void PutAmString (
        _bstr_t ppAmString );
    _bstr_t GetMinuteSecondSeparator ( );
    void PutMinuteSecondSeparator (
        _bstr_t ppMinuteSecondSeparator );
    _bstr_t GetHourMinuteSeparator ( );
    void PutHourMinuteSeparator (
        _bstr_t ppHourMinuteSeparator );
    short GetMaxNumberOfLines ( );
    void PutMaxNumberOfLines (
        short pMaxNumberOfLines );
    _variant_t GetPreviousValue ( );
    _variant_t GetNextValue ( );
    enum CRLeadingDayPosition GetLeadingDayPosition ( );
    void PutLeadingDayPosition (
        enum CRLeadingDayPosition pLeadingDayPosition );
    enum CRDateEraType GetDateEraType ( );
    void PutDateEraType (
        enum CRDateEraType pDateEraType );
    enum CRDateCalendarType GetDateCalendarType ( );
    void PutDateCalendarType (
        enum CRDateCalendarType pDateCalendarType );
    _bstr_t GetDatePrefixSeparator ( );
    void PutDatePrefixSeparator (
        _bstr_t ppDatePrefixSeparator );
    _bstr_t GetDateSuffixSeparator ( );
    void PutDateSuffixSeparator (
        _bstr_t ppDateSuffixSeparator );
    HRESULT SetUnboundFieldSource (
        _bstr_t pUnboundFieldSource );
    VARIANT_BOOL GetDisplayReverseSign ( );
    void PutDisplayReverseSign (
        VARIANT_BOOL pBool );
    _bstr_t GetZeroValueString ( );
    void PutZeroValueString (
        _bstr_t ppZeroValue );
    long GetCharacterSpacing ( );
    void PutCharacterSpacing (
        long pCharacterSpacing );
    double GetLineSpacing ( );
    enum CRLineSpacingType GetLineSpacingType ( );
    HRESULT SetLineSpacing (
        double LineSpacing,
        enum CRLineSpacingType LineSpacingType );
    enum CRRotationAngle GetTextRotationAngle ( );
    void PutTextRotationAngle (
        enum CRRotationAngle pRotationAngle );
    long GetFirstLineIndent ( );
    void PutFirstLineIndent (
        long pFirstLineIndent );
    long GetLeftIndent ( );
    void PutLeftIndent (
        long pLeftIndent );
    long GetRightIndent ( );
    void PutRightIndent (
        long pRightIndent );
    enum CRTextFormat GetTextFormat ( );
    void PutTextFormat (
        enum CRTextFormat pTextFormat );
    _bstr_t GetConditionFormula (
        const _variant_t & FormulaType );
    void PutConditionFormula (
        const _variant_t & FormulaType,
        _bstr_t pVal );
    _bstr_t GetCssClass ( );
    void PutCssClass (
        _bstr_t ppCssClass );
    enum CRHyperlinkType GetHyperlinkType ( );
    void PutHyperlinkType (
        enum CRHyperlinkType pType );
    _bstr_t GetHyperlinkText ( );
    void PutHyperlinkText (
        _bstr_t pText );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Name (
        BSTR * ppName ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR ppName ) = 0;
    virtual HRESULT __stdcall get_Kind (
        enum CRObjectKind * pObjectKind ) = 0;
    virtual HRESULT __stdcall get_Left (
        long * pLeft ) = 0;
    virtual HRESULT __stdcall put_Left (
        long pLeft ) = 0;
    virtual HRESULT __stdcall get_Top (
        long * pTop ) = 0;
    virtual HRESULT __stdcall put_Top (
        long pTop ) = 0;
    virtual HRESULT __stdcall get_Width (
        long * pWidth ) = 0;
    virtual HRESULT __stdcall put_Width (
        long pWidth ) = 0;
    virtual HRESULT __stdcall get_Height (
        long * pHeight ) = 0;
    virtual HRESULT __stdcall put_Height (
        long pHeight ) = 0;
    virtual HRESULT __stdcall get_LeftLineStyle (
        enum CRLineStyle * pLeftLineStyle ) = 0;
    virtual HRESULT __stdcall put_LeftLineStyle (
        enum CRLineStyle pLeftLineStyle ) = 0;
    virtual HRESULT __stdcall get_RightLineStyle (
        enum CRLineStyle * pRightLineStyle ) = 0;
    virtual HRESULT __stdcall put_RightLineStyle (
        enum CRLineStyle pRightLineStyle ) = 0;
    virtual HRESULT __stdcall get_TopLineStyle (
        enum CRLineStyle * pTopLineStyle ) = 0;
    virtual HRESULT __stdcall put_TopLineStyle (
        enum CRLineStyle pTopLineStyle ) = 0;
    virtual HRESULT __stdcall get_BottomLineStyle (
        enum CRLineStyle * pBottomLineStyle ) = 0;
    virtual HRESULT __stdcall put_BottomLineStyle (
        enum CRLineStyle pBottomLineStyle ) = 0;
    virtual HRESULT __stdcall get_EnableTightHorizontal (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_EnableTightHorizontal (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_HasDropShadow (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_HasDropShadow (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_BackColor (
        OLE_COLOR * pBackColor ) = 0;
    virtual HRESULT __stdcall put_BackColor (
        OLE_COLOR pBackColor ) = 0;
    virtual HRESULT __stdcall get_BorderColor (
        OLE_COLOR * pBorderColor ) = 0;
    virtual HRESULT __stdcall put_BorderColor (
        OLE_COLOR pBorderColor ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct ISection * * ppParent ) = 0;
    virtual HRESULT __stdcall get_Suppress (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_Suppress (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_CloseAtPageBreak (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_CloseAtPageBreak (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_KeepTogether (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_KeepTogether (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_TextColor (
        OLE_COLOR * pTextColor ) = 0;
    virtual HRESULT __stdcall put_TextColor (
        OLE_COLOR pTextColor ) = 0;
    virtual HRESULT __stdcall get_Font (
        IFontDisp * * ppFont ) = 0;
    virtual HRESULT __stdcall putref_Font (
        IFontDisp * ppFont ) = 0;
    virtual HRESULT __stdcall get_Field (
        IDispatch * * ppField ) = 0;
    virtual HRESULT __stdcall get_HorAlignment (
        enum CRAlignment * pHorAlignment ) = 0;
    virtual HRESULT __stdcall put_HorAlignment (
        enum CRAlignment pHorAlignment ) = 0;
    virtual HRESULT __stdcall get_Value (
        VARIANT * pValue ) = 0;
    virtual HRESULT __stdcall get_CanGrow (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_CanGrow (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_SuppressIfDuplicated (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_SuppressIfDuplicated (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_UseSystemDefaults (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_UseSystemDefaults (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_SuppressIfZero (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_SuppressIfZero (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_NegativeType (
        enum CRNegativeType * pNegativeType ) = 0;
    virtual HRESULT __stdcall put_NegativeType (
        enum CRNegativeType pNegativeType ) = 0;
    virtual HRESULT __stdcall get_ThousandsSeparators (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_ThousandsSeparators (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_UseLeadingZero (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_UseLeadingZero (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_DecimalPlaces (
        short * pDecimalPlaces ) = 0;
    virtual HRESULT __stdcall put_DecimalPlaces (
        short pDecimalPlaces ) = 0;
    virtual HRESULT __stdcall get_RoundingType (
        enum CRRoundingType * pRoundingType ) = 0;
    virtual HRESULT __stdcall put_RoundingType (
        enum CRRoundingType pRoundingType ) = 0;
    virtual HRESULT __stdcall get_ThousandSymbol (
        BSTR * ppThousandSymbol ) = 0;
    virtual HRESULT __stdcall put_ThousandSymbol (
        BSTR ppThousandSymbol ) = 0;
    virtual HRESULT __stdcall get_DecimalSymbol (
        BSTR * ppDecimalSymbol ) = 0;
    virtual HRESULT __stdcall put_DecimalSymbol (
        BSTR ppDecimalSymbol ) = 0;
    virtual HRESULT __stdcall get_CurrencySymbolType (
        enum CRCurrencySymbolType * pCurrencySymbolType ) = 0;
    virtual HRESULT __stdcall put_CurrencySymbolType (
        enum CRCurrencySymbolType pCurrencySymbolType ) = 0;
    virtual HRESULT __stdcall get_UseOneSymbolPerPage (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_UseOneSymbolPerPage (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_CurrencyPositionType (
        enum CRCurrencyPositionType * pCurrencyPositionType ) = 0;
    virtual HRESULT __stdcall put_CurrencyPositionType (
        enum CRCurrencyPositionType pCurrencyPositionType ) = 0;
    virtual HRESULT __stdcall get_CurrencySymbol (
        BSTR * ppCurrencySymbol ) = 0;
    virtual HRESULT __stdcall put_CurrencySymbol (
        BSTR ppCurrencySymbol ) = 0;
    virtual HRESULT __stdcall get_BooleanOutputType (
        enum CRBooleanOutputType * pBooleanOutputType ) = 0;
    virtual HRESULT __stdcall put_BooleanOutputType (
        enum CRBooleanOutputType pBooleanOutputType ) = 0;
    virtual HRESULT __stdcall get_DateWindowsDefaultType (
        enum CRDateWindowsDefaultType * pDateWindowsDefaultType ) = 0;
    virtual HRESULT __stdcall put_DateWindowsDefaultType (
        enum CRDateWindowsDefaultType pDateWindowsDefaultType ) = 0;
    virtual HRESULT __stdcall get_DateOrder (
        enum CRDateOrder * pDateOrder ) = 0;
    virtual HRESULT __stdcall put_DateOrder (
        enum CRDateOrder pDateOrder ) = 0;
    virtual HRESULT __stdcall get_YearType (
        enum CRYearType * pYearType ) = 0;
    virtual HRESULT __stdcall put_YearType (
        enum CRYearType pYearType ) = 0;
    virtual HRESULT __stdcall get_MonthType (
        enum CRMonthType * pMonthType ) = 0;
    virtual HRESULT __stdcall put_MonthType (
        enum CRMonthType pMonthType ) = 0;
    virtual HRESULT __stdcall get_DayType (
        enum CRDayType * pDayType ) = 0;
    virtual HRESULT __stdcall put_DayType (
        enum CRDayType pDayType ) = 0;
    virtual HRESULT __stdcall get_LeadingDayType (
        enum CRLeadingDayType * pLeadingDayType ) = 0;
    virtual HRESULT __stdcall put_LeadingDayType (
        enum CRLeadingDayType pLeadingDayType ) = 0;
    virtual HRESULT __stdcall get_LeadingDaySeparator (
        BSTR * ppLeadingDaySeparator ) = 0;
    virtual HRESULT __stdcall put_LeadingDaySeparator (
        BSTR ppLeadingDaySeparator ) = 0;
    virtual HRESULT __stdcall get_DateFirstSeparator (
        BSTR * ppDateFirstSeparator ) = 0;
    virtual HRESULT __stdcall put_DateFirstSeparator (
        BSTR ppDateFirstSeparator ) = 0;
    virtual HRESULT __stdcall get_DateSecondSeparator (
        BSTR * ppDateSecondSeparator ) = 0;
    virtual HRESULT __stdcall put_DateSecondSeparator (
        BSTR ppDateSecondSeparator ) = 0;
    virtual HRESULT __stdcall get_TimeBase (
        enum CRTimeBase * pTimeBase ) = 0;
    virtual HRESULT __stdcall put_TimeBase (
        enum CRTimeBase pTimeBase ) = 0;
    virtual HRESULT __stdcall get_AmPmType (
        enum CRAmPmType * pAmPmType ) = 0;
    virtual HRESULT __stdcall put_AmPmType (
        enum CRAmPmType pAmPmType ) = 0;
    virtual HRESULT __stdcall get_HourType (
        enum CRHourType * pHourType ) = 0;
    virtual HRESULT __stdcall put_HourType (
        enum CRHourType pHourType ) = 0;
    virtual HRESULT __stdcall get_MinuteType (
        enum CRMinuteType * pMinuteType ) = 0;
    virtual HRESULT __stdcall put_MinuteType (
        enum CRMinuteType pMinuteType ) = 0;
    virtual HRESULT __stdcall get_SecondType (
        enum CRSecondType * pSecondType ) = 0;
    virtual HRESULT __stdcall put_SecondType (
        enum CRSecondType pSecondType ) = 0;
    virtual HRESULT __stdcall get_PmString (
        BSTR * ppPmString ) = 0;
    virtual HRESULT __stdcall put_PmString (
        BSTR ppPmString ) = 0;
    virtual HRESULT __stdcall get_AmString (
        BSTR * ppAmString ) = 0;
    virtual HRESULT __stdcall put_AmString (
        BSTR ppAmString ) = 0;
    virtual HRESULT __stdcall get_MinuteSecondSeparator (
        BSTR * ppMinuteSecondSeparator ) = 0;
    virtual HRESULT __stdcall put_MinuteSecondSeparator (
        BSTR ppMinuteSecondSeparator ) = 0;
    virtual HRESULT __stdcall get_HourMinuteSeparator (
        BSTR * ppHourMinuteSeparator ) = 0;
    virtual HRESULT __stdcall put_HourMinuteSeparator (
        BSTR ppHourMinuteSeparator ) = 0;
    virtual HRESULT __stdcall get_MaxNumberOfLines (
        short * pMaxNumberOfLines ) = 0;
    virtual HRESULT __stdcall put_MaxNumberOfLines (
        short pMaxNumberOfLines ) = 0;
    virtual HRESULT __stdcall get_PreviousValue (
        VARIANT * pPreValue ) = 0;
    virtual HRESULT __stdcall get_NextValue (
        VARIANT * pNextValue ) = 0;
    virtual HRESULT __stdcall get_LeadingDayPosition (
        enum CRLeadingDayPosition * pLeadingDayPosition ) = 0;
    virtual HRESULT __stdcall put_LeadingDayPosition (
        enum CRLeadingDayPosition pLeadingDayPosition ) = 0;
    virtual HRESULT __stdcall get_DateEraType (
        enum CRDateEraType * pDateEraType ) = 0;
    virtual HRESULT __stdcall put_DateEraType (
        enum CRDateEraType pDateEraType ) = 0;
    virtual HRESULT __stdcall get_DateCalendarType (
        enum CRDateCalendarType * pDateCalendarType ) = 0;
    virtual HRESULT __stdcall put_DateCalendarType (
        enum CRDateCalendarType pDateCalendarType ) = 0;
    virtual HRESULT __stdcall get_DatePrefixSeparator (
        BSTR * ppDatePrefixSeparator ) = 0;
    virtual HRESULT __stdcall put_DatePrefixSeparator (
        BSTR ppDatePrefixSeparator ) = 0;
    virtual HRESULT __stdcall get_DateSuffixSeparator (
        BSTR * ppDateSuffixSeparator ) = 0;
    virtual HRESULT __stdcall put_DateSuffixSeparator (
        BSTR ppDateSuffixSeparator ) = 0;
    virtual HRESULT __stdcall raw_SetUnboundFieldSource (
        BSTR pUnboundFieldSource ) = 0;
    virtual HRESULT __stdcall get_DisplayReverseSign (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_DisplayReverseSign (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_ZeroValueString (
        BSTR * ppZeroValue ) = 0;
    virtual HRESULT __stdcall put_ZeroValueString (
        BSTR ppZeroValue ) = 0;
    virtual HRESULT __stdcall get_CharacterSpacing (
        long * pCharacterSpacing ) = 0;
    virtual HRESULT __stdcall put_CharacterSpacing (
        long pCharacterSpacing ) = 0;
    virtual HRESULT __stdcall get_LineSpacing (
        double * pLineSpacing ) = 0;
    virtual HRESULT __stdcall get_LineSpacingType (
        enum CRLineSpacingType * pLineSpacingType ) = 0;
    virtual HRESULT __stdcall raw_SetLineSpacing (
        double LineSpacing,
        enum CRLineSpacingType LineSpacingType ) = 0;
    virtual HRESULT __stdcall get_TextRotationAngle (
        enum CRRotationAngle * pRotationAngle ) = 0;
    virtual HRESULT __stdcall put_TextRotationAngle (
        enum CRRotationAngle pRotationAngle ) = 0;
    virtual HRESULT __stdcall get_FirstLineIndent (
        long * pFirstLineIndent ) = 0;
    virtual HRESULT __stdcall put_FirstLineIndent (
        long pFirstLineIndent ) = 0;
    virtual HRESULT __stdcall get_LeftIndent (
        long * pLeftIndent ) = 0;
    virtual HRESULT __stdcall put_LeftIndent (
        long pLeftIndent ) = 0;
    virtual HRESULT __stdcall get_RightIndent (
        long * pRightIndent ) = 0;
    virtual HRESULT __stdcall put_RightIndent (
        long pRightIndent ) = 0;
    virtual HRESULT __stdcall get_TextFormat (
        enum CRTextFormat * pTextFormat ) = 0;
    virtual HRESULT __stdcall put_TextFormat (
        enum CRTextFormat pTextFormat ) = 0;
    virtual HRESULT __stdcall get_ConditionFormula (
        VARIANT FormulaType,
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_ConditionFormula (
        VARIANT FormulaType,
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_CssClass (
        BSTR * ppCssClass ) = 0;
    virtual HRESULT __stdcall put_CssClass (
        BSTR ppCssClass ) = 0;
    virtual HRESULT __stdcall get_HyperlinkType (
        enum CRHyperlinkType * pType ) = 0;
    virtual HRESULT __stdcall put_HyperlinkType (
        enum CRHyperlinkType pType ) = 0;
    virtual HRESULT __stdcall get_HyperlinkText (
        BSTR * pText ) = 0;
    virtual HRESULT __stdcall put_HyperlinkText (
        BSTR pText ) = 0;
};

enum CRObjectKind
{
    crFieldObject = 1,
    crTextObject = 2,
    crLineObject = 3,
    crBoxObject = 4,
    crSubreportObject = 5,
    crOleObject = 6,
    crGraphObject = 7,
    crCrossTabObject = 8,
    crBlobFieldObject = 9,
    crMapObject = 10,
    crOlapGridObject = 11
};

enum CRLineStyle
{
    crLSNoLine = 0,
    crLSSingleLine = 1,
    crLSDoubleLine = 2,
    crLSDashLine = 3,
    crLSDotLine = 4
};

enum CRAlignment
{
    crDefaultAlign = 0,
    crLeftAlign = 1,
    crHorCenterAlign = 2,
    crRightAlign = 3,
    crJustified = 4
};

enum CRNegativeType
{
    crNotNegative = 0,
    crLeadingMinus = 1,
    crTrailingMinus = 2,
    crBracketed = 3
};

enum CRRoundingType
{
    crRoundToTenBillionth = 1,
    crRoundToBillionth = 2,
    crRoundToHundredMillionth = 3,
    crRoundToTenMillionth = 4,
    crRoundToMillionth = 5,
    crRoundToHundredThousandth = 6,
    crRoundToTenThousandth = 7,
    crRoundToThousandth = 8,
    crRoundToHundredth = 9,
    crRoundToTenth = 10,
    crRoundToUnit = 11,
    crRoundToTen = 12,
    crRoundToHundred = 13,
    crRoundToThousand = 14,
    crRoundToTenThousand = 15,
    crRoundToHundredThousand = 16,
    crRoundToMillion = 17
};

enum CRCurrencySymbolType
{
    crCSTNoSymbol = 0,
    crCSTFixedSymbol = 1,
    crCSTFloatingSymbol = 2
};

enum CRCurrencyPositionType
{
    crLeadingCurrencyInsideNegative = 0,
    crLeadingCurrencyOutsideNegative = 1,
    crTrailingCurrencyInsideNegative = 2,
    crTrailingCurrencyOutsideNegative = 3
};

enum CRBooleanOutputType
{
    crTrueOrFalse = 0,
    crTOrF = 1,
    crYesOrNo = 2,
    crYOrN = 3,
    crOneOrZero = 4
};

enum CRDateWindowsDefaultType
{
    crUseWindowsLongDate = 0,
    crUseWindowsShortDate = 1,
    crNotUsingWindowsDefaults = 2
};

enum CRDateOrder
{
    crYearMonthDay = 0,
    crDayMonthYear = 1,
    crMonthDayYear = 2
};

enum CRYearType
{
    crShortYear = 0,
    crLongYear = 1,
    crNoYear = 2
};

enum CRMonthType
{
    crNumericMonth = 0,
    crLeadingZeroNumericMonth = 1,
    crShortMonth = 2,
    crLongMonth = 3,
    crNoMonth = 4
};

enum CRDayType
{
    crNumericDay = 0,
    crLeadingZeroNumericDay = 1,
    crNoDay = 2
};

enum CRLeadingDayType
{
    crShortLeadingDay = 0,
    crLongLeadingDay = 1,
    crNoLeadingDay = 2
};

enum CRTimeBase
{
    cr12Hour = 0,
    cr24Hour = 1
};

enum CRAmPmType
{
    crAmPmBefore = 0,
    crAmPmAfter = 1
};

enum CRHourType
{
    crNumericHour = 0,
    crNumericHourNoLeadingZero = 1,
    crNoHour = 2
};

enum CRMinuteType
{
    crNumericMinute = 0,
    crNumericMinuteNoLeadingZero = 1,
    crNoMinute = 2
};

enum CRSecondType
{
    crNumericSecond = 0,
    crNumericSecondNoLeadingZero = 1,
    crNumericNoSecond = 2
};

enum CRLeadingDayPosition
{
    crLeadingDayOfWeek = 0,
    crTrailingDayOfWeek = 1
};

enum CRDateEraType
{
    crShortEra = 0,
    crLongEra = 1,
    crNoEra = 2
};

enum CRDateCalendarType
{
    crGregorianCalendar = 1,
    crGregorianUSCalendar = 2,
    crJapaneseCalendar = 3,
    crTaiwaneseCalendar = 4,
    crKoreanCalendar = 5,
    crHijriCalendar = 6,
    crThaiCalendar = 7,
    crHebrewCalendar = 8,
    crGregorianMEFrenchCalendar = 9,
    crGregorianArabicCalendar = 10,
    crGregorianXlitEnglishCalendar = 11,
    crGregorianXlitFrenchCalendar = 12
};

enum CRLineSpacingType
{
    crMultipleSpacing = 0,
    crExactSpacing = 1
};

enum CRRotationAngle
{
    crRotate0 = 0,
    crRotate90 = 1,
    crRotate270 = 2
};

enum CRTextFormat
{
    crStandardText = 0,
    crRTFText = 1,
    crHTMLText = 2
};

enum CRHyperlinkType
{
    crHyperlinkWebsite = 0,
    crHyperlinkEmail = 1,
    crHyperlinkHtml = 2,
    crHyperlinkCrystalReport = 3,
    crHyperlinkWebsiteFieldValue = 4,
    crHyperlinkEmailFieldValue = 5,
    crHyperlinkUndefined = 6,
    crHyperlinkDrilldown = 7,
    crHyperlinkReportObject = 8
};

struct __declspec(uuid("af37680c-6120-4e28-96dd-63fd2dc27b7a"))
ITextObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHorAlignment,put=PutHorAlignment))
    enum CRAlignment HorAlignment;
    __declspec(property(get=GetFieldElements))
    IFieldElementsPtr FieldElements;
    __declspec(property(get=GetCanGrow,put=PutCanGrow))
    VARIANT_BOOL CanGrow;
    __declspec(property(get=GetSuppressIfDuplicated,put=PutSuppressIfDuplicated))
    VARIANT_BOOL SuppressIfDuplicated;
    __declspec(property(get=GetHyperlinkType,put=PutHyperlinkType))
    enum CRHyperlinkType HyperlinkType;
    __declspec(property(get=GetHyperlinkText,put=PutHyperlinkText))
    _bstr_t HyperlinkText;
    __declspec(property(get=GetCssClass,put=PutCssClass))
    _bstr_t CssClass;
    __declspec(property(get=GetCharacterSpacing,put=PutCharacterSpacing))
    long CharacterSpacing;
    __declspec(property(get=GetLineSpacing))
    double LineSpacing;
    __declspec(property(get=GetLineSpacingType))
    enum CRLineSpacingType LineSpacingType;
    __declspec(property(get=GetTextRotationAngle,put=PutTextRotationAngle))
    enum CRRotationAngle TextRotationAngle;
    __declspec(property(get=GetFirstLineIndent,put=PutFirstLineIndent))
    long FirstLineIndent;
    __declspec(property(get=GetLeftIndent,put=PutLeftIndent))
    long LeftIndent;
    __declspec(property(get=GetRightIndent,put=PutRightIndent))
    long RightIndent;
    __declspec(property(get=GetMaxNumberOfLines,put=PutMaxNumberOfLines))
    short MaxNumberOfLines;
    __declspec(property(get=GetText))
    _bstr_t Text;
    __declspec(property(get=GetParent))
    ISectionPtr Parent;
    __declspec(property(get=GetKind))
    enum CRObjectKind Kind;
    __declspec(property(get=GetLeft,put=PutLeft))
    long Left;
    __declspec(property(get=GetTop,put=PutTop))
    long Top;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    long Height;
    __declspec(property(get=GetLeftLineStyle,put=PutLeftLineStyle))
    enum CRLineStyle LeftLineStyle;
    __declspec(property(get=GetRightLineStyle,put=PutRightLineStyle))
    enum CRLineStyle RightLineStyle;
    __declspec(property(get=GetTopLineStyle,put=PutTopLineStyle))
    enum CRLineStyle TopLineStyle;
    __declspec(property(get=GetBottomLineStyle,put=PutBottomLineStyle))
    enum CRLineStyle BottomLineStyle;
    __declspec(property(get=GetConditionFormula,put=PutConditionFormula))
    _bstr_t ConditionFormula[];
    __declspec(property(get=GetHasDropShadow,put=PutHasDropShadow))
    VARIANT_BOOL HasDropShadow;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    OLE_COLOR BackColor;
    __declspec(property(get=GetBorderColor,put=PutBorderColor))
    OLE_COLOR BorderColor;
    __declspec(property(get=GetSuppress,put=PutSuppress))
    VARIANT_BOOL Suppress;
    __declspec(property(get=GetCloseAtPageBreak,put=PutCloseAtPageBreak))
    VARIANT_BOOL CloseAtPageBreak;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetKeepTogether,put=PutKeepTogether))
    VARIANT_BOOL KeepTogether;
    __declspec(property(get=GetTextColor,put=PutTextColor))
    OLE_COLOR TextColor;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t ppName );
    enum CRObjectKind GetKind ( );
    long GetLeft ( );
    void PutLeft (
        long pLeft );
    long GetTop ( );
    void PutTop (
        long pTop );
    long GetWidth ( );
    void PutWidth (
        long pWidth );
    long GetHeight ( );
    void PutHeight (
        long pHeight );
    enum CRLineStyle GetLeftLineStyle ( );
    void PutLeftLineStyle (
        enum CRLineStyle pLeftLineStyle );
    enum CRLineStyle GetRightLineStyle ( );
    void PutRightLineStyle (
        enum CRLineStyle pRightLineStyle );
    enum CRLineStyle GetTopLineStyle ( );
    void PutTopLineStyle (
        enum CRLineStyle pTopLineStyle );
    enum CRLineStyle GetBottomLineStyle ( );
    void PutBottomLineStyle (
        enum CRLineStyle pBottomLineStyle );
    VARIANT_BOOL GetHasDropShadow ( );
    void PutHasDropShadow (
        VARIANT_BOOL pBool );
    OLE_COLOR GetBackColor ( );
    void PutBackColor (
        OLE_COLOR pBackColor );
    OLE_COLOR GetBorderColor ( );
    void PutBorderColor (
        OLE_COLOR pBorderColor );
    ISectionPtr GetParent ( );
    VARIANT_BOOL GetSuppress ( );
    void PutSuppress (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetCloseAtPageBreak ( );
    void PutCloseAtPageBreak (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetKeepTogether ( );
    void PutKeepTogether (
        VARIANT_BOOL pBool );
    OLE_COLOR GetTextColor ( );
    void PutTextColor (
        OLE_COLOR pTextColor );
    IFontDisp * GetFont ( );
    void PutRefFont (
        IFontDisp * ppFont );
    _bstr_t GetText ( );
    enum CRAlignment GetHorAlignment ( );
    void PutHorAlignment (
        enum CRAlignment pHorAlignment );
    VARIANT_BOOL GetSuppressIfDuplicated ( );
    void PutSuppressIfDuplicated (
        VARIANT_BOOL pBool );
    short GetMaxNumberOfLines ( );
    void PutMaxNumberOfLines (
        short pMaxNumberOfLines );
    VARIANT_BOOL GetCanGrow ( );
    void PutCanGrow (
        VARIANT_BOOL pBool );
    HRESULT SetText (
        _bstr_t pText );
    long GetCharacterSpacing ( );
    void PutCharacterSpacing (
        long pCharacterSpacing );
    double GetLineSpacing ( );
    enum CRLineSpacingType GetLineSpacingType ( );
    HRESULT SetLineSpacing (
        double LineSpacing,
        enum CRLineSpacingType LineSpacingType );
    enum CRRotationAngle GetTextRotationAngle ( );
    void PutTextRotationAngle (
        enum CRRotationAngle pRotationAngle );
    long GetFirstLineIndent ( );
    void PutFirstLineIndent (
        long pFirstLineIndent );
    long GetLeftIndent ( );
    void PutLeftIndent (
        long pLeftIndent );
    long GetRightIndent ( );
    void PutRightIndent (
        long pRightIndent );
    _bstr_t GetConditionFormula (
        const _variant_t & FormulaType );
    void PutConditionFormula (
        const _variant_t & FormulaType,
        _bstr_t pVal );
    IFieldElementsPtr GetFieldElements ( );
    _bstr_t GetCssClass ( );
    void PutCssClass (
        _bstr_t ppCssClass );
    enum CRHyperlinkType GetHyperlinkType ( );
    void PutHyperlinkType (
        enum CRHyperlinkType pType );
    _bstr_t GetHyperlinkText ( );
    void PutHyperlinkText (
        _bstr_t pText );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Name (
        BSTR * ppName ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR ppName ) = 0;
    virtual HRESULT __stdcall get_Kind (
        enum CRObjectKind * pObjectKind ) = 0;
    virtual HRESULT __stdcall get_Left (
        long * pLeft ) = 0;
    virtual HRESULT __stdcall put_Left (
        long pLeft ) = 0;
    virtual HRESULT __stdcall get_Top (
        long * pTop ) = 0;
    virtual HRESULT __stdcall put_Top (
        long pTop ) = 0;
    virtual HRESULT __stdcall get_Width (
        long * pWidth ) = 0;
    virtual HRESULT __stdcall put_Width (
        long pWidth ) = 0;
    virtual HRESULT __stdcall get_Height (
        long * pHeight ) = 0;
    virtual HRESULT __stdcall put_Height (
        long pHeight ) = 0;
    virtual HRESULT __stdcall get_LeftLineStyle (
        enum CRLineStyle * pLeftLineStyle ) = 0;
    virtual HRESULT __stdcall put_LeftLineStyle (
        enum CRLineStyle pLeftLineStyle ) = 0;
    virtual HRESULT __stdcall get_RightLineStyle (
        enum CRLineStyle * pRightLineStyle ) = 0;
    virtual HRESULT __stdcall put_RightLineStyle (
        enum CRLineStyle pRightLineStyle ) = 0;
    virtual HRESULT __stdcall get_TopLineStyle (
        enum CRLineStyle * pTopLineStyle ) = 0;
    virtual HRESULT __stdcall put_TopLineStyle (
        enum CRLineStyle pTopLineStyle ) = 0;
    virtual HRESULT __stdcall get_BottomLineStyle (
        enum CRLineStyle * pBottomLineStyle ) = 0;
    virtual HRESULT __stdcall put_BottomLineStyle (
        enum CRLineStyle pBottomLineStyle ) = 0;
    virtual HRESULT __stdcall get_HasDropShadow (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_HasDropShadow (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_BackColor (
        OLE_COLOR * pBackColor ) = 0;
    virtual HRESULT __stdcall put_BackColor (
        OLE_COLOR pBackColor ) = 0;
    virtual HRESULT __stdcall get_BorderColor (
        OLE_COLOR * pBorderColor ) = 0;
    virtual HRESULT __stdcall put_BorderColor (
        OLE_COLOR pBorderColor ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct ISection * * ppParent ) = 0;
    virtual HRESULT __stdcall get_Suppress (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_Suppress (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_CloseAtPageBreak (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_CloseAtPageBreak (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_KeepTogether (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_KeepTogether (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_TextColor (
        OLE_COLOR * pTextColor ) = 0;
    virtual HRESULT __stdcall put_TextColor (
        OLE_COLOR pTextColor ) = 0;
    virtual HRESULT __stdcall get_Font (
        IFontDisp * * ppFont ) = 0;
    virtual HRESULT __stdcall putref_Font (
        IFontDisp * ppFont ) = 0;
    virtual HRESULT __stdcall get_Text (
        BSTR * ppText ) = 0;
    virtual HRESULT __stdcall get_HorAlignment (
        enum CRAlignment * pHorAlignment ) = 0;
    virtual HRESULT __stdcall put_HorAlignment (
        enum CRAlignment pHorAlignment ) = 0;
    virtual HRESULT __stdcall get_SuppressIfDuplicated (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_SuppressIfDuplicated (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_MaxNumberOfLines (
        short * pMaxNumberOfLines ) = 0;
    virtual HRESULT __stdcall put_MaxNumberOfLines (
        short pMaxNumberOfLines ) = 0;
    virtual HRESULT __stdcall get_CanGrow (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_CanGrow (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall raw_SetText (
        BSTR pText ) = 0;
    virtual HRESULT __stdcall get_CharacterSpacing (
        long * pCharacterSpacing ) = 0;
    virtual HRESULT __stdcall put_CharacterSpacing (
        long pCharacterSpacing ) = 0;
    virtual HRESULT __stdcall get_LineSpacing (
        double * pLineSpacing ) = 0;
    virtual HRESULT __stdcall get_LineSpacingType (
        enum CRLineSpacingType * pLineSpacingType ) = 0;
    virtual HRESULT __stdcall raw_SetLineSpacing (
        double LineSpacing,
        enum CRLineSpacingType LineSpacingType ) = 0;
    virtual HRESULT __stdcall get_TextRotationAngle (
        enum CRRotationAngle * pRotationAngle ) = 0;
    virtual HRESULT __stdcall put_TextRotationAngle (
        enum CRRotationAngle pRotationAngle ) = 0;
    virtual HRESULT __stdcall get_FirstLineIndent (
        long * pFirstLineIndent ) = 0;
    virtual HRESULT __stdcall put_FirstLineIndent (
        long pFirstLineIndent ) = 0;
    virtual HRESULT __stdcall get_LeftIndent (
        long * pLeftIndent ) = 0;
    virtual HRESULT __stdcall put_LeftIndent (
        long pLeftIndent ) = 0;
    virtual HRESULT __stdcall get_RightIndent (
        long * pRightIndent ) = 0;
    virtual HRESULT __stdcall put_RightIndent (
        long pRightIndent ) = 0;
    virtual HRESULT __stdcall get_ConditionFormula (
        VARIANT FormulaType,
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_ConditionFormula (
        VARIANT FormulaType,
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_FieldElements (
        struct IFieldElements * * ppFieldElements ) = 0;
    virtual HRESULT __stdcall get_CssClass (
        BSTR * ppCssClass ) = 0;
    virtual HRESULT __stdcall put_CssClass (
        BSTR ppCssClass ) = 0;
    virtual HRESULT __stdcall get_HyperlinkType (
        enum CRHyperlinkType * pType ) = 0;
    virtual HRESULT __stdcall put_HyperlinkType (
        enum CRHyperlinkType pType ) = 0;
    virtual HRESULT __stdcall get_HyperlinkText (
        BSTR * pText ) = 0;
    virtual HRESULT __stdcall put_HyperlinkText (
        BSTR pText ) = 0;
};

struct __declspec(uuid("af37680b-6120-4e28-96dd-63fd2dc27b7a"))
IFieldElements : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IFieldElementPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    ITextObjectPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    IFieldElementPtr GetItem (
        long index );
    long GetCount ( );
    ITextObjectPtr GetParent ( );
    HRESULT Add (
        long position,
        const _variant_t & Field );
    HRESULT Delete (
        long index );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * ppNewEnum ) = 0;
    virtual HRESULT __stdcall get_Item (
        long index,
        struct IFieldElement * * ppFieldElement ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * pCount ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct ITextObject * * ppTextObject ) = 0;
    virtual HRESULT __stdcall raw_Add (
        long position,
        VARIANT Field ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        long index ) = 0;
};

struct __declspec(uuid("af37680a-6120-4e28-96dd-63fd2dc27b7a"))
IFieldElement : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBeginPosition))
    long BeginPosition;
    __declspec(property(get=GetEndPosition))
    long EndPosition;
    __declspec(property(get=GetSuppressIfDuplicated,put=PutSuppressIfDuplicated))
    VARIANT_BOOL SuppressIfDuplicated;
    __declspec(property(get=GetSuppressIfZero,put=PutSuppressIfZero))
    VARIANT_BOOL SuppressIfZero;
    __declspec(property(get=GetUseSystemDefaults,put=PutUseSystemDefaults))
    VARIANT_BOOL UseSystemDefaults;
    __declspec(property(get=GetNegativeType,put=PutNegativeType))
    enum CRNegativeType NegativeType;
    __declspec(property(get=GetThousandsSeparators,put=PutThousandsSeparators))
    VARIANT_BOOL ThousandsSeparators;
    __declspec(property(get=GetUseLeadingZero,put=PutUseLeadingZero))
    VARIANT_BOOL UseLeadingZero;
    __declspec(property(get=GetDecimalPlaces,put=PutDecimalPlaces))
    short DecimalPlaces;
    __declspec(property(get=GetRoundingType,put=PutRoundingType))
    enum CRRoundingType RoundingType;
    __declspec(property(get=GetThousandSymbol,put=PutThousandSymbol))
    _bstr_t ThousandSymbol;
    __declspec(property(get=GetDecimalSymbol,put=PutDecimalSymbol))
    _bstr_t DecimalSymbol;
    __declspec(property(get=GetCurrencySymbolType,put=PutCurrencySymbolType))
    enum CRCurrencySymbolType CurrencySymbolType;
    __declspec(property(get=GetUseOneSymbolPerPage,put=PutUseOneSymbolPerPage))
    VARIANT_BOOL UseOneSymbolPerPage;
    __declspec(property(get=GetCurrencyPositionType,put=PutCurrencyPositionType))
    enum CRCurrencyPositionType CurrencyPositionType;
    __declspec(property(get=GetCurrencySymbol,put=PutCurrencySymbol))
    _bstr_t CurrencySymbol;
    __declspec(property(get=GetBooleanOutputType,put=PutBooleanOutputType))
    enum CRBooleanOutputType BooleanOutputType;
    __declspec(property(get=GetDateWindowsDefaultType,put=PutDateWindowsDefaultType))
    enum CRDateWindowsDefaultType DateWindowsDefaultType;
    __declspec(property(get=GetDateOrder,put=PutDateOrder))
    enum CRDateOrder DateOrder;
    __declspec(property(get=GetYearType,put=PutYearType))
    enum CRYearType YearType;
    __declspec(property(get=GetMonthType,put=PutMonthType))
    enum CRMonthType MonthType;
    __declspec(property(get=GetDayType,put=PutDayType))
    enum CRDayType DayType;
    __declspec(property(get=GetLeadingDayType,put=PutLeadingDayType))
    enum CRLeadingDayType LeadingDayType;
    __declspec(property(get=GetLeadingDaySeparator,put=PutLeadingDaySeparator))
    _bstr_t LeadingDaySeparator;
    __declspec(property(get=GetDateFirstSeparator,put=PutDateFirstSeparator))
    _bstr_t DateFirstSeparator;
    __declspec(property(get=GetDateSecondSeparator,put=PutDateSecondSeparator))
    _bstr_t DateSecondSeparator;
    __declspec(property(get=GetTimeBase,put=PutTimeBase))
    enum CRTimeBase TimeBase;
    __declspec(property(get=GetAmPmType,put=PutAmPmType))
    enum CRAmPmType AmPmType;
    __declspec(property(get=GetHourType,put=PutHourType))
    enum CRHourType HourType;
    __declspec(property(get=GetMinuteType,put=PutMinuteType))
    enum CRMinuteType MinuteType;
    __declspec(property(get=GetSecondType,put=PutSecondType))
    enum CRSecondType SecondType;
    __declspec(property(get=GetPmString,put=PutPmString))
    _bstr_t PmString;
    __declspec(property(get=GetAmString,put=PutAmString))
    _bstr_t AmString;
    __declspec(property(get=GetMinuteSecondSeparator,put=PutMinuteSecondSeparator))
    _bstr_t MinuteSecondSeparator;
    __declspec(property(get=GetHourMinuteSeparator,put=PutHourMinuteSeparator))
    _bstr_t HourMinuteSeparator;
    __declspec(property(get=GetMaxNumberOfLines,put=PutMaxNumberOfLines))
    short MaxNumberOfLines;
    __declspec(property(get=GetDisplayReverseSign,put=PutDisplayReverseSign))
    VARIANT_BOOL DisplayReverseSign;
    __declspec(property(get=GetZeroValueString,put=PutZeroValueString))
    _bstr_t ZeroValueString;
    __declspec(property(get=GetCharacterSpacing,put=PutCharacterSpacing))
    long CharacterSpacing;
    __declspec(property(get=GetLineSpacing))
    double LineSpacing;
    __declspec(property(get=GetLineSpacingType))
    enum CRLineSpacingType LineSpacingType;
    __declspec(property(get=GetFirstLineIndent,put=PutFirstLineIndent))
    long FirstLineIndent;
    __declspec(property(get=GetLeftIndent,put=PutLeftIndent))
    long LeftIndent;
    __declspec(property(get=GetRightIndent,put=PutRightIndent))
    long RightIndent;
    __declspec(property(get=GetTextFormat,put=PutTextFormat))
    enum CRTextFormat TextFormat;
    __declspec(property(get=GetLeadingDayPosition,put=PutLeadingDayPosition))
    enum CRLeadingDayPosition LeadingDayPosition;
    __declspec(property(get=GetDateEraType,put=PutDateEraType))
    enum CRDateEraType DateEraType;
    __declspec(property(get=GetDateCalendarType,put=PutDateCalendarType))
    enum CRDateCalendarType DateCalendarType;
    __declspec(property(get=GetDatePrefixSeparator,put=PutDatePrefixSeparator))
    _bstr_t DatePrefixSeparator;
    __declspec(property(get=GetDateSuffixSeparator,put=PutDateSuffixSeparator))
    _bstr_t DateSuffixSeparator;
    __declspec(property(get=GetParent))
    ITextObjectPtr Parent;
    __declspec(property(get=GetConditionFormula,put=PutConditionFormula))
    _bstr_t ConditionFormula[];
    __declspec(property(get=GetColor,put=PutColor))
    OLE_COLOR Color;
    __declspec(property(get=GetFieldDefinition,put=PutFieldDefinition))
    IFieldDefinitionPtr FieldDefinition;

    //
    // Wrapper methods for error-handling
    //

    IFontDisp * GetFont ( );
    void PutRefFont (
        IFontDisp * ppFont );
    OLE_COLOR GetColor ( );
    void PutColor (
        OLE_COLOR pTextColor );
    IFieldDefinitionPtr GetFieldDefinition ( );
    void PutFieldDefinition (
        struct IFieldDefinition * ppFieldDefinition );
    ITextObjectPtr GetParent ( );
    VARIANT_BOOL GetSuppressIfDuplicated ( );
    void PutSuppressIfDuplicated (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetUseSystemDefaults ( );
    void PutUseSystemDefaults (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetSuppressIfZero ( );
    void PutSuppressIfZero (
        VARIANT_BOOL pBool );
    enum CRNegativeType GetNegativeType ( );
    void PutNegativeType (
        enum CRNegativeType pNegativeType );
    VARIANT_BOOL GetThousandsSeparators ( );
    void PutThousandsSeparators (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetUseLeadingZero ( );
    void PutUseLeadingZero (
        VARIANT_BOOL pBool );
    short GetDecimalPlaces ( );
    void PutDecimalPlaces (
        short pDecimalPlaces );
    enum CRRoundingType GetRoundingType ( );
    void PutRoundingType (
        enum CRRoundingType pRoundingType );
    _bstr_t GetThousandSymbol ( );
    void PutThousandSymbol (
        _bstr_t ppThousandSymbol );
    _bstr_t GetDecimalSymbol ( );
    void PutDecimalSymbol (
        _bstr_t ppDecimalSymbol );
    enum CRCurrencySymbolType GetCurrencySymbolType ( );
    void PutCurrencySymbolType (
        enum CRCurrencySymbolType pCurrencySymbolType );
    VARIANT_BOOL GetUseOneSymbolPerPage ( );
    void PutUseOneSymbolPerPage (
        VARIANT_BOOL pBool );
    enum CRCurrencyPositionType GetCurrencyPositionType ( );
    void PutCurrencyPositionType (
        enum CRCurrencyPositionType pCurrencyPositionType );
    _bstr_t GetCurrencySymbol ( );
    void PutCurrencySymbol (
        _bstr_t ppCurrencySymbol );
    enum CRBooleanOutputType GetBooleanOutputType ( );
    void PutBooleanOutputType (
        enum CRBooleanOutputType pBooleanOutputType );
    enum CRDateWindowsDefaultType GetDateWindowsDefaultType ( );
    void PutDateWindowsDefaultType (
        enum CRDateWindowsDefaultType pDateWindowsDefaultType );
    enum CRDateOrder GetDateOrder ( );
    void PutDateOrder (
        enum CRDateOrder pDateOrder );
    enum CRYearType GetYearType ( );
    void PutYearType (
        enum CRYearType pYearType );
    enum CRMonthType GetMonthType ( );
    void PutMonthType (
        enum CRMonthType pMonthType );
    enum CRDayType GetDayType ( );
    void PutDayType (
        enum CRDayType pDayType );
    enum CRLeadingDayType GetLeadingDayType ( );
    void PutLeadingDayType (
        enum CRLeadingDayType pLeadingDayType );
    _bstr_t GetLeadingDaySeparator ( );
    void PutLeadingDaySeparator (
        _bstr_t ppLeadingDaySeparator );
    _bstr_t GetDateFirstSeparator ( );
    void PutDateFirstSeparator (
        _bstr_t ppDateFirstSeparator );
    _bstr_t GetDateSecondSeparator ( );
    void PutDateSecondSeparator (
        _bstr_t ppDateSecondSeparator );
    enum CRTimeBase GetTimeBase ( );
    void PutTimeBase (
        enum CRTimeBase pTimeBase );
    enum CRAmPmType GetAmPmType ( );
    void PutAmPmType (
        enum CRAmPmType pAmPmType );
    enum CRHourType GetHourType ( );
    void PutHourType (
        enum CRHourType pHourType );
    enum CRMinuteType GetMinuteType ( );
    void PutMinuteType (
        enum CRMinuteType pMinuteType );
    enum CRSecondType GetSecondType ( );
    void PutSecondType (
        enum CRSecondType pSecondType );
    _bstr_t GetPmString ( );
    void PutPmString (
        _bstr_t ppPmString );
    _bstr_t GetAmString ( );
    void PutAmString (
        _bstr_t ppAmString );
    _bstr_t GetMinuteSecondSeparator ( );
    void PutMinuteSecondSeparator (
        _bstr_t ppMinuteSecondSeparator );
    _bstr_t GetHourMinuteSeparator ( );
    void PutHourMinuteSeparator (
        _bstr_t ppHourMinuteSeparator );
    short GetMaxNumberOfLines ( );
    void PutMaxNumberOfLines (
        short pMaxNumberOfLines );
    enum CRLeadingDayPosition GetLeadingDayPosition ( );
    void PutLeadingDayPosition (
        enum CRLeadingDayPosition pLeadingDayPosition );
    enum CRDateEraType GetDateEraType ( );
    void PutDateEraType (
        enum CRDateEraType pDateEraType );
    enum CRDateCalendarType GetDateCalendarType ( );
    void PutDateCalendarType (
        enum CRDateCalendarType pDateCalendarType );
    _bstr_t GetDatePrefixSeparator ( );
    void PutDatePrefixSeparator (
        _bstr_t ppDatePrefixSeparator );
    _bstr_t GetDateSuffixSeparator ( );
    void PutDateSuffixSeparator (
        _bstr_t ppDateSuffixSeparator );
    VARIANT_BOOL GetDisplayReverseSign ( );
    void PutDisplayReverseSign (
        VARIANT_BOOL pBool );
    _bstr_t GetZeroValueString ( );
    void PutZeroValueString (
        _bstr_t ppZeroValue );
    long GetCharacterSpacing ( );
    void PutCharacterSpacing (
        long pCharacterSpacing );
    double GetLineSpacing ( );
    enum CRLineSpacingType GetLineSpacingType ( );
    HRESULT SetLineSpacing (
        double LineSpacing,
        enum CRLineSpacingType LineSpacingType );
    long GetFirstLineIndent ( );
    void PutFirstLineIndent (
        long pFirstLineIndent );
    long GetLeftIndent ( );
    void PutLeftIndent (
        long pLeftIndent );
    long GetRightIndent ( );
    void PutRightIndent (
        long pRightIndent );
    enum CRTextFormat GetTextFormat ( );
    void PutTextFormat (
        enum CRTextFormat pTextFormat );
    _bstr_t GetConditionFormula (
        const _variant_t & FormulaType );
    void PutConditionFormula (
        const _variant_t & FormulaType,
        _bstr_t pVal );
    long GetBeginPosition ( );
    long GetEndPosition ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Font (
        IFontDisp * * ppFont ) = 0;
    virtual HRESULT __stdcall putref_Font (
        IFontDisp * ppFont ) = 0;
    virtual HRESULT __stdcall get_Color (
        OLE_COLOR * pTextColor ) = 0;
    virtual HRESULT __stdcall put_Color (
        OLE_COLOR pTextColor ) = 0;
    virtual HRESULT __stdcall get_FieldDefinition (
        struct IFieldDefinition * * ppFieldDefinition ) = 0;
    virtual HRESULT __stdcall put_FieldDefinition (
        struct IFieldDefinition * ppFieldDefinition ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct ITextObject * * ppTextObject ) = 0;
    virtual HRESULT __stdcall get_SuppressIfDuplicated (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_SuppressIfDuplicated (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_UseSystemDefaults (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_UseSystemDefaults (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_SuppressIfZero (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_SuppressIfZero (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_NegativeType (
        enum CRNegativeType * pNegativeType ) = 0;
    virtual HRESULT __stdcall put_NegativeType (
        enum CRNegativeType pNegativeType ) = 0;
    virtual HRESULT __stdcall get_ThousandsSeparators (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_ThousandsSeparators (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_UseLeadingZero (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_UseLeadingZero (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_DecimalPlaces (
        short * pDecimalPlaces ) = 0;
    virtual HRESULT __stdcall put_DecimalPlaces (
        short pDecimalPlaces ) = 0;
    virtual HRESULT __stdcall get_RoundingType (
        enum CRRoundingType * pRoundingType ) = 0;
    virtual HRESULT __stdcall put_RoundingType (
        enum CRRoundingType pRoundingType ) = 0;
    virtual HRESULT __stdcall get_ThousandSymbol (
        BSTR * ppThousandSymbol ) = 0;
    virtual HRESULT __stdcall put_ThousandSymbol (
        BSTR ppThousandSymbol ) = 0;
    virtual HRESULT __stdcall get_DecimalSymbol (
        BSTR * ppDecimalSymbol ) = 0;
    virtual HRESULT __stdcall put_DecimalSymbol (
        BSTR ppDecimalSymbol ) = 0;
    virtual HRESULT __stdcall get_CurrencySymbolType (
        enum CRCurrencySymbolType * pCurrencySymbolType ) = 0;
    virtual HRESULT __stdcall put_CurrencySymbolType (
        enum CRCurrencySymbolType pCurrencySymbolType ) = 0;
    virtual HRESULT __stdcall get_UseOneSymbolPerPage (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_UseOneSymbolPerPage (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_CurrencyPositionType (
        enum CRCurrencyPositionType * pCurrencyPositionType ) = 0;
    virtual HRESULT __stdcall put_CurrencyPositionType (
        enum CRCurrencyPositionType pCurrencyPositionType ) = 0;
    virtual HRESULT __stdcall get_CurrencySymbol (
        BSTR * ppCurrencySymbol ) = 0;
    virtual HRESULT __stdcall put_CurrencySymbol (
        BSTR ppCurrencySymbol ) = 0;
    virtual HRESULT __stdcall get_BooleanOutputType (
        enum CRBooleanOutputType * pBooleanOutputType ) = 0;
    virtual HRESULT __stdcall put_BooleanOutputType (
        enum CRBooleanOutputType pBooleanOutputType ) = 0;
    virtual HRESULT __stdcall get_DateWindowsDefaultType (
        enum CRDateWindowsDefaultType * pDateWindowsDefaultType ) = 0;
    virtual HRESULT __stdcall put_DateWindowsDefaultType (
        enum CRDateWindowsDefaultType pDateWindowsDefaultType ) = 0;
    virtual HRESULT __stdcall get_DateOrder (
        enum CRDateOrder * pDateOrder ) = 0;
    virtual HRESULT __stdcall put_DateOrder (
        enum CRDateOrder pDateOrder ) = 0;
    virtual HRESULT __stdcall get_YearType (
        enum CRYearType * pYearType ) = 0;
    virtual HRESULT __stdcall put_YearType (
        enum CRYearType pYearType ) = 0;
    virtual HRESULT __stdcall get_MonthType (
        enum CRMonthType * pMonthType ) = 0;
    virtual HRESULT __stdcall put_MonthType (
        enum CRMonthType pMonthType ) = 0;
    virtual HRESULT __stdcall get_DayType (
        enum CRDayType * pDayType ) = 0;
    virtual HRESULT __stdcall put_DayType (
        enum CRDayType pDayType ) = 0;
    virtual HRESULT __stdcall get_LeadingDayType (
        enum CRLeadingDayType * pLeadingDayType ) = 0;
    virtual HRESULT __stdcall put_LeadingDayType (
        enum CRLeadingDayType pLeadingDayType ) = 0;
    virtual HRESULT __stdcall get_LeadingDaySeparator (
        BSTR * ppLeadingDaySeparator ) = 0;
    virtual HRESULT __stdcall put_LeadingDaySeparator (
        BSTR ppLeadingDaySeparator ) = 0;
    virtual HRESULT __stdcall get_DateFirstSeparator (
        BSTR * ppDateFirstSeparator ) = 0;
    virtual HRESULT __stdcall put_DateFirstSeparator (
        BSTR ppDateFirstSeparator ) = 0;
    virtual HRESULT __stdcall get_DateSecondSeparator (
        BSTR * ppDateSecondSeparator ) = 0;
    virtual HRESULT __stdcall put_DateSecondSeparator (
        BSTR ppDateSecondSeparator ) = 0;
    virtual HRESULT __stdcall get_TimeBase (
        enum CRTimeBase * pTimeBase ) = 0;
    virtual HRESULT __stdcall put_TimeBase (
        enum CRTimeBase pTimeBase ) = 0;
    virtual HRESULT __stdcall get_AmPmType (
        enum CRAmPmType * pAmPmType ) = 0;
    virtual HRESULT __stdcall put_AmPmType (
        enum CRAmPmType pAmPmType ) = 0;
    virtual HRESULT __stdcall get_HourType (
        enum CRHourType * pHourType ) = 0;
    virtual HRESULT __stdcall put_HourType (
        enum CRHourType pHourType ) = 0;
    virtual HRESULT __stdcall get_MinuteType (
        enum CRMinuteType * pMinuteType ) = 0;
    virtual HRESULT __stdcall put_MinuteType (
        enum CRMinuteType pMinuteType ) = 0;
    virtual HRESULT __stdcall get_SecondType (
        enum CRSecondType * pSecondType ) = 0;
    virtual HRESULT __stdcall put_SecondType (
        enum CRSecondType pSecondType ) = 0;
    virtual HRESULT __stdcall get_PmString (
        BSTR * ppPmString ) = 0;
    virtual HRESULT __stdcall put_PmString (
        BSTR ppPmString ) = 0;
    virtual HRESULT __stdcall get_AmString (
        BSTR * ppAmString ) = 0;
    virtual HRESULT __stdcall put_AmString (
        BSTR ppAmString ) = 0;
    virtual HRESULT __stdcall get_MinuteSecondSeparator (
        BSTR * ppMinuteSecondSeparator ) = 0;
    virtual HRESULT __stdcall put_MinuteSecondSeparator (
        BSTR ppMinuteSecondSeparator ) = 0;
    virtual HRESULT __stdcall get_HourMinuteSeparator (
        BSTR * ppHourMinuteSeparator ) = 0;
    virtual HRESULT __stdcall put_HourMinuteSeparator (
        BSTR ppHourMinuteSeparator ) = 0;
    virtual HRESULT __stdcall get_MaxNumberOfLines (
        short * pMaxNumberOfLines ) = 0;
    virtual HRESULT __stdcall put_MaxNumberOfLines (
        short pMaxNumberOfLines ) = 0;
    virtual HRESULT __stdcall get_LeadingDayPosition (
        enum CRLeadingDayPosition * pLeadingDayPosition ) = 0;
    virtual HRESULT __stdcall put_LeadingDayPosition (
        enum CRLeadingDayPosition pLeadingDayPosition ) = 0;
    virtual HRESULT __stdcall get_DateEraType (
        enum CRDateEraType * pDateEraType ) = 0;
    virtual HRESULT __stdcall put_DateEraType (
        enum CRDateEraType pDateEraType ) = 0;
    virtual HRESULT __stdcall get_DateCalendarType (
        enum CRDateCalendarType * pDateCalendarType ) = 0;
    virtual HRESULT __stdcall put_DateCalendarType (
        enum CRDateCalendarType pDateCalendarType ) = 0;
    virtual HRESULT __stdcall get_DatePrefixSeparator (
        BSTR * ppDatePrefixSeparator ) = 0;
    virtual HRESULT __stdcall put_DatePrefixSeparator (
        BSTR ppDatePrefixSeparator ) = 0;
    virtual HRESULT __stdcall get_DateSuffixSeparator (
        BSTR * ppDateSuffixSeparator ) = 0;
    virtual HRESULT __stdcall put_DateSuffixSeparator (
        BSTR ppDateSuffixSeparator ) = 0;
    virtual HRESULT __stdcall get_DisplayReverseSign (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_DisplayReverseSign (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_ZeroValueString (
        BSTR * ppZeroValue ) = 0;
    virtual HRESULT __stdcall put_ZeroValueString (
        BSTR ppZeroValue ) = 0;
    virtual HRESULT __stdcall get_CharacterSpacing (
        long * pCharacterSpacing ) = 0;
    virtual HRESULT __stdcall put_CharacterSpacing (
        long pCharacterSpacing ) = 0;
    virtual HRESULT __stdcall get_LineSpacing (
        double * pLineSpacing ) = 0;
    virtual HRESULT __stdcall get_LineSpacingType (
        enum CRLineSpacingType * pLineSpacingType ) = 0;
    virtual HRESULT __stdcall raw_SetLineSpacing (
        double LineSpacing,
        enum CRLineSpacingType LineSpacingType ) = 0;
    virtual HRESULT __stdcall get_FirstLineIndent (
        long * pFirstLineIndent ) = 0;
    virtual HRESULT __stdcall put_FirstLineIndent (
        long pFirstLineIndent ) = 0;
    virtual HRESULT __stdcall get_LeftIndent (
        long * pLeftIndent ) = 0;
    virtual HRESULT __stdcall put_LeftIndent (
        long pLeftIndent ) = 0;
    virtual HRESULT __stdcall get_RightIndent (
        long * pRightIndent ) = 0;
    virtual HRESULT __stdcall put_RightIndent (
        long pRightIndent ) = 0;
    virtual HRESULT __stdcall get_TextFormat (
        enum CRTextFormat * pTextFormat ) = 0;
    virtual HRESULT __stdcall put_TextFormat (
        enum CRTextFormat pTextFormat ) = 0;
    virtual HRESULT __stdcall get_ConditionFormula (
        VARIANT FormulaType,
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_ConditionFormula (
        VARIANT FormulaType,
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_BeginPosition (
        long * pPosition ) = 0;
    virtual HRESULT __stdcall get_EndPosition (
        long * pPosition ) = 0;
};

struct __declspec(uuid("af37680d-6120-4e28-96dd-63fd2dc27b7a"))
IFieldDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetUseCount))
    long UseCount;
    __declspec(property(get=GetValueType))
    CRFieldValueType ValueType;
    __declspec(property(get=GetNumberOfBytes))
    short NumberOfBytes;
    __declspec(property(get=GetParent))
    IReportPtr Parent;
    __declspec(property(get=GetKind))
    enum CRFieldKind Kind;
    __declspec(property(get=GetPreviousValue))
    _variant_t PreviousValue;
    __declspec(property(get=GetNextValue))
    _variant_t NextValue;
    __declspec(property(get=GetValue))
    _variant_t Value;

    //
    // Wrapper methods for error-handling
    //

    enum CRFieldKind GetKind ( );
    CRFieldValueType GetValueType ( );
    short GetNumberOfBytes ( );
    _bstr_t GetName ( );
    _variant_t GetValue ( );
    IReportPtr GetParent ( );
    _variant_t GetPreviousValue ( );
    _variant_t GetNextValue ( );
    long GetUseCount ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Kind (
        enum CRFieldKind * pKind ) = 0;
    virtual HRESULT __stdcall get_ValueType (
        CRFieldValueType * pValueType ) = 0;
    virtual HRESULT __stdcall get_NumberOfBytes (
        short * pNumberOfBytes ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * pName ) = 0;
    virtual HRESULT __stdcall get_Value (
        VARIANT * pValue ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct IReport * * ppParent ) = 0;
    virtual HRESULT __stdcall get_PreviousValue (
        VARIANT * pPreValue ) = 0;
    virtual HRESULT __stdcall get_NextValue (
        VARIANT * pNextValue ) = 0;
    virtual HRESULT __stdcall get_UseCount (
        long * pCount ) = 0;
};

enum CRFieldKind
{
    crDatabaseField = 1,
    crFormulaField = 2,
    crSummaryField = 3,
    crSpecialVarField = 4,
    crGroupNameField = 5,
    crParameterField = 6,
    crRunningTotalField = 7,
    crSQLExpressionField = 8
};

enum __MIDL___MIDL_itf_crvb60r_0232_0001
{
    crInt8sField = 1,
    crInt8uField = 2,
    crInt16sField = 3,
    crInt16uField = 4,
    crInt32sField = 5,
    crInt32uField = 6,
    crNumberField = 7,
    crCurrencyField = 8,
    crBooleanField = 9,
    crDateField = 10,
    crTimeField = 11,
    crStringField = 12,
    crTransientMemoField = 13,
    crPersistentMemoField = 14,
    crBlobField = 15,
    crDateTimeField = 16,
    crBitmapField = 17,
    crIconField = 18,
    crPictureField = 19,
    crOleField = 20,
    crChartField = 21,
    crUnknownField = 22
};

struct __declspec(uuid("af376827-6120-4e28-96dd-63fd2dc27b7a"))
IBlobFieldObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetParent))
    ISectionPtr Parent;
    __declspec(property(get=GetKind))
    enum CRObjectKind Kind;
    __declspec(property(get=GetLeft,put=PutLeft))
    long Left;
    __declspec(property(get=GetTop,put=PutTop))
    long Top;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    long Height;
    __declspec(property(get=GetLeftLineStyle,put=PutLeftLineStyle))
    enum CRLineStyle LeftLineStyle;
    __declspec(property(get=GetRightLineStyle,put=PutRightLineStyle))
    enum CRLineStyle RightLineStyle;
    __declspec(property(get=GetTopLineStyle,put=PutTopLineStyle))
    enum CRLineStyle TopLineStyle;
    __declspec(property(get=GetBottomLineStyle,put=PutBottomLineStyle))
    enum CRLineStyle BottomLineStyle;
    __declspec(property(get=GetLeftCropping,put=PutLeftCropping))
    long LeftCropping;
    __declspec(property(get=GetHasDropShadow,put=PutHasDropShadow))
    VARIANT_BOOL HasDropShadow;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    OLE_COLOR BackColor;
    __declspec(property(get=GetBorderColor,put=PutBorderColor))
    OLE_COLOR BorderColor;
    __declspec(property(get=GetSuppress,put=PutSuppress))
    VARIANT_BOOL Suppress;
    __declspec(property(get=GetCloseAtPageBreak,put=PutCloseAtPageBreak))
    VARIANT_BOOL CloseAtPageBreak;
    __declspec(property(get=GetKeepTogether,put=PutKeepTogether))
    VARIANT_BOOL KeepTogether;
    __declspec(property(get=GetRightCropping,put=PutRightCropping))
    long RightCropping;
    __declspec(property(get=GetTopCropping,put=PutTopCropping))
    long TopCropping;
    __declspec(property(get=GetBottomCropping,put=PutBottomCropping))
    long BottomCropping;
    __declspec(property(get=GetXScaling,put=PutXScaling))
    double XScaling;
    __declspec(property(get=GetYScaling,put=PutYScaling))
    double YScaling;
    __declspec(property(get=GetField))
    IDatabaseFieldDefinitionPtr Field;
    __declspec(property(get=GetConditionFormula,put=PutConditionFormula))
    _bstr_t ConditionFormula[];
    __declspec(property(get=GetCssClass,put=PutCssClass))
    _bstr_t CssClass;
    __declspec(property(get=GetHyperlinkType,put=PutHyperlinkType))
    enum CRHyperlinkType HyperlinkType;
    __declspec(property(get=GetHyperlinkText,put=PutHyperlinkText))
    _bstr_t HyperlinkText;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t ppName );
    enum CRObjectKind GetKind ( );
    long GetLeft ( );
    void PutLeft (
        long pLeft );
    long GetTop ( );
    void PutTop (
        long pTop );
    long GetWidth ( );
    void PutWidth (
        long pWidth );
    long GetHeight ( );
    void PutHeight (
        long pHeight );
    enum CRLineStyle GetLeftLineStyle ( );
    void PutLeftLineStyle (
        enum CRLineStyle pLeftLineStyle );
    enum CRLineStyle GetRightLineStyle ( );
    void PutRightLineStyle (
        enum CRLineStyle pRightLineStyle );
    enum CRLineStyle GetTopLineStyle ( );
    void PutTopLineStyle (
        enum CRLineStyle pTopLineStyle );
    enum CRLineStyle GetBottomLineStyle ( );
    void PutBottomLineStyle (
        enum CRLineStyle pBottomLineStyle );
    VARIANT_BOOL GetHasDropShadow ( );
    void PutHasDropShadow (
        VARIANT_BOOL pBool );
    OLE_COLOR GetBackColor ( );
    void PutBackColor (
        OLE_COLOR pBackColor );
    OLE_COLOR GetBorderColor ( );
    void PutBorderColor (
        OLE_COLOR pBorderColor );
    ISectionPtr GetParent ( );
    VARIANT_BOOL GetSuppress ( );
    void PutSuppress (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetCloseAtPageBreak ( );
    void PutCloseAtPageBreak (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetKeepTogether ( );
    void PutKeepTogether (
        VARIANT_BOOL pBool );
    long GetLeftCropping ( );
    void PutLeftCropping (
        long pLeftCropping );
    long GetRightCropping ( );
    void PutRightCropping (
        long pRightCropping );
    long GetTopCropping ( );
    void PutTopCropping (
        long pTopCropping );
    long GetBottomCropping ( );
    void PutBottomCropping (
        long pBottomCropping );
    double GetXScaling ( );
    void PutXScaling (
        double pXScaling );
    double GetYScaling ( );
    void PutYScaling (
        double pYScaling );
    IDatabaseFieldDefinitionPtr GetField ( );
    _bstr_t GetConditionFormula (
        const _variant_t & FormulaType );
    void PutConditionFormula (
        const _variant_t & FormulaType,
        _bstr_t pVal );
    _bstr_t GetCssClass ( );
    void PutCssClass (
        _bstr_t ppCssClass );
    enum CRHyperlinkType GetHyperlinkType ( );
    void PutHyperlinkType (
        enum CRHyperlinkType pType );
    _bstr_t GetHyperlinkText ( );
    void PutHyperlinkText (
        _bstr_t pText );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Name (
        BSTR * ppName ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR ppName ) = 0;
    virtual HRESULT __stdcall get_Kind (
        enum CRObjectKind * pObjectKind ) = 0;
    virtual HRESULT __stdcall get_Left (
        long * pLeft ) = 0;
    virtual HRESULT __stdcall put_Left (
        long pLeft ) = 0;
    virtual HRESULT __stdcall get_Top (
        long * pTop ) = 0;
    virtual HRESULT __stdcall put_Top (
        long pTop ) = 0;
    virtual HRESULT __stdcall get_Width (
        long * pWidth ) = 0;
    virtual HRESULT __stdcall put_Width (
        long pWidth ) = 0;
    virtual HRESULT __stdcall get_Height (
        long * pHeight ) = 0;
    virtual HRESULT __stdcall put_Height (
        long pHeight ) = 0;
    virtual HRESULT __stdcall get_LeftLineStyle (
        enum CRLineStyle * pLeftLineStyle ) = 0;
    virtual HRESULT __stdcall put_LeftLineStyle (
        enum CRLineStyle pLeftLineStyle ) = 0;
    virtual HRESULT __stdcall get_RightLineStyle (
        enum CRLineStyle * pRightLineStyle ) = 0;
    virtual HRESULT __stdcall put_RightLineStyle (
        enum CRLineStyle pRightLineStyle ) = 0;
    virtual HRESULT __stdcall get_TopLineStyle (
        enum CRLineStyle * pTopLineStyle ) = 0;
    virtual HRESULT __stdcall put_TopLineStyle (
        enum CRLineStyle pTopLineStyle ) = 0;
    virtual HRESULT __stdcall get_BottomLineStyle (
        enum CRLineStyle * pBottomLineStyle ) = 0;
    virtual HRESULT __stdcall put_BottomLineStyle (
        enum CRLineStyle pBottomLineStyle ) = 0;
    virtual HRESULT __stdcall get_HasDropShadow (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_HasDropShadow (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_BackColor (
        OLE_COLOR * pBackColor ) = 0;
    virtual HRESULT __stdcall put_BackColor (
        OLE_COLOR pBackColor ) = 0;
    virtual HRESULT __stdcall get_BorderColor (
        OLE_COLOR * pBorderColor ) = 0;
    virtual HRESULT __stdcall put_BorderColor (
        OLE_COLOR pBorderColor ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct ISection * * ppParent ) = 0;
    virtual HRESULT __stdcall get_Suppress (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_Suppress (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_CloseAtPageBreak (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_CloseAtPageBreak (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_KeepTogether (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_KeepTogether (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_LeftCropping (
        long * pLeftCropping ) = 0;
    virtual HRESULT __stdcall put_LeftCropping (
        long pLeftCropping ) = 0;
    virtual HRESULT __stdcall get_RightCropping (
        long * pRightCropping ) = 0;
    virtual HRESULT __stdcall put_RightCropping (
        long pRightCropping ) = 0;
    virtual HRESULT __stdcall get_TopCropping (
        long * pTopCropping ) = 0;
    virtual HRESULT __stdcall put_TopCropping (
        long pTopCropping ) = 0;
    virtual HRESULT __stdcall get_BottomCropping (
        long * pBottomCropping ) = 0;
    virtual HRESULT __stdcall put_BottomCropping (
        long pBottomCropping ) = 0;
    virtual HRESULT __stdcall get_XScaling (
        double * pXScaling ) = 0;
    virtual HRESULT __stdcall put_XScaling (
        double pXScaling ) = 0;
    virtual HRESULT __stdcall get_YScaling (
        double * pYScaling ) = 0;
    virtual HRESULT __stdcall put_YScaling (
        double pYScaling ) = 0;
    virtual HRESULT __stdcall get_Field (
        struct IDatabaseFieldDefinition * * ppDatabaseFieldDefinition ) = 0;
    virtual HRESULT __stdcall get_ConditionFormula (
        VARIANT FormulaType,
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_ConditionFormula (
        VARIANT FormulaType,
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_CssClass (
        BSTR * ppCssClass ) = 0;
    virtual HRESULT __stdcall put_CssClass (
        BSTR ppCssClass ) = 0;
    virtual HRESULT __stdcall get_HyperlinkType (
        enum CRHyperlinkType * pType ) = 0;
    virtual HRESULT __stdcall put_HyperlinkType (
        enum CRHyperlinkType pType ) = 0;
    virtual HRESULT __stdcall get_HyperlinkText (
        BSTR * pText ) = 0;
    virtual HRESULT __stdcall put_HyperlinkText (
        BSTR pText ) = 0;
};

struct __declspec(uuid("af37680e-6120-4e28-96dd-63fd2dc27b7a"))
IDatabaseFieldDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetValueType))
    CRFieldValueType ValueType;
    __declspec(property(get=GetNumberOfBytes))
    short NumberOfBytes;
    __declspec(property(get=GetParent))
    IReportPtr Parent;
    __declspec(property(get=GetKind))
    enum CRFieldKind Kind;
    __declspec(property(get=GetDatabaseFieldName))
    _bstr_t DatabaseFieldName;
    __declspec(property(get=GetPreviousValue))
    _variant_t PreviousValue;
    __declspec(property(get=GetNextValue))
    _variant_t NextValue;
    __declspec(property(get=GetDatabaseFieldDisplayName))
    _bstr_t DatabaseFieldDisplayName;
    __declspec(property(get=GetValue))
    _variant_t Value;
    __declspec(property(get=GetTableAliasName))
    _bstr_t TableAliasName;

    //
    // Wrapper methods for error-handling
    //

    enum CRFieldKind GetKind ( );
    CRFieldValueType GetValueType ( );
    short GetNumberOfBytes ( );
    _bstr_t GetName ( );
    _variant_t GetValue ( );
    _bstr_t GetDatabaseFieldName ( );
    IReportPtr GetParent ( );
    _variant_t GetPreviousValue ( );
    _variant_t GetNextValue ( );
    _bstr_t GetTableAliasName ( );
    _bstr_t GetDatabaseFieldDisplayName ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Kind (
        enum CRFieldKind * pKind ) = 0;
    virtual HRESULT __stdcall get_ValueType (
        CRFieldValueType * pValueType ) = 0;
    virtual HRESULT __stdcall get_NumberOfBytes (
        short * pNumberOfBytes ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * pName ) = 0;
    virtual HRESULT __stdcall get_Value (
        VARIANT * pValue ) = 0;
    virtual HRESULT __stdcall get_DatabaseFieldName (
        BSTR * ppDatabaseFieldName ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct IReport * * ppParent ) = 0;
    virtual HRESULT __stdcall get_PreviousValue (
        VARIANT * pPreValue ) = 0;
    virtual HRESULT __stdcall get_NextValue (
        VARIANT * pNextValue ) = 0;
    virtual HRESULT __stdcall get_TableAliasName (
        BSTR * ppTableAliasName ) = 0;
    virtual HRESULT __stdcall get_DatabaseFieldDisplayName (
        BSTR * ppDatabaseFieldDisplayName ) = 0;
};

enum CRSpecialVarType
{
    crSVTPrintDate = 0,
    crSVTPrintTime = 1,
    crSVTModificationDate = 2,
    crSVTModificationTime = 3,
    crSVTDataDate = 4,
    crSVTDataTime = 5,
    crSVTRecordNumber = 6,
    crSVTPageNumber = 7,
    crSVTGroupNumber = 8,
    crSVTTotalPageCount = 9,
    crSVTReportTitle = 10,
    crSVTReportComments = 11,
    crSVTRecordSelection = 12,
    crSVTGroupSelection = 13,
    crSVTFilename = 14,
    crSVTFileAuthor = 15,
    crSVTFileCreationDate = 16,
    crSVTPageNofM = 17
};

struct __declspec(uuid("af376810-6120-4e28-96dd-63fd2dc27b7a"))
ISubreportObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetParent))
    ISectionPtr Parent;
    __declspec(property(get=GetKind))
    enum CRObjectKind Kind;
    __declspec(property(get=GetLeft,put=PutLeft))
    long Left;
    __declspec(property(get=GetTop,put=PutTop))
    long Top;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    long Height;
    __declspec(property(get=GetLeftLineStyle,put=PutLeftLineStyle))
    enum CRLineStyle LeftLineStyle;
    __declspec(property(get=GetRightLineStyle,put=PutRightLineStyle))
    enum CRLineStyle RightLineStyle;
    __declspec(property(get=GetTopLineStyle,put=PutTopLineStyle))
    enum CRLineStyle TopLineStyle;
    __declspec(property(get=GetBottomLineStyle,put=PutBottomLineStyle))
    enum CRLineStyle BottomLineStyle;
    __declspec(property(get=GetHasDropShadow,put=PutHasDropShadow))
    VARIANT_BOOL HasDropShadow;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    OLE_COLOR BackColor;
    __declspec(property(get=GetBorderColor,put=PutBorderColor))
    OLE_COLOR BorderColor;
    __declspec(property(get=GetSuppress,put=PutSuppress))
    VARIANT_BOOL Suppress;
    __declspec(property(get=GetCloseAtPageBreak,put=PutCloseAtPageBreak))
    VARIANT_BOOL CloseAtPageBreak;
    __declspec(property(get=GetKeepTogether,put=PutKeepTogether))
    VARIANT_BOOL KeepTogether;
    __declspec(property(get=GetConditionFormula,put=PutConditionFormula))
    _bstr_t ConditionFormula[];
    __declspec(property(get=GetSubreportName,put=PutSubreportName))
    _bstr_t SubreportName;
    __declspec(property(get=GetCssClass,put=PutCssClass))
    _bstr_t CssClass;
    __declspec(property(get=GetEnableOnDemand))
    VARIANT_BOOL EnableOnDemand;
    __declspec(property(get=GetCanGrow,put=PutCanGrow))
    VARIANT_BOOL CanGrow;
    __declspec(property(get=GetLinks))
    ISubreportLinksPtr Links;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t ppName );
    enum CRObjectKind GetKind ( );
    long GetLeft ( );
    void PutLeft (
        long pLeft );
    long GetTop ( );
    void PutTop (
        long pTop );
    long GetWidth ( );
    void PutWidth (
        long pWidth );
    long GetHeight ( );
    void PutHeight (
        long pHeight );
    enum CRLineStyle GetLeftLineStyle ( );
    void PutLeftLineStyle (
        enum CRLineStyle pLeftLineStyle );
    enum CRLineStyle GetRightLineStyle ( );
    void PutRightLineStyle (
        enum CRLineStyle pRightLineStyle );
    enum CRLineStyle GetTopLineStyle ( );
    void PutTopLineStyle (
        enum CRLineStyle pTopLineStyle );
    enum CRLineStyle GetBottomLineStyle ( );
    void PutBottomLineStyle (
        enum CRLineStyle pBottomLineStyle );
    VARIANT_BOOL GetHasDropShadow ( );
    void PutHasDropShadow (
        VARIANT_BOOL pBool );
    OLE_COLOR GetBackColor ( );
    void PutBackColor (
        OLE_COLOR pBackColor );
    OLE_COLOR GetBorderColor ( );
    void PutBorderColor (
        OLE_COLOR pBorderColor );
    ISectionPtr GetParent ( );
    VARIANT_BOOL GetSuppress ( );
    void PutSuppress (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetCloseAtPageBreak ( );
    void PutCloseAtPageBreak (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetKeepTogether ( );
    void PutKeepTogether (
        VARIANT_BOOL pBool );
    _bstr_t GetSubreportName ( );
    void PutSubreportName (
        _bstr_t ppSubreportName );
    IReportPtr OpenSubreport ( );
    VARIANT_BOOL GetCanGrow ( );
    void PutCanGrow (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetEnableOnDemand ( );
    ISubreportLinksPtr GetLinks ( );
    HRESULT ReimportSubreport (
        VARIANT_BOOL * pReimported );
    _bstr_t GetConditionFormula (
        const _variant_t & FormulaType );
    void PutConditionFormula (
        const _variant_t & FormulaType,
        _bstr_t pVal );
    _bstr_t GetCssClass ( );
    void PutCssClass (
        _bstr_t ppCssClass );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Name (
        BSTR * ppName ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR ppName ) = 0;
    virtual HRESULT __stdcall get_Kind (
        enum CRObjectKind * pObjectKind ) = 0;
    virtual HRESULT __stdcall get_Left (
        long * pLeft ) = 0;
    virtual HRESULT __stdcall put_Left (
        long pLeft ) = 0;
    virtual HRESULT __stdcall get_Top (
        long * pTop ) = 0;
    virtual HRESULT __stdcall put_Top (
        long pTop ) = 0;
    virtual HRESULT __stdcall get_Width (
        long * pWidth ) = 0;
    virtual HRESULT __stdcall put_Width (
        long pWidth ) = 0;
    virtual HRESULT __stdcall get_Height (
        long * pHeight ) = 0;
    virtual HRESULT __stdcall put_Height (
        long pHeight ) = 0;
    virtual HRESULT __stdcall get_LeftLineStyle (
        enum CRLineStyle * pLeftLineStyle ) = 0;
    virtual HRESULT __stdcall put_LeftLineStyle (
        enum CRLineStyle pLeftLineStyle ) = 0;
    virtual HRESULT __stdcall get_RightLineStyle (
        enum CRLineStyle * pRightLineStyle ) = 0;
    virtual HRESULT __stdcall put_RightLineStyle (
        enum CRLineStyle pRightLineStyle ) = 0;
    virtual HRESULT __stdcall get_TopLineStyle (
        enum CRLineStyle * pTopLineStyle ) = 0;
    virtual HRESULT __stdcall put_TopLineStyle (
        enum CRLineStyle pTopLineStyle ) = 0;
    virtual HRESULT __stdcall get_BottomLineStyle (
        enum CRLineStyle * pBottomLineStyle ) = 0;
    virtual HRESULT __stdcall put_BottomLineStyle (
        enum CRLineStyle pBottomLineStyle ) = 0;
    virtual HRESULT __stdcall get_HasDropShadow (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_HasDropShadow (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_BackColor (
        OLE_COLOR * pBackColor ) = 0;
    virtual HRESULT __stdcall put_BackColor (
        OLE_COLOR pBackColor ) = 0;
    virtual HRESULT __stdcall get_BorderColor (
        OLE_COLOR * pBorderColor ) = 0;
    virtual HRESULT __stdcall put_BorderColor (
        OLE_COLOR pBorderColor ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct ISection * * ppParent ) = 0;
    virtual HRESULT __stdcall get_Suppress (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_Suppress (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_CloseAtPageBreak (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_CloseAtPageBreak (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_KeepTogether (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_KeepTogether (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_SubreportName (
        BSTR * ppSubreportName ) = 0;
    virtual HRESULT __stdcall put_SubreportName (
        BSTR ppSubreportName ) = 0;
    virtual HRESULT __stdcall raw_OpenSubreport (
        struct IReport * * ppReport ) = 0;
    virtual HRESULT __stdcall get_CanGrow (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_CanGrow (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_EnableOnDemand (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall get_Links (
        struct ISubreportLinks * * ppLinks ) = 0;
    virtual HRESULT __stdcall raw_ReimportSubreport (
        VARIANT_BOOL * pReimported ) = 0;
    virtual HRESULT __stdcall get_ConditionFormula (
        VARIANT FormulaType,
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_ConditionFormula (
        VARIANT FormulaType,
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_CssClass (
        BSTR * ppCssClass ) = 0;
    virtual HRESULT __stdcall put_CssClass (
        BSTR ppCssClass ) = 0;
};

struct __declspec(uuid("af37684e-6120-4e28-96dd-63fd2dc27b7a"))
ISubreportLinks : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    ISubreportLinkPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    ISubreportObjectPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    ISubreportLinkPtr GetItem (
        long index );
    long GetCount ( );
    ISubreportObjectPtr GetParent ( );
    ISubreportLinkPtr Add (
        const _variant_t & MainReportField,
        const _variant_t & SubreportField );
    HRESULT Delete (
        long index );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * ppNewEnum ) = 0;
    virtual HRESULT __stdcall get_Item (
        long index,
        struct ISubreportLink * * ppSubreportLink ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * pCount ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct ISubreportObject * * ppParent ) = 0;
    virtual HRESULT __stdcall raw_Add (
        VARIANT MainReportField,
        VARIANT SubreportField,
        struct ISubreportLink * * ppSubreportLink ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        long index ) = 0;
};

struct __declspec(uuid("af37684d-6120-4e28-96dd-63fd2dc27b7a"))
ISubreportLink : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    ISubreportObjectPtr Parent;
    __declspec(property(get=GetMainReportField))
    IFieldDefinitionPtr MainReportField;
    __declspec(property(get=GetSubreportField))
    IFieldDefinitionPtr SubreportField;

    //
    // Wrapper methods for error-handling
    //

    ISubreportObjectPtr GetParent ( );
    IFieldDefinitionPtr GetMainReportField ( );
    IFieldDefinitionPtr GetSubreportField ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Parent (
        struct ISubreportObject * * ppParent ) = 0;
    virtual HRESULT __stdcall get_MainReportField (
        struct IFieldDefinition * * ppFieldDefinition ) = 0;
    virtual HRESULT __stdcall get_SubreportField (
        struct IFieldDefinition * * ppFieldDefinition ) = 0;
};

struct __declspec(uuid("af376828-6120-4e28-96dd-63fd2dc27b7a"))
ILineObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetParent))
    ISectionPtr Parent;
    __declspec(property(get=GetKind))
    enum CRObjectKind Kind;
    __declspec(property(get=GetLeft,put=PutLeft))
    long Left;
    __declspec(property(get=GetTop,put=PutTop))
    long Top;
    __declspec(property(get=GetLineColor,put=PutLineColor))
    OLE_COLOR LineColor;
    __declspec(property(get=GetCssClass,put=PutCssClass))
    _bstr_t CssClass;
    __declspec(property(get=GetRight,put=PutRight))
    long Right;
    __declspec(property(get=GetBottom,put=PutBottom))
    long Bottom;
    __declspec(property(get=GetLineStyle,put=PutLineStyle))
    enum CRLineStyle LineStyle;
    __declspec(property(get=GetLineThickness,put=PutLineThickness))
    long LineThickness;
    __declspec(property(get=GetExtendToBottomOfSection,put=PutExtendToBottomOfSection))
    VARIANT_BOOL ExtendToBottomOfSection;
    __declspec(property(get=GetSuppress,put=PutSuppress))
    VARIANT_BOOL Suppress;
    __declspec(property(get=GetEndSection))
    ISectionPtr EndSection;
    __declspec(property(get=GetConditionFormula,put=PutConditionFormula))
    _bstr_t ConditionFormula[];

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t ppName );
    enum CRObjectKind GetKind ( );
    long GetLeft ( );
    void PutLeft (
        long pLeft );
    long GetTop ( );
    void PutTop (
        long pTop );
    ISectionPtr GetParent ( );
    VARIANT_BOOL GetSuppress ( );
    void PutSuppress (
        VARIANT_BOOL pBool );
    OLE_COLOR GetLineColor ( );
    void PutLineColor (
        OLE_COLOR pLineColor );
    long GetRight ( );
    void PutRight (
        long pRight );
    long GetBottom ( );
    void PutBottom (
        long pBottom );
    long GetLineThickness ( );
    void PutLineThickness (
        long pLineThickness );
    VARIANT_BOOL GetExtendToBottomOfSection ( );
    void PutExtendToBottomOfSection (
        VARIANT_BOOL pBool );
    enum CRLineStyle GetLineStyle ( );
    void PutLineStyle (
        enum CRLineStyle pLineStyle );
    ISectionPtr GetEndSection ( );
    _bstr_t GetConditionFormula (
        const _variant_t & FormulaType );
    void PutConditionFormula (
        const _variant_t & FormulaType,
        _bstr_t pVal );
    _bstr_t GetCssClass ( );
    void PutCssClass (
        _bstr_t ppCssClass );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Name (
        BSTR * ppName ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR ppName ) = 0;
    virtual HRESULT __stdcall get_Kind (
        enum CRObjectKind * pObjectKind ) = 0;
    virtual HRESULT __stdcall get_Left (
        long * pLeft ) = 0;
    virtual HRESULT __stdcall put_Left (
        long pLeft ) = 0;
    virtual HRESULT __stdcall get_Top (
        long * pTop ) = 0;
    virtual HRESULT __stdcall put_Top (
        long pTop ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct ISection * * ppParent ) = 0;
    virtual HRESULT __stdcall get_Suppress (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_Suppress (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_LineColor (
        OLE_COLOR * pLineColor ) = 0;
    virtual HRESULT __stdcall put_LineColor (
        OLE_COLOR pLineColor ) = 0;
    virtual HRESULT __stdcall get_Right (
        long * pRight ) = 0;
    virtual HRESULT __stdcall put_Right (
        long pRight ) = 0;
    virtual HRESULT __stdcall get_Bottom (
        long * pBottom ) = 0;
    virtual HRESULT __stdcall put_Bottom (
        long pBottom ) = 0;
    virtual HRESULT __stdcall get_LineThickness (
        long * pLineThickness ) = 0;
    virtual HRESULT __stdcall put_LineThickness (
        long pLineThickness ) = 0;
    virtual HRESULT __stdcall get_ExtendToBottomOfSection (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_ExtendToBottomOfSection (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_LineStyle (
        enum CRLineStyle * pLineStyle ) = 0;
    virtual HRESULT __stdcall put_LineStyle (
        enum CRLineStyle pLineStyle ) = 0;
    virtual HRESULT __stdcall get_EndSection (
        struct ISection * * ppEndSection ) = 0;
    virtual HRESULT __stdcall get_ConditionFormula (
        VARIANT FormulaType,
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_ConditionFormula (
        VARIANT FormulaType,
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_CssClass (
        BSTR * ppCssClass ) = 0;
    virtual HRESULT __stdcall put_CssClass (
        BSTR ppCssClass ) = 0;
};

struct __declspec(uuid("af376829-6120-4e28-96dd-63fd2dc27b7a"))
IBoxObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetCornerEllipseWidth,put=PutCornerEllipseWidth))
    long CornerEllipseWidth;
    __declspec(property(get=GetParent))
    ISectionPtr Parent;
    __declspec(property(get=GetKind))
    enum CRObjectKind Kind;
    __declspec(property(get=GetLeft,put=PutLeft))
    long Left;
    __declspec(property(get=GetTop,put=PutTop))
    long Top;
    __declspec(property(get=GetLineColor,put=PutLineColor))
    OLE_COLOR LineColor;
    __declspec(property(get=GetFillColor,put=PutFillColor))
    OLE_COLOR FillColor;
    __declspec(property(get=GetRight,put=PutRight))
    long Right;
    __declspec(property(get=GetBottom,put=PutBottom))
    long Bottom;
    __declspec(property(get=GetLineStyle,put=PutLineStyle))
    enum CRLineStyle LineStyle;
    __declspec(property(get=GetCssClass,put=PutCssClass))
    _bstr_t CssClass;
    __declspec(property(get=GetHasDropShadow,put=PutHasDropShadow))
    VARIANT_BOOL HasDropShadow;
    __declspec(property(get=GetLineThickness,put=PutLineThickness))
    long LineThickness;
    __declspec(property(get=GetExtendToBottomOfSection,put=PutExtendToBottomOfSection))
    VARIANT_BOOL ExtendToBottomOfSection;
    __declspec(property(get=GetSuppress,put=PutSuppress))
    VARIANT_BOOL Suppress;
    __declspec(property(get=GetCloseAtPageBreak,put=PutCloseAtPageBreak))
    VARIANT_BOOL CloseAtPageBreak;
    __declspec(property(get=GetBottomRightSection))
    ISectionPtr BottomRightSection;
    __declspec(property(get=GetConditionFormula,put=PutConditionFormula))
    _bstr_t ConditionFormula[];
    __declspec(property(get=GetCornerEllipseHeight,put=PutCornerEllipseHeight))
    long CornerEllipseHeight;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t ppName );
    enum CRObjectKind GetKind ( );
    long GetLeft ( );
    void PutLeft (
        long pLeft );
    long GetTop ( );
    void PutTop (
        long pTop );
    long GetRight ( );
    void PutRight (
        long pRight );
    long GetBottom ( );
    void PutBottom (
        long pBottom );
    enum CRLineStyle GetLineStyle ( );
    void PutLineStyle (
        enum CRLineStyle pLineStyle );
    VARIANT_BOOL GetHasDropShadow ( );
    void PutHasDropShadow (
        VARIANT_BOOL pBool );
    OLE_COLOR GetLineColor ( );
    void PutLineColor (
        OLE_COLOR pLineColor );
    OLE_COLOR GetFillColor ( );
    void PutFillColor (
        OLE_COLOR pFillColor );
    ISectionPtr GetParent ( );
    VARIANT_BOOL GetSuppress ( );
    void PutSuppress (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetCloseAtPageBreak ( );
    void PutCloseAtPageBreak (
        VARIANT_BOOL pBool );
    ISectionPtr GetBottomRightSection ( );
    long GetLineThickness ( );
    void PutLineThickness (
        long pLineThickness );
    VARIANT_BOOL GetExtendToBottomOfSection ( );
    void PutExtendToBottomOfSection (
        VARIANT_BOOL pBool );
    long GetCornerEllipseHeight ( );
    void PutCornerEllipseHeight (
        long pCornerEllipseHeight );
    long GetCornerEllipseWidth ( );
    void PutCornerEllipseWidth (
        long pCornerEllipseWidth );
    _bstr_t GetConditionFormula (
        const _variant_t & FormulaType );
    void PutConditionFormula (
        const _variant_t & FormulaType,
        _bstr_t pVal );
    _bstr_t GetCssClass ( );
    void PutCssClass (
        _bstr_t ppCssClass );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Name (
        BSTR * ppName ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR ppName ) = 0;
    virtual HRESULT __stdcall get_Kind (
        enum CRObjectKind * pObjectKind ) = 0;
    virtual HRESULT __stdcall get_Left (
        long * pLeft ) = 0;
    virtual HRESULT __stdcall put_Left (
        long pLeft ) = 0;
    virtual HRESULT __stdcall get_Top (
        long * pTop ) = 0;
    virtual HRESULT __stdcall put_Top (
        long pTop ) = 0;
    virtual HRESULT __stdcall get_Right (
        long * pRight ) = 0;
    virtual HRESULT __stdcall put_Right (
        long pRight ) = 0;
    virtual HRESULT __stdcall get_Bottom (
        long * pBottom ) = 0;
    virtual HRESULT __stdcall put_Bottom (
        long pBottom ) = 0;
    virtual HRESULT __stdcall get_LineStyle (
        enum CRLineStyle * pLineStyle ) = 0;
    virtual HRESULT __stdcall put_LineStyle (
        enum CRLineStyle pLineStyle ) = 0;
    virtual HRESULT __stdcall get_HasDropShadow (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_HasDropShadow (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_LineColor (
        OLE_COLOR * pLineColor ) = 0;
    virtual HRESULT __stdcall put_LineColor (
        OLE_COLOR pLineColor ) = 0;
    virtual HRESULT __stdcall get_FillColor (
        OLE_COLOR * pFillColor ) = 0;
    virtual HRESULT __stdcall put_FillColor (
        OLE_COLOR pFillColor ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct ISection * * ppParent ) = 0;
    virtual HRESULT __stdcall get_Suppress (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_Suppress (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_CloseAtPageBreak (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_CloseAtPageBreak (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_BottomRightSection (
        struct ISection * * ppBottomRightSection ) = 0;
    virtual HRESULT __stdcall get_LineThickness (
        long * pLineThickness ) = 0;
    virtual HRESULT __stdcall put_LineThickness (
        long pLineThickness ) = 0;
    virtual HRESULT __stdcall get_ExtendToBottomOfSection (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_ExtendToBottomOfSection (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_CornerEllipseHeight (
        long * pCornerEllipseHeight ) = 0;
    virtual HRESULT __stdcall put_CornerEllipseHeight (
        long pCornerEllipseHeight ) = 0;
    virtual HRESULT __stdcall get_CornerEllipseWidth (
        long * pCornerEllipseWidth ) = 0;
    virtual HRESULT __stdcall put_CornerEllipseWidth (
        long pCornerEllipseWidth ) = 0;
    virtual HRESULT __stdcall get_ConditionFormula (
        VARIANT FormulaType,
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_ConditionFormula (
        VARIANT FormulaType,
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_CssClass (
        BSTR * ppCssClass ) = 0;
    virtual HRESULT __stdcall put_CssClass (
        BSTR ppCssClass ) = 0;
};

struct __declspec(uuid("af37682a-6120-4e28-96dd-63fd2dc27b7a"))
ICrossTabObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKeepTogether,put=PutKeepTogether))
    VARIANT_BOOL KeepTogether;
    __declspec(property(get=GetEnableSuppressEmptyColumns,put=PutEnableSuppressEmptyColumns))
    VARIANT_BOOL EnableSuppressEmptyColumns;
    __declspec(property(get=GetEnableKeepColumnsTogether,put=PutEnableKeepColumnsTogether))
    VARIANT_BOOL EnableKeepColumnsTogether;
    __declspec(property(get=GetEnableSuppressRowGrandTotals,put=PutEnableSuppressRowGrandTotals))
    VARIANT_BOOL EnableSuppressRowGrandTotals;
    __declspec(property(get=GetEnableSuppressColumnGrandTotals,put=PutEnableSuppressColumnGrandTotals))
    VARIANT_BOOL EnableSuppressColumnGrandTotals;
    __declspec(property(get=GetRowGrandTotalColor,put=PutRowGrandTotalColor))
    OLE_COLOR RowGrandTotalColor;
    __declspec(property(get=GetColumnGrandTotalColor,put=PutColumnGrandTotalColor))
    OLE_COLOR ColumnGrandTotalColor;
    __declspec(property(get=GetEnableRepeatRowLabels,put=PutEnableRepeatRowLabels))
    VARIANT_BOOL EnableRepeatRowLabels;
    __declspec(property(get=GetConditionFormula,put=PutConditionFormula))
    _bstr_t ConditionFormula[];
    __declspec(property(get=GetCssClass,put=PutCssClass))
    _bstr_t CssClass;
    __declspec(property(get=GetHyperlinkType,put=PutHyperlinkType))
    enum CRHyperlinkType HyperlinkType;
    __declspec(property(get=GetHyperlinkText,put=PutHyperlinkText))
    _bstr_t HyperlinkText;
    __declspec(property(get=GetSummaryFields))
    IObjectSummaryFieldDefinitionsPtr SummaryFields;
    __declspec(property(get=GetRowGroups))
    ICrossTabGroupsPtr RowGroups;
    __declspec(property(get=GetColumnGroups))
    ICrossTabGroupsPtr ColumnGroups;
    __declspec(property(get=GetEnableShowGrid,put=PutEnableShowGrid))
    VARIANT_BOOL EnableShowGrid;
    __declspec(property(get=GetEnableShowCellMargins,put=PutEnableShowCellMargins))
    VARIANT_BOOL EnableShowCellMargins;
    __declspec(property(get=GetEnableSuppressEmptyRows,put=PutEnableSuppressEmptyRows))
    VARIANT_BOOL EnableSuppressEmptyRows;
    __declspec(property(get=GetParent))
    ISectionPtr Parent;
    __declspec(property(get=GetKind))
    enum CRObjectKind Kind;
    __declspec(property(get=GetLeft,put=PutLeft))
    long Left;
    __declspec(property(get=GetTop,put=PutTop))
    long Top;
    __declspec(property(get=GetWidth))
    long Width;
    __declspec(property(get=GetHeight))
    long Height;
    __declspec(property(get=GetLeftLineStyle,put=PutLeftLineStyle))
    enum CRLineStyle LeftLineStyle;
    __declspec(property(get=GetRightLineStyle,put=PutRightLineStyle))
    enum CRLineStyle RightLineStyle;
    __declspec(property(get=GetTopLineStyle,put=PutTopLineStyle))
    enum CRLineStyle TopLineStyle;
    __declspec(property(get=GetBottomLineStyle,put=PutBottomLineStyle))
    enum CRLineStyle BottomLineStyle;
    __declspec(property(get=GetHasDropShadow,put=PutHasDropShadow))
    VARIANT_BOOL HasDropShadow;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    OLE_COLOR BackColor;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetBorderColor,put=PutBorderColor))
    OLE_COLOR BorderColor;
    __declspec(property(get=GetSuppress,put=PutSuppress))
    VARIANT_BOOL Suppress;
    __declspec(property(get=GetCloseAtPageBreak,put=PutCloseAtPageBreak))
    VARIANT_BOOL CloseAtPageBreak;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t ppName );
    enum CRObjectKind GetKind ( );
    long GetLeft ( );
    void PutLeft (
        long pLeft );
    long GetTop ( );
    void PutTop (
        long pTop );
    long GetWidth ( );
    long GetHeight ( );
    enum CRLineStyle GetLeftLineStyle ( );
    void PutLeftLineStyle (
        enum CRLineStyle pLeftLineStyle );
    enum CRLineStyle GetRightLineStyle ( );
    void PutRightLineStyle (
        enum CRLineStyle pRightLineStyle );
    enum CRLineStyle GetTopLineStyle ( );
    void PutTopLineStyle (
        enum CRLineStyle pTopLineStyle );
    enum CRLineStyle GetBottomLineStyle ( );
    void PutBottomLineStyle (
        enum CRLineStyle pBottomLineStyle );
    VARIANT_BOOL GetHasDropShadow ( );
    void PutHasDropShadow (
        VARIANT_BOOL pBool );
    OLE_COLOR GetBackColor ( );
    void PutBackColor (
        OLE_COLOR pBackColor );
    OLE_COLOR GetBorderColor ( );
    void PutBorderColor (
        OLE_COLOR pBorderColor );
    ISectionPtr GetParent ( );
    VARIANT_BOOL GetSuppress ( );
    void PutSuppress (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetCloseAtPageBreak ( );
    void PutCloseAtPageBreak (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetKeepTogether ( );
    void PutKeepTogether (
        VARIANT_BOOL pBool );
    IObjectSummaryFieldDefinitionsPtr GetSummaryFields ( );
    ICrossTabGroupsPtr GetRowGroups ( );
    ICrossTabGroupsPtr GetColumnGroups ( );
    VARIANT_BOOL GetEnableShowGrid ( );
    void PutEnableShowGrid (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetEnableShowCellMargins ( );
    void PutEnableShowCellMargins (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetEnableSuppressEmptyRows ( );
    void PutEnableSuppressEmptyRows (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetEnableSuppressEmptyColumns ( );
    void PutEnableSuppressEmptyColumns (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetEnableKeepColumnsTogether ( );
    void PutEnableKeepColumnsTogether (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetEnableSuppressRowGrandTotals ( );
    void PutEnableSuppressRowGrandTotals (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetEnableSuppressColumnGrandTotals ( );
    void PutEnableSuppressColumnGrandTotals (
        VARIANT_BOOL pBool );
    OLE_COLOR GetRowGrandTotalColor ( );
    void PutRowGrandTotalColor (
        OLE_COLOR pColor );
    OLE_COLOR GetColumnGrandTotalColor ( );
    void PutColumnGrandTotalColor (
        OLE_COLOR pColor );
    VARIANT_BOOL GetEnableRepeatRowLabels ( );
    void PutEnableRepeatRowLabels (
        VARIANT_BOOL pBool );
    _bstr_t GetConditionFormula (
        const _variant_t & FormulaType );
    void PutConditionFormula (
        const _variant_t & FormulaType,
        _bstr_t pVal );
    _bstr_t GetCssClass ( );
    void PutCssClass (
        _bstr_t ppCssClass );
    enum CRHyperlinkType GetHyperlinkType ( );
    void PutHyperlinkType (
        enum CRHyperlinkType pType );
    _bstr_t GetHyperlinkText ( );
    void PutHyperlinkText (
        _bstr_t pText );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Name (
        BSTR * ppName ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR ppName ) = 0;
    virtual HRESULT __stdcall get_Kind (
        enum CRObjectKind * pObjectKind ) = 0;
    virtual HRESULT __stdcall get_Left (
        long * pLeft ) = 0;
    virtual HRESULT __stdcall put_Left (
        long pLeft ) = 0;
    virtual HRESULT __stdcall get_Top (
        long * pTop ) = 0;
    virtual HRESULT __stdcall put_Top (
        long pTop ) = 0;
    virtual HRESULT __stdcall get_Width (
        long * pWidth ) = 0;
    virtual HRESULT __stdcall get_Height (
        long * pHeight ) = 0;
    virtual HRESULT __stdcall get_LeftLineStyle (
        enum CRLineStyle * pLeftLineStyle ) = 0;
    virtual HRESULT __stdcall put_LeftLineStyle (
        enum CRLineStyle pLeftLineStyle ) = 0;
    virtual HRESULT __stdcall get_RightLineStyle (
        enum CRLineStyle * pRightLineStyle ) = 0;
    virtual HRESULT __stdcall put_RightLineStyle (
        enum CRLineStyle pRightLineStyle ) = 0;
    virtual HRESULT __stdcall get_TopLineStyle (
        enum CRLineStyle * pTopLineStyle ) = 0;
    virtual HRESULT __stdcall put_TopLineStyle (
        enum CRLineStyle pTopLineStyle ) = 0;
    virtual HRESULT __stdcall get_BottomLineStyle (
        enum CRLineStyle * pBottomLineStyle ) = 0;
    virtual HRESULT __stdcall put_BottomLineStyle (
        enum CRLineStyle pBottomLineStyle ) = 0;
    virtual HRESULT __stdcall get_HasDropShadow (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_HasDropShadow (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_BackColor (
        OLE_COLOR * pBackColor ) = 0;
    virtual HRESULT __stdcall put_BackColor (
        OLE_COLOR pBackColor ) = 0;
    virtual HRESULT __stdcall get_BorderColor (
        OLE_COLOR * pBorderColor ) = 0;
    virtual HRESULT __stdcall put_BorderColor (
        OLE_COLOR pBorderColor ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct ISection * * ppParent ) = 0;
    virtual HRESULT __stdcall get_Suppress (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_Suppress (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_CloseAtPageBreak (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_CloseAtPageBreak (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_KeepTogether (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_KeepTogether (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_SummaryFields (
        struct IObjectSummaryFieldDefinitions * * ppSummaryFields ) = 0;
    virtual HRESULT __stdcall get_RowGroups (
        struct ICrossTabGroups * * ppRowGroups ) = 0;
    virtual HRESULT __stdcall get_ColumnGroups (
        struct ICrossTabGroups * * ppColumnGroups ) = 0;
    virtual HRESULT __stdcall get_EnableShowGrid (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_EnableShowGrid (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_EnableShowCellMargins (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_EnableShowCellMargins (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_EnableSuppressEmptyRows (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_EnableSuppressEmptyRows (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_EnableSuppressEmptyColumns (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_EnableSuppressEmptyColumns (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_EnableKeepColumnsTogether (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_EnableKeepColumnsTogether (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_EnableSuppressRowGrandTotals (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_EnableSuppressRowGrandTotals (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_EnableSuppressColumnGrandTotals (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_EnableSuppressColumnGrandTotals (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_RowGrandTotalColor (
        OLE_COLOR * pColor ) = 0;
    virtual HRESULT __stdcall put_RowGrandTotalColor (
        OLE_COLOR pColor ) = 0;
    virtual HRESULT __stdcall get_ColumnGrandTotalColor (
        OLE_COLOR * pColor ) = 0;
    virtual HRESULT __stdcall put_ColumnGrandTotalColor (
        OLE_COLOR pColor ) = 0;
    virtual HRESULT __stdcall get_EnableRepeatRowLabels (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_EnableRepeatRowLabels (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_ConditionFormula (
        VARIANT FormulaType,
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_ConditionFormula (
        VARIANT FormulaType,
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_CssClass (
        BSTR * ppCssClass ) = 0;
    virtual HRESULT __stdcall put_CssClass (
        BSTR ppCssClass ) = 0;
    virtual HRESULT __stdcall get_HyperlinkType (
        enum CRHyperlinkType * pType ) = 0;
    virtual HRESULT __stdcall put_HyperlinkType (
        enum CRHyperlinkType pType ) = 0;
    virtual HRESULT __stdcall get_HyperlinkText (
        BSTR * pText ) = 0;
    virtual HRESULT __stdcall put_HyperlinkText (
        BSTR pText ) = 0;
};

struct __declspec(uuid("af376852-6120-4e28-96dd-63fd2dc27b7a"))
IObjectSummaryFieldDefinitions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    ISummaryFieldDefinitionPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IReportObjectPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    ISummaryFieldDefinitionPtr GetItem (
        long index );
    long GetCount ( );
    IReportObjectPtr GetParent ( );
    HRESULT Add (
        const _variant_t & summaryField );
    HRESULT Delete (
        long index );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * ppNewEnum ) = 0;
    virtual HRESULT __stdcall get_Item (
        long index,
        struct ISummaryFieldDefinition * * ppSummaryField ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * pCount ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct IReportObject * * ppReportObject ) = 0;
    virtual HRESULT __stdcall raw_Add (
        VARIANT summaryField ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        long index ) = 0;
};

struct __declspec(uuid("af376815-6120-4e28-96dd-63fd2dc27b7a"))
ISummaryFieldDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetValueType))
    CRFieldValueType ValueType;
    __declspec(property(get=GetNumberOfBytes))
    short NumberOfBytes;
    __declspec(property(get=GetParent))
    IReportPtr Parent;
    __declspec(property(get=GetKind))
    enum CRFieldKind Kind;
    __declspec(property(get=GetPreviousValue))
    _variant_t PreviousValue;
    __declspec(property(get=GetNextValue))
    _variant_t NextValue;
    __declspec(property(get=GetHierarchicalSummaryType,put=PutHierarchicalSummaryType))
    enum CRHierarchicalSummaryType HierarchicalSummaryType;
    __declspec(property(get=GetSummaryType,put=PutSummaryType))
    enum CRSummaryType SummaryType;
    __declspec(property(get=GetSummarizedField))
    IDispatchPtr SummarizedField;
    __declspec(property(get=GetSecondarySummarizedField))
    IDispatchPtr SecondarySummarizedField;
    __declspec(property(get=GetSummaryOperationParameter,put=PutSummaryOperationParameter))
    long SummaryOperationParameter;
    __declspec(property(get=GetValue))
    _variant_t Value;
    __declspec(property(get=GetHeaderArea))
    IAreaPtr HeaderArea;
    __declspec(property(get=GetFooterArea))
    IAreaPtr FooterArea;
    __declspec(property(get=GetForCrossTab))
    VARIANT_BOOL ForCrossTab;

    //
    // Wrapper methods for error-handling
    //

    enum CRFieldKind GetKind ( );
    CRFieldValueType GetValueType ( );
    short GetNumberOfBytes ( );
    _bstr_t GetName ( );
    _variant_t GetValue ( );
    enum CRSummaryType GetSummaryType ( );
    IReportPtr GetParent ( );
    _variant_t GetPreviousValue ( );
    _variant_t GetNextValue ( );
    IAreaPtr GetHeaderArea ( );
    IAreaPtr GetFooterArea ( );
    IDispatchPtr GetSummarizedField ( );
    HRESULT SetSummarizedField (
        const _variant_t & SummarizedField );
    IDispatchPtr GetSecondarySummarizedField ( );
    HRESULT SetSecondarySummarizedField (
        const _variant_t & secondarySummariedField );
    long GetSummaryOperationParameter ( );
    void PutSummaryOperationParameter (
        long pOperationParameter );
    void PutSummaryType (
        enum CRSummaryType pSummaryType );
    VARIANT_BOOL GetForCrossTab ( );
    enum CRHierarchicalSummaryType GetHierarchicalSummaryType ( );
    void PutHierarchicalSummaryType (
        enum CRHierarchicalSummaryType pHierarchicalType );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Kind (
        enum CRFieldKind * pKind ) = 0;
    virtual HRESULT __stdcall get_ValueType (
        CRFieldValueType * pValueType ) = 0;
    virtual HRESULT __stdcall get_NumberOfBytes (
        short * pNumberOfBytes ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * pName ) = 0;
    virtual HRESULT __stdcall get_Value (
        VARIANT * pValue ) = 0;
    virtual HRESULT __stdcall get_SummaryType (
        enum CRSummaryType * pSummaryType ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct IReport * * ppParent ) = 0;
    virtual HRESULT __stdcall get_PreviousValue (
        VARIANT * pPreValue ) = 0;
    virtual HRESULT __stdcall get_NextValue (
        VARIANT * pNextValue ) = 0;
    virtual HRESULT __stdcall get_HeaderArea (
        struct IArea * * ppArea ) = 0;
    virtual HRESULT __stdcall get_FooterArea (
        struct IArea * * ppArea ) = 0;
    virtual HRESULT __stdcall get_SummarizedField (
        IDispatch * * ppSummarizedField ) = 0;
    virtual HRESULT __stdcall raw_SetSummarizedField (
        VARIANT SummarizedField ) = 0;
    virtual HRESULT __stdcall get_SecondarySummarizedField (
        IDispatch * * ppSummarizedField ) = 0;
    virtual HRESULT __stdcall raw_SetSecondarySummarizedField (
        VARIANT secondarySummariedField ) = 0;
    virtual HRESULT __stdcall get_SummaryOperationParameter (
        long * pOperationParameter ) = 0;
    virtual HRESULT __stdcall put_SummaryOperationParameter (
        long pOperationParameter ) = 0;
    virtual HRESULT __stdcall put_SummaryType (
        enum CRSummaryType pSummaryType ) = 0;
    virtual HRESULT __stdcall get_ForCrossTab (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall get_HierarchicalSummaryType (
        enum CRHierarchicalSummaryType * pHierarchicalType ) = 0;
    virtual HRESULT __stdcall put_HierarchicalSummaryType (
        enum CRHierarchicalSummaryType pHierarchicalType ) = 0;
};

enum CRSummaryType
{
    crSTSum = 0,
    crSTAverage = 1,
    crSTSampleVariance = 2,
    crSTSampleStandardDeviation = 3,
    crSTMaximum = 4,
    crSTMinimum = 5,
    crSTCount = 6,
    crSTPopVariance = 7,
    crSTPopStandardDeviation = 8,
    crSTDistinctCount = 9,
    crSTDCorrelation = 10,
    crSTDCovariance = 11,
    crSTDWeightedAvg = 12,
    crSTDMedian = 13,
    crSTDPercentile = 14,
    crSTDNthLargest = 15,
    crSTDNthSmallest = 16,
    crSTDMode = 17,
    crSTDNthMostFrequent = 18,
    crSTDPercentage = 19
};

enum CRHierarchicalSummaryType
{
    crHierarchicalSummaryNone = 0,
    crSummaryAcrossHierarchy = 1
};

struct __declspec(uuid("af376808-6120-4e28-96dd-63fd2dc27b7a"))
IReportObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetParent))
    ISectionPtr Parent;
    __declspec(property(get=GetKind))
    enum CRObjectKind Kind;
    __declspec(property(get=GetLeft,put=PutLeft))
    long Left;
    __declspec(property(get=GetTop,put=PutTop))
    long Top;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    long Height;
    __declspec(property(get=GetLeftLineStyle,put=PutLeftLineStyle))
    enum CRLineStyle LeftLineStyle;
    __declspec(property(get=GetRightLineStyle,put=PutRightLineStyle))
    enum CRLineStyle RightLineStyle;
    __declspec(property(get=GetTopLineStyle,put=PutTopLineStyle))
    enum CRLineStyle TopLineStyle;
    __declspec(property(get=GetBottomLineStyle,put=PutBottomLineStyle))
    enum CRLineStyle BottomLineStyle;
    __declspec(property(get=GetEnableTightHorizontal,put=PutEnableTightHorizontal))
    VARIANT_BOOL EnableTightHorizontal;
    __declspec(property(get=GetHasDropShadow,put=PutHasDropShadow))
    VARIANT_BOOL HasDropShadow;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    OLE_COLOR BackColor;
    __declspec(property(get=GetBorderColor,put=PutBorderColor))
    OLE_COLOR BorderColor;
    __declspec(property(get=GetSuppress,put=PutSuppress))
    VARIANT_BOOL Suppress;
    __declspec(property(get=GetCloseAtPageBreak,put=PutCloseAtPageBreak))
    VARIANT_BOOL CloseAtPageBreak;
    __declspec(property(get=GetKeepTogether,put=PutKeepTogether))
    VARIANT_BOOL KeepTogether;
    __declspec(property(get=GetCssClass,put=PutCssClass))
    _bstr_t CssClass;
    __declspec(property(get=GetHyperlinkType,put=PutHyperlinkType))
    enum CRHyperlinkType HyperlinkType;
    __declspec(property(get=GetHyperlinkText,put=PutHyperlinkText))
    _bstr_t HyperlinkText;
    __declspec(property(get=GetConditionFormula,put=PutConditionFormula))
    _bstr_t ConditionFormula[];

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t ppName );
    enum CRObjectKind GetKind ( );
    long GetLeft ( );
    void PutLeft (
        long pLeft );
    long GetTop ( );
    void PutTop (
        long pTop );
    long GetWidth ( );
    void PutWidth (
        long pWidth );
    long GetHeight ( );
    void PutHeight (
        long pHeight );
    enum CRLineStyle GetLeftLineStyle ( );
    void PutLeftLineStyle (
        enum CRLineStyle pLeftLineStyle );
    enum CRLineStyle GetRightLineStyle ( );
    void PutRightLineStyle (
        enum CRLineStyle pRightLineStyle );
    enum CRLineStyle GetTopLineStyle ( );
    void PutTopLineStyle (
        enum CRLineStyle pTopLineStyle );
    enum CRLineStyle GetBottomLineStyle ( );
    void PutBottomLineStyle (
        enum CRLineStyle pBottomLineStyle );
    VARIANT_BOOL GetEnableTightHorizontal ( );
    void PutEnableTightHorizontal (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetHasDropShadow ( );
    void PutHasDropShadow (
        VARIANT_BOOL pBool );
    OLE_COLOR GetBackColor ( );
    void PutBackColor (
        OLE_COLOR pBackColor );
    OLE_COLOR GetBorderColor ( );
    void PutBorderColor (
        OLE_COLOR pBorderColor );
    ISectionPtr GetParent ( );
    VARIANT_BOOL GetSuppress ( );
    void PutSuppress (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetCloseAtPageBreak ( );
    void PutCloseAtPageBreak (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetKeepTogether ( );
    void PutKeepTogether (
        VARIANT_BOOL pBool );
    _bstr_t GetConditionFormula (
        const _variant_t & FormulaType );
    void PutConditionFormula (
        const _variant_t & FormulaType,
        _bstr_t pVal );
    _bstr_t GetCssClass ( );
    void PutCssClass (
        _bstr_t ppCssClass );
    enum CRHyperlinkType GetHyperlinkType ( );
    void PutHyperlinkType (
        enum CRHyperlinkType pType );
    _bstr_t GetHyperlinkText ( );
    void PutHyperlinkText (
        _bstr_t pText );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Name (
        BSTR * ppName ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR ppName ) = 0;
    virtual HRESULT __stdcall get_Kind (
        enum CRObjectKind * pObjectKind ) = 0;
    virtual HRESULT __stdcall get_Left (
        long * pLeft ) = 0;
    virtual HRESULT __stdcall put_Left (
        long pLeft ) = 0;
    virtual HRESULT __stdcall get_Top (
        long * pTop ) = 0;
    virtual HRESULT __stdcall put_Top (
        long pTop ) = 0;
    virtual HRESULT __stdcall get_Width (
        long * pWidth ) = 0;
    virtual HRESULT __stdcall put_Width (
        long pWidth ) = 0;
    virtual HRESULT __stdcall get_Height (
        long * pHeight ) = 0;
    virtual HRESULT __stdcall put_Height (
        long pHeight ) = 0;
    virtual HRESULT __stdcall get_LeftLineStyle (
        enum CRLineStyle * pLeftLineStyle ) = 0;
    virtual HRESULT __stdcall put_LeftLineStyle (
        enum CRLineStyle pLeftLineStyle ) = 0;
    virtual HRESULT __stdcall get_RightLineStyle (
        enum CRLineStyle * pRightLineStyle ) = 0;
    virtual HRESULT __stdcall put_RightLineStyle (
        enum CRLineStyle pRightLineStyle ) = 0;
    virtual HRESULT __stdcall get_TopLineStyle (
        enum CRLineStyle * pTopLineStyle ) = 0;
    virtual HRESULT __stdcall put_TopLineStyle (
        enum CRLineStyle pTopLineStyle ) = 0;
    virtual HRESULT __stdcall get_BottomLineStyle (
        enum CRLineStyle * pBottomLineStyle ) = 0;
    virtual HRESULT __stdcall put_BottomLineStyle (
        enum CRLineStyle pBottomLineStyle ) = 0;
    virtual HRESULT __stdcall get_EnableTightHorizontal (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_EnableTightHorizontal (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_HasDropShadow (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_HasDropShadow (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_BackColor (
        OLE_COLOR * pBackColor ) = 0;
    virtual HRESULT __stdcall put_BackColor (
        OLE_COLOR pBackColor ) = 0;
    virtual HRESULT __stdcall get_BorderColor (
        OLE_COLOR * pBorderColor ) = 0;
    virtual HRESULT __stdcall put_BorderColor (
        OLE_COLOR pBorderColor ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct ISection * * ppParent ) = 0;
    virtual HRESULT __stdcall get_Suppress (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_Suppress (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_CloseAtPageBreak (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_CloseAtPageBreak (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_KeepTogether (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_KeepTogether (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_ConditionFormula (
        VARIANT FormulaType,
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_ConditionFormula (
        VARIANT FormulaType,
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_CssClass (
        BSTR * ppCssClass ) = 0;
    virtual HRESULT __stdcall put_CssClass (
        BSTR ppCssClass ) = 0;
    virtual HRESULT __stdcall get_HyperlinkType (
        enum CRHyperlinkType * pType ) = 0;
    virtual HRESULT __stdcall put_HyperlinkType (
        enum CRHyperlinkType pType ) = 0;
    virtual HRESULT __stdcall get_HyperlinkText (
        BSTR * pText ) = 0;
    virtual HRESULT __stdcall put_HyperlinkText (
        BSTR pText ) = 0;
};

struct __declspec(uuid("af37684f-6120-4e28-96dd-63fd2dc27b7a"))
ICrossTabGroups : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    ICrossTabGroupPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    ICrossTabObjectPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    ICrossTabObjectPtr GetParent ( );
    long GetCount ( );
    ICrossTabGroupPtr GetItem (
        long index );
    ICrossTabGroupPtr Add (
        const _variant_t & Field );
    HRESULT Delete (
        long index );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * ppNewEnum ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct ICrossTabObject * * ppCrossTabObject ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * pCount ) = 0;
    virtual HRESULT __stdcall get_Item (
        long index,
        struct ICrossTabGroup * * ppCrossTabGroup ) = 0;
    virtual HRESULT __stdcall raw_Add (
        VARIANT Field,
        struct ICrossTabGroup * * ppCrossTabGroup ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        long index ) = 0;
};

struct __declspec(uuid("af376850-6120-4e28-96dd-63fd2dc27b7a"))
ICrossTabGroup : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEnableSuppressSubtotal,put=PutEnableSuppressSubtotal))
    VARIANT_BOOL EnableSuppressSubtotal;
    __declspec(property(get=GetEnableSuppressLabel,put=PutEnableSuppressLabel))
    VARIANT_BOOL EnableSuppressLabel;
    __declspec(property(get=GetParent))
    ICrossTabObjectPtr Parent;
    __declspec(property(get=GetCondition,put=PutCondition))
    enum CRGroupCondition Condition;
    __declspec(property(get=GetSortDirection,put=PutSortDirection))
    enum CRSortDirection SortDirection;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    OLE_COLOR BackColor;

    //
    // Wrapper methods for error-handling
    //

    ICrossTabObjectPtr GetParent ( );
    IFieldDefinitionPtr GetField ( );
    void PutField (
        const _variant_t & ppField );
    enum CRGroupCondition GetCondition ( );
    void PutCondition (
        enum CRGroupCondition pGroupCondition );
    enum CRSortDirection GetSortDirection ( );
    void PutSortDirection (
        enum CRSortDirection pSortDirection );
    OLE_COLOR GetBackColor ( );
    void PutBackColor (
        OLE_COLOR pBackColor );
    VARIANT_BOOL GetEnableSuppressSubtotal ( );
    void PutEnableSuppressSubtotal (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetEnableSuppressLabel ( );
    void PutEnableSuppressLabel (
        VARIANT_BOOL pBool );
    _variant_t GetSpecifiedGroups ( );
    void PutSpecifiedGroups (
        VARIANT * pSpecifedGroupArray );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Parent (
        struct ICrossTabObject * * ppCrossTabObject ) = 0;
    virtual HRESULT __stdcall get_Field (
        struct IFieldDefinition * * ppField ) = 0;
    virtual HRESULT __stdcall put_Field (
        VARIANT ppField ) = 0;
    virtual HRESULT __stdcall get_Condition (
        enum CRGroupCondition * pGroupCondition ) = 0;
    virtual HRESULT __stdcall put_Condition (
        enum CRGroupCondition pGroupCondition ) = 0;
    virtual HRESULT __stdcall get_SortDirection (
        enum CRSortDirection * pSortDirection ) = 0;
    virtual HRESULT __stdcall put_SortDirection (
        enum CRSortDirection pSortDirection ) = 0;
    virtual HRESULT __stdcall get_BackColor (
        OLE_COLOR * pBackColor ) = 0;
    virtual HRESULT __stdcall put_BackColor (
        OLE_COLOR pBackColor ) = 0;
    virtual HRESULT __stdcall get_EnableSuppressSubtotal (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_EnableSuppressSubtotal (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_EnableSuppressLabel (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_EnableSuppressLabel (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_SpecifiedGroups (
        VARIANT * pSpecifedGroupArray ) = 0;
    virtual HRESULT __stdcall put_SpecifiedGroups (
        VARIANT * pSpecifedGroupArray ) = 0;
};

enum CRGroupCondition
{
    crGCDaily = 0,
    crGCWeekly = 1,
    crGCBiweekly = 2,
    crGCSemimonthly = 3,
    crGCMonthly = 4,
    crGCQuarterly = 5,
    crGCSemiAnnually = 6,
    crGCAnnually = 7,
    crGCToYes = 8,
    crGCToNo = 9,
    crGCEveryYes = 10,
    crGCEveryNo = 11,
    crGCNextIsYes = 12,
    crGCNextIsNo = 13,
    crGCAnyValue = 14,
    crGCBySecond = 15,
    crGCByMinute = 16,
    crGCByHour = 17,
    crGCByAMPM = 18
};

enum CRSortDirection
{
    crAscendingOrder = 0,
    crDescendingOrder = 1,
    crOriginalOrder = 2,
    crSpecifiedOrder = 3
};

struct __declspec(uuid("af376826-6120-4e28-96dd-63fd2dc27b7a"))
ICROleObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetParent))
    ISectionPtr Parent;
    __declspec(property(get=GetKind))
    enum CRObjectKind Kind;
    __declspec(property(get=GetLeft,put=PutLeft))
    long Left;
    __declspec(property(get=GetTop,put=PutTop))
    long Top;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    long Height;
    __declspec(property(get=GetLeftLineStyle,put=PutLeftLineStyle))
    enum CRLineStyle LeftLineStyle;
    __declspec(property(get=GetRightLineStyle,put=PutRightLineStyle))
    enum CRLineStyle RightLineStyle;
    __declspec(property(get=GetTopLineStyle,put=PutTopLineStyle))
    enum CRLineStyle TopLineStyle;
    __declspec(property(get=GetBottomLineStyle,put=PutBottomLineStyle))
    enum CRLineStyle BottomLineStyle;
    __declspec(property(get=GetLeftCropping,put=PutLeftCropping))
    long LeftCropping;
    __declspec(property(get=GetHasDropShadow,put=PutHasDropShadow))
    VARIANT_BOOL HasDropShadow;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    OLE_COLOR BackColor;
    __declspec(property(get=GetBorderColor,put=PutBorderColor))
    OLE_COLOR BorderColor;
    __declspec(property(get=GetSuppress,put=PutSuppress))
    VARIANT_BOOL Suppress;
    __declspec(property(get=GetCloseAtPageBreak,put=PutCloseAtPageBreak))
    VARIANT_BOOL CloseAtPageBreak;
    __declspec(property(get=GetKeepTogether,put=PutKeepTogether))
    VARIANT_BOOL KeepTogether;
    __declspec(property(get=GetRightCropping,put=PutRightCropping))
    long RightCropping;
    __declspec(property(get=GetTopCropping,put=PutTopCropping))
    long TopCropping;
    __declspec(property(get=GetBottomCropping,put=PutBottomCropping))
    long BottomCropping;
    __declspec(property(get=GetXScaling,put=PutXScaling))
    double XScaling;
    __declspec(property(get=GetYScaling,put=PutYScaling))
    double YScaling;
    __declspec(property(get=GetConditionFormula,put=PutConditionFormula))
    _bstr_t ConditionFormula[];
    __declspec(property(get=GetCssClass,put=PutCssClass))
    _bstr_t CssClass;
    __declspec(property(get=GetHyperlinkType,put=PutHyperlinkType))
    enum CRHyperlinkType HyperlinkType;
    __declspec(property(get=GetHyperlinkText,put=PutHyperlinkText))
    _bstr_t HyperlinkText;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t ppName );
    enum CRObjectKind GetKind ( );
    long GetLeft ( );
    void PutLeft (
        long pLeft );
    long GetTop ( );
    void PutTop (
        long pTop );
    long GetWidth ( );
    void PutWidth (
        long pWidth );
    long GetHeight ( );
    void PutHeight (
        long pHeight );
    enum CRLineStyle GetLeftLineStyle ( );
    void PutLeftLineStyle (
        enum CRLineStyle pLeftLineStyle );
    enum CRLineStyle GetRightLineStyle ( );
    void PutRightLineStyle (
        enum CRLineStyle pRightLineStyle );
    enum CRLineStyle GetTopLineStyle ( );
    void PutTopLineStyle (
        enum CRLineStyle pTopLineStyle );
    enum CRLineStyle GetBottomLineStyle ( );
    void PutBottomLineStyle (
        enum CRLineStyle pBottomLineStyle );
    VARIANT_BOOL GetHasDropShadow ( );
    void PutHasDropShadow (
        VARIANT_BOOL pBool );
    OLE_COLOR GetBackColor ( );
    void PutBackColor (
        OLE_COLOR pBackColor );
    OLE_COLOR GetBorderColor ( );
    void PutBorderColor (
        OLE_COLOR pBorderColor );
    ISectionPtr GetParent ( );
    VARIANT_BOOL GetSuppress ( );
    void PutSuppress (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetCloseAtPageBreak ( );
    void PutCloseAtPageBreak (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetKeepTogether ( );
    void PutKeepTogether (
        VARIANT_BOOL pBool );
    long GetLeftCropping ( );
    void PutLeftCropping (
        long pLeftCropping );
    long GetRightCropping ( );
    void PutRightCropping (
        long pRightCropping );
    long GetTopCropping ( );
    void PutTopCropping (
        long pTopCropping );
    long GetBottomCropping ( );
    void PutBottomCropping (
        long pBottomCropping );
    double GetXScaling ( );
    void PutXScaling (
        double pXScaling );
    double GetYScaling ( );
    void PutYScaling (
        double pYScaling );
    IPictureDisp * GetFormattedPicture ( );
    void PutRefFormattedPicture (
        IPictureDisp * ppPicture );
    HRESULT SetOleLocation (
        _bstr_t pLocation );
    _bstr_t GetConditionFormula (
        const _variant_t & FormulaType );
    void PutConditionFormula (
        const _variant_t & FormulaType,
        _bstr_t pVal );
    _bstr_t GetLinkSource ( );
    _bstr_t GetCssClass ( );
    void PutCssClass (
        _bstr_t ppCssClass );
    enum CRHyperlinkType GetHyperlinkType ( );
    void PutHyperlinkType (
        enum CRHyperlinkType pType );
    _bstr_t GetHyperlinkText ( );
    void PutHyperlinkText (
        _bstr_t pText );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Name (
        BSTR * ppName ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR ppName ) = 0;
    virtual HRESULT __stdcall get_Kind (
        enum CRObjectKind * pObjectKind ) = 0;
    virtual HRESULT __stdcall get_Left (
        long * pLeft ) = 0;
    virtual HRESULT __stdcall put_Left (
        long pLeft ) = 0;
    virtual HRESULT __stdcall get_Top (
        long * pTop ) = 0;
    virtual HRESULT __stdcall put_Top (
        long pTop ) = 0;
    virtual HRESULT __stdcall get_Width (
        long * pWidth ) = 0;
    virtual HRESULT __stdcall put_Width (
        long pWidth ) = 0;
    virtual HRESULT __stdcall get_Height (
        long * pHeight ) = 0;
    virtual HRESULT __stdcall put_Height (
        long pHeight ) = 0;
    virtual HRESULT __stdcall get_LeftLineStyle (
        enum CRLineStyle * pLeftLineStyle ) = 0;
    virtual HRESULT __stdcall put_LeftLineStyle (
        enum CRLineStyle pLeftLineStyle ) = 0;
    virtual HRESULT __stdcall get_RightLineStyle (
        enum CRLineStyle * pRightLineStyle ) = 0;
    virtual HRESULT __stdcall put_RightLineStyle (
        enum CRLineStyle pRightLineStyle ) = 0;
    virtual HRESULT __stdcall get_TopLineStyle (
        enum CRLineStyle * pTopLineStyle ) = 0;
    virtual HRESULT __stdcall put_TopLineStyle (
        enum CRLineStyle pTopLineStyle ) = 0;
    virtual HRESULT __stdcall get_BottomLineStyle (
        enum CRLineStyle * pBottomLineStyle ) = 0;
    virtual HRESULT __stdcall put_BottomLineStyle (
        enum CRLineStyle pBottomLineStyle ) = 0;
    virtual HRESULT __stdcall get_HasDropShadow (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_HasDropShadow (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_BackColor (
        OLE_COLOR * pBackColor ) = 0;
    virtual HRESULT __stdcall put_BackColor (
        OLE_COLOR pBackColor ) = 0;
    virtual HRESULT __stdcall get_BorderColor (
        OLE_COLOR * pBorderColor ) = 0;
    virtual HRESULT __stdcall put_BorderColor (
        OLE_COLOR pBorderColor ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct ISection * * ppParent ) = 0;
    virtual HRESULT __stdcall get_Suppress (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_Suppress (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_CloseAtPageBreak (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_CloseAtPageBreak (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_KeepTogether (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_KeepTogether (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_LeftCropping (
        long * pLeftCropping ) = 0;
    virtual HRESULT __stdcall put_LeftCropping (
        long pLeftCropping ) = 0;
    virtual HRESULT __stdcall get_RightCropping (
        long * pRightCropping ) = 0;
    virtual HRESULT __stdcall put_RightCropping (
        long pRightCropping ) = 0;
    virtual HRESULT __stdcall get_TopCropping (
        long * pTopCropping ) = 0;
    virtual HRESULT __stdcall put_TopCropping (
        long pTopCropping ) = 0;
    virtual HRESULT __stdcall get_BottomCropping (
        long * pBottomCropping ) = 0;
    virtual HRESULT __stdcall put_BottomCropping (
        long pBottomCropping ) = 0;
    virtual HRESULT __stdcall get_XScaling (
        double * pXScaling ) = 0;
    virtual HRESULT __stdcall put_XScaling (
        double pXScaling ) = 0;
    virtual HRESULT __stdcall get_YScaling (
        double * pYScaling ) = 0;
    virtual HRESULT __stdcall put_YScaling (
        double pYScaling ) = 0;
    virtual HRESULT __stdcall get_FormattedPicture (
        IPictureDisp * * ppPicture ) = 0;
    virtual HRESULT __stdcall putref_FormattedPicture (
        IPictureDisp * ppPicture ) = 0;
    virtual HRESULT __stdcall raw_SetOleLocation (
        BSTR pLocation ) = 0;
    virtual HRESULT __stdcall get_ConditionFormula (
        VARIANT FormulaType,
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_ConditionFormula (
        VARIANT FormulaType,
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall raw_GetLinkSource (
        BSTR * pLinkSource ) = 0;
    virtual HRESULT __stdcall get_CssClass (
        BSTR * ppCssClass ) = 0;
    virtual HRESULT __stdcall put_CssClass (
        BSTR ppCssClass ) = 0;
    virtual HRESULT __stdcall get_HyperlinkType (
        enum CRHyperlinkType * pType ) = 0;
    virtual HRESULT __stdcall put_HyperlinkType (
        enum CRHyperlinkType pType ) = 0;
    virtual HRESULT __stdcall get_HyperlinkText (
        BSTR * pText ) = 0;
    virtual HRESULT __stdcall put_HyperlinkText (
        BSTR pText ) = 0;
};

enum CRGraphDataType
{
    crGroupGraph = 0,
    crDetailGraph = 1,
    crCrossTabGraph = 2,
    crOlapGraph = 3
};

struct __declspec(uuid("af376824-6120-4e28-96dd-63fd2dc27b7a"))
IGraphObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDataType))
    enum CRGraphDataType DataType;
    __declspec(property(get=GetLegendPosition,put=PutLegendPosition))
    enum CRLegendPosition LegendPosition;
    __declspec(property(get=GetMaxSeriesAxisValue,put=PutMaxSeriesAxisValue))
    double MaxSeriesAxisValue;
    __declspec(property(get=GetMinSeriesAxisValue,put=PutMinSeriesAxisValue))
    double MinSeriesAxisValue;
    __declspec(property(get=GetGroupAxisGridline,put=PutGroupAxisGridline))
    enum CRGridlineType GroupAxisGridline;
    __declspec(property(get=GetSeriesAxisGridline,put=PutSeriesAxisGridline))
    enum CRGridlineType SeriesAxisGridline;
    __declspec(property(get=GetDataAxisGridline,put=PutDataAxisGridline))
    enum CRGridlineType DataAxisGridline;
    __declspec(property(get=GetData2AxisGridline,put=PutData2AxisGridline))
    enum CRGridlineType Data2AxisGridline;
    __declspec(property(get=GetPieSize,put=PutPieSize))
    enum CRPieSize PieSize;
    __declspec(property(get=GetSliceDetachment,put=PutSliceDetachment))
    enum CRSliceDetachment SliceDetachment;
    __declspec(property(get=GetBarSize,put=PutBarSize))
    enum CRBarSize BarSize;
    __declspec(property(get=GetMarkerSize,put=PutMarkerSize))
    enum CRMarkerSize MarkerSize;
    __declspec(property(get=GetMarkerShape,put=PutMarkerShape))
    enum CRMarkerShape MarkerShape;
    __declspec(property(get=GetDataAxisNumberFormat,put=PutDataAxisNumberFormat))
    enum CRNumberFormat DataAxisNumberFormat;
    __declspec(property(get=GetData2AxisNumberFormat,put=PutData2AxisNumberFormat))
    enum CRNumberFormat Data2AxisNumberFormat;
    __declspec(property(get=GetSeriesAxisNumberFormat,put=PutSeriesAxisNumberFormat))
    enum CRNumberFormat SeriesAxisNumberFormat;
    __declspec(property(get=GetAutoRangeDataAxis,put=PutAutoRangeDataAxis))
    VARIANT_BOOL AutoRangeDataAxis;
    __declspec(property(get=GetAutoRangeData2Axis,put=PutAutoRangeData2Axis))
    VARIANT_BOOL AutoRangeData2Axis;
    __declspec(property(get=GetAutoRangeSeriesAxis,put=PutAutoRangeSeriesAxis))
    VARIANT_BOOL AutoRangeSeriesAxis;
    __declspec(property(get=GetDataAxisDivisionMethod,put=PutDataAxisDivisionMethod))
    enum CRDivisionMethod DataAxisDivisionMethod;
    __declspec(property(get=GetData2AxisDivisionMethod,put=PutData2AxisDivisionMethod))
    enum CRDivisionMethod Data2AxisDivisionMethod;
    __declspec(property(get=GetSeriesAxisDivisionMethod,put=PutSeriesAxisDivisionMethod))
    enum CRDivisionMethod SeriesAxisDivisionMethod;
    __declspec(property(get=GetDataAxisDivisionNumber,put=PutDataAxisDivisionNumber))
    long DataAxisDivisionNumber;
    __declspec(property(get=GetData2AxisDivisionNumber,put=PutData2AxisDivisionNumber))
    long Data2AxisDivisionNumber;
    __declspec(property(get=GetSeriesAxisDivisionNumber,put=PutSeriesAxisDivisionNumber))
    long SeriesAxisDivisionNumber;
    __declspec(property(get=GetGraphColor,put=PutGraphColor))
    enum CRGraphColor GraphColor;
    __declspec(property(get=GetDataValueNumberFormat,put=PutDataValueNumberFormat))
    enum CRNumberFormat DataValueNumberFormat;
    __declspec(property(get=GetViewingAngle,put=PutViewingAngle))
    enum CRViewingAngle ViewingAngle;
    __declspec(property(get=GetZAxisTitle,put=PutZAxisTitle))
    _bstr_t ZAxisTitle;
    __declspec(property(get=GetParent))
    ISectionPtr Parent;
    __declspec(property(get=GetKind))
    enum CRObjectKind Kind;
    __declspec(property(get=GetLeft,put=PutLeft))
    long Left;
    __declspec(property(get=GetTop,put=PutTop))
    long Top;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    long Height;
    __declspec(property(get=GetLeftLineStyle,put=PutLeftLineStyle))
    enum CRLineStyle LeftLineStyle;
    __declspec(property(get=GetRightLineStyle,put=PutRightLineStyle))
    enum CRLineStyle RightLineStyle;
    __declspec(property(get=GetTopLineStyle,put=PutTopLineStyle))
    enum CRLineStyle TopLineStyle;
    __declspec(property(get=GetBottomLineStyle,put=PutBottomLineStyle))
    enum CRLineStyle BottomLineStyle;
    __declspec(property(get=GetHyperlinkType,put=PutHyperlinkType))
    enum CRHyperlinkType HyperlinkType;
    __declspec(property(get=GetHasDropShadow,put=PutHasDropShadow))
    VARIANT_BOOL HasDropShadow;
    __declspec(property(get=GetDataTitle,put=PutDataTitle))
    _bstr_t DataTitle;
    __declspec(property(get=GetData2Title,put=PutData2Title))
    _bstr_t Data2Title;
    __declspec(property(get=GetIsGroupsTitleByDefault,put=PutIsGroupsTitleByDefault))
    VARIANT_BOOL IsGroupsTitleByDefault;
    __declspec(property(get=GetIsDataTitleByDefault,put=PutIsDataTitleByDefault))
    VARIANT_BOOL IsDataTitleByDefault;
    __declspec(property(get=GetIsData2TitleByDefault,put=PutIsData2TitleByDefault))
    VARIANT_BOOL IsData2TitleByDefault;
    __declspec(property(get=GetIsSeriesTitleByDefault,put=PutIsSeriesTitleByDefault))
    VARIANT_BOOL IsSeriesTitleByDefault;
    __declspec(property(get=GetSpecifiedGroups,put=PutSpecifiedGroups))
    _variant_t SpecifiedGroups[];
    __declspec(property(get=GetConditionFieldSortOrder,put=PutConditionFieldSortOrder))
    enum CRSortDirection ConditionFieldSortOrder[];
    __declspec(property(get=GetIsTitleByDefault,put=PutIsTitleByDefault))
    VARIANT_BOOL IsTitleByDefault;
    __declspec(property(get=GetIsSubTitleByDefault,put=PutIsSubTitleByDefault))
    VARIANT_BOOL IsSubTitleByDefault;
    __declspec(property(get=GetIsFootnoteByDefault,put=PutIsFootnoteByDefault))
    VARIANT_BOOL IsFootnoteByDefault;
    __declspec(property(get=GetIsXAxisTitleByDefault,put=PutIsXAxisTitleByDefault))
    VARIANT_BOOL IsXAxisTitleByDefault;
    __declspec(property(get=GetIsYAxisTitleByDefault,put=PutIsYAxisTitleByDefault))
    VARIANT_BOOL IsYAxisTitleByDefault;
    __declspec(property(get=GetIsZAxisTitleByDefault,put=PutIsZAxisTitleByDefault))
    VARIANT_BOOL IsZAxisTitleByDefault;
    __declspec(property(get=GetEnableAutoScaleDataAxis,put=PutEnableAutoScaleDataAxis))
    VARIANT_BOOL EnableAutoScaleDataAxis;
    __declspec(property(get=GetEnableAutoScaleData2Axis,put=PutEnableAutoScaleData2Axis))
    VARIANT_BOOL EnableAutoScaleData2Axis;
    __declspec(property(get=GetEnableAutoScaleSeriesAxis,put=PutEnableAutoScaleSeriesAxis))
    VARIANT_BOOL EnableAutoScaleSeriesAxis;
    __declspec(property(get=GetLegendLayout,put=PutLegendLayout))
    enum CRPieLegendLayout LegendLayout;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    OLE_COLOR BackColor;
    __declspec(property(get=GetBorderColor,put=PutBorderColor))
    OLE_COLOR BorderColor;
    __declspec(property(get=GetSuppress,put=PutSuppress))
    VARIANT_BOOL Suppress;
    __declspec(property(get=GetCloseAtPageBreak,put=PutCloseAtPageBreak))
    VARIANT_BOOL CloseAtPageBreak;
    __declspec(property(get=GetKeepTogether,put=PutKeepTogether))
    VARIANT_BOOL KeepTogether;
    __declspec(property(get=GetHyperlinkText,put=PutHyperlinkText))
    _bstr_t HyperlinkText;
    __declspec(property(get=GetCssClass,put=PutCssClass))
    _bstr_t CssClass;
    __declspec(property(get=GetGraphType,put=PutGraphType))
    enum CRGraphType GraphType;
    __declspec(property(get=GetTitle,put=PutTitle))
    _bstr_t Title;
    __declspec(property(get=GetSubTitle,put=PutSubTitle))
    _bstr_t SubTitle;
    __declspec(property(get=GetFootNote,put=PutFootNote))
    _bstr_t FootNote;
    __declspec(property(get=GetGroupsTitle,put=PutGroupsTitle))
    _bstr_t GroupsTitle;
    __declspec(property(get=GetSeriesTitle,put=PutSeriesTitle))
    _bstr_t SeriesTitle;
    __declspec(property(get=GetXAxisTitle,put=PutXAxisTitle))
    _bstr_t XAxisTitle;
    __declspec(property(get=GetYAxisTitle,put=PutYAxisTitle))
    _bstr_t YAxisTitle;
    __declspec(property(get=GetY2AxisTitle,put=PutY2AxisTitle))
    _bstr_t Y2AxisTitle;
    __declspec(property(get=GetMaxDataAxisValue,put=PutMaxDataAxisValue))
    double MaxDataAxisValue;
    __declspec(property(get=GetMinDataAxisValue,put=PutMinDataAxisValue))
    double MinDataAxisValue;
    __declspec(property(get=GetConditionFormula,put=PutConditionFormula))
    _bstr_t ConditionFormula[];
    __declspec(property(get=GetDataPoint,put=PutDataPoint))
    enum CRGraphDataPoint DataPoint;
    __declspec(property(get=GetEnableShowLegend,put=PutEnableShowLegend))
    VARIANT_BOOL EnableShowLegend;
    __declspec(property(get=GetMaxData2AxisValue,put=PutMaxData2AxisValue))
    double MaxData2AxisValue;
    __declspec(property(get=GetMinData2AxisValue,put=PutMinData2AxisValue))
    double MinData2AxisValue;
    __declspec(property(get=GetConditionFields))
    IFieldDefinitionsPtr ConditionFields;
    __declspec(property(get=GetSummaryFields))
    IObjectSummaryFieldDefinitionsPtr SummaryFields;
    __declspec(property(get=GetEnableForEachRecord,put=PutEnableForEachRecord))
    VARIANT_BOOL EnableForEachRecord;
    __declspec(property(get=GetGraphDirection,put=PutGraphDirection))
    enum CRGraphDirection GraphDirection;
    __declspec(property(get=GetEnableSummarizeValues,put=PutEnableSummarizeValues))
    VARIANT_BOOL EnableSummarizeValues;
    __declspec(property(get=GetCrossTabObject))
    ICrossTabObjectPtr CrossTabObject;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t ppName );
    enum CRObjectKind GetKind ( );
    long GetLeft ( );
    void PutLeft (
        long pLeft );
    long GetTop ( );
    void PutTop (
        long pTop );
    long GetWidth ( );
    void PutWidth (
        long pWidth );
    long GetHeight ( );
    void PutHeight (
        long pHeight );
    enum CRLineStyle GetLeftLineStyle ( );
    void PutLeftLineStyle (
        enum CRLineStyle pLeftLineStyle );
    enum CRLineStyle GetRightLineStyle ( );
    void PutRightLineStyle (
        enum CRLineStyle pRightLineStyle );
    enum CRLineStyle GetTopLineStyle ( );
    void PutTopLineStyle (
        enum CRLineStyle pTopLineStyle );
    enum CRLineStyle GetBottomLineStyle ( );
    void PutBottomLineStyle (
        enum CRLineStyle pBottomLineStyle );
    VARIANT_BOOL GetHasDropShadow ( );
    void PutHasDropShadow (
        VARIANT_BOOL pBool );
    OLE_COLOR GetBackColor ( );
    void PutBackColor (
        OLE_COLOR pBackColor );
    OLE_COLOR GetBorderColor ( );
    void PutBorderColor (
        OLE_COLOR pBorderColor );
    ISectionPtr GetParent ( );
    VARIANT_BOOL GetSuppress ( );
    void PutSuppress (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetCloseAtPageBreak ( );
    void PutCloseAtPageBreak (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetKeepTogether ( );
    void PutKeepTogether (
        VARIANT_BOOL pBool );
    enum CRGraphDataType GetDataType ( );
    enum CRGraphType GetGraphType ( );
    void PutGraphType (
        enum CRGraphType pGraphType );
    _bstr_t GetTitle ( );
    void PutTitle (
        _bstr_t ppTitle );
    _bstr_t GetSubTitle ( );
    void PutSubTitle (
        _bstr_t ppSubTitle );
    _bstr_t GetFootNote ( );
    void PutFootNote (
        _bstr_t ppFootNote );
    _bstr_t GetGroupsTitle ( );
    void PutGroupsTitle (
        _bstr_t ppGroupsTitle );
    _bstr_t GetSeriesTitle ( );
    void PutSeriesTitle (
        _bstr_t ppSeriesTitle );
    _bstr_t GetXAxisTitle ( );
    void PutXAxisTitle (
        _bstr_t ppXAxisTitle );
    _bstr_t GetYAxisTitle ( );
    void PutYAxisTitle (
        _bstr_t ppYAxisTitle );
    _bstr_t GetY2AxisTitle ( );
    void PutY2AxisTitle (
        _bstr_t ppY2AxisTitle );
    double GetMaxDataAxisValue ( );
    void PutMaxDataAxisValue (
        double pMaxDataAxisValue );
    double GetMinDataAxisValue ( );
    void PutMinDataAxisValue (
        double pMinDataAxisValue );
    double GetMaxData2AxisValue ( );
    void PutMaxData2AxisValue (
        double pMaxData2AxisValue );
    double GetMinData2AxisValue ( );
    void PutMinData2AxisValue (
        double pMinData2AxisValue );
    double GetMaxSeriesAxisValue ( );
    void PutMaxSeriesAxisValue (
        double pMaxSeriesAxisValue );
    double GetMinSeriesAxisValue ( );
    void PutMinSeriesAxisValue (
        double pMinSeriesAxisValue );
    enum CRGraphDataPoint GetDataPoint ( );
    void PutDataPoint (
        enum CRGraphDataPoint pDataPoint );
    enum CRGridlineType GetGroupAxisGridline ( );
    void PutGroupAxisGridline (
        enum CRGridlineType pGroupAxisGridline );
    enum CRGridlineType GetSeriesAxisGridline ( );
    void PutSeriesAxisGridline (
        enum CRGridlineType pSeriesAxisGridline );
    enum CRGridlineType GetDataAxisGridline ( );
    void PutDataAxisGridline (
        enum CRGridlineType pDataAxisGridline );
    enum CRGridlineType GetData2AxisGridline ( );
    void PutData2AxisGridline (
        enum CRGridlineType pData2AxisGridline );
    VARIANT_BOOL GetEnableShowLegend ( );
    void PutEnableShowLegend (
        VARIANT_BOOL pEnableShowLegend );
    enum CRLegendPosition GetLegendPosition ( );
    void PutLegendPosition (
        enum CRLegendPosition pLegendPosition );
    enum CRGraphDirection GetGraphDirection ( );
    void PutGraphDirection (
        enum CRGraphDirection pDirection );
    enum CRPieSize GetPieSize ( );
    void PutPieSize (
        enum CRPieSize pPieSize );
    enum CRSliceDetachment GetSliceDetachment ( );
    void PutSliceDetachment (
        enum CRSliceDetachment pSliceDetachment );
    enum CRBarSize GetBarSize ( );
    void PutBarSize (
        enum CRBarSize pBarSize );
    enum CRMarkerSize GetMarkerSize ( );
    void PutMarkerSize (
        enum CRMarkerSize pMarkerSize );
    enum CRMarkerShape GetMarkerShape ( );
    void PutMarkerShape (
        enum CRMarkerShape pMarkerShape );
    enum CRNumberFormat GetDataAxisNumberFormat ( );
    void PutDataAxisNumberFormat (
        enum CRNumberFormat pDataAxisNumberFormat );
    enum CRNumberFormat GetData2AxisNumberFormat ( );
    void PutData2AxisNumberFormat (
        enum CRNumberFormat pData2AxisNumberFormat );
    enum CRNumberFormat GetSeriesAxisNumberFormat ( );
    void PutSeriesAxisNumberFormat (
        enum CRNumberFormat pSeriesAxisNumberFormat );
    VARIANT_BOOL GetAutoRangeDataAxis ( );
    void PutAutoRangeDataAxis (
        VARIANT_BOOL pAutoRangeDataAxis );
    VARIANT_BOOL GetAutoRangeData2Axis ( );
    void PutAutoRangeData2Axis (
        VARIANT_BOOL pAutoRangeData2Axis );
    VARIANT_BOOL GetAutoRangeSeriesAxis ( );
    void PutAutoRangeSeriesAxis (
        VARIANT_BOOL pAutoRangeSeriesAxis );
    enum CRDivisionMethod GetDataAxisDivisionMethod ( );
    void PutDataAxisDivisionMethod (
        enum CRDivisionMethod pDataAxisDivisionMethod );
    enum CRDivisionMethod GetData2AxisDivisionMethod ( );
    void PutData2AxisDivisionMethod (
        enum CRDivisionMethod pData2AxisDivisionMethod );
    enum CRDivisionMethod GetSeriesAxisDivisionMethod ( );
    void PutSeriesAxisDivisionMethod (
        enum CRDivisionMethod pSeriesAxisDivisionMethod );
    long GetDataAxisDivisionNumber ( );
    void PutDataAxisDivisionNumber (
        long pDataAxisDivisionNumber );
    long GetData2AxisDivisionNumber ( );
    void PutData2AxisDivisionNumber (
        long pData2AxisDivisionNumber );
    long GetSeriesAxisDivisionNumber ( );
    void PutSeriesAxisDivisionNumber (
        long pSeriesAxisDivisionNumber );
    enum CRGraphColor GetGraphColor ( );
    void PutGraphColor (
        enum CRGraphColor pGraphColor );
    enum CRNumberFormat GetDataValueNumberFormat ( );
    void PutDataValueNumberFormat (
        enum CRNumberFormat pDataValueNumberFormat );
    enum CRViewingAngle GetViewingAngle ( );
    void PutViewingAngle (
        enum CRViewingAngle pViewingAngle );
    _bstr_t GetZAxisTitle ( );
    void PutZAxisTitle (
        _bstr_t ppZAxisTitle );
    IFieldDefinitionsPtr GetConditionFields ( );
    IObjectSummaryFieldDefinitionsPtr GetSummaryFields ( );
    VARIANT_BOOL GetEnableForEachRecord ( );
    void PutEnableForEachRecord (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetEnableSummarizeValues ( );
    void PutEnableSummarizeValues (
        VARIANT_BOOL pBool );
    ICrossTabObjectPtr GetCrossTabObject ( );
    IFontDisp * GetTitleFont ( );
    void PutRefTitleFont (
        IFontDisp * ppFont );
    IFontDisp * GetSubTitleFont ( );
    void PutRefSubTitleFont (
        IFontDisp * ppFont );
    IFontDisp * GetFootnoteFont ( );
    void PutRefFootnoteFont (
        IFontDisp * ppFont );
    IFontDisp * GetGroupTitleFont ( );
    void PutRefGroupTitleFont (
        IFontDisp * ppFont );
    IFontDisp * GetDataTitleFont ( );
    void PutRefDataTitleFont (
        IFontDisp * ppFont );
    IFontDisp * GetSeriesTitleFont ( );
    void PutRefSeriesTitleFont (
        IFontDisp * ppFont );
    IFontDisp * GetLegendFont ( );
    void PutRefLegendFont (
        IFontDisp * ppFont );
    IFontDisp * GetGroupLabelFont ( );
    void PutRefGroupLabelFont (
        IFontDisp * ppFont );
    IFontDisp * GetDataLabelFont ( );
    void PutRefDataLabelFont (
        IFontDisp * ppFont );
    IFontDisp * GetSeriesLabelFont ( );
    void PutRefSeriesLabelFont (
        IFontDisp * ppFont );
    VARIANT_BOOL GetIsTitleByDefault ( );
    void PutIsTitleByDefault (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetIsSubTitleByDefault ( );
    void PutIsSubTitleByDefault (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetIsFootnoteByDefault ( );
    void PutIsFootnoteByDefault (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetIsXAxisTitleByDefault ( );
    void PutIsXAxisTitleByDefault (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetIsYAxisTitleByDefault ( );
    void PutIsYAxisTitleByDefault (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetIsZAxisTitleByDefault ( );
    void PutIsZAxisTitleByDefault (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetEnableAutoScaleDataAxis ( );
    void PutEnableAutoScaleDataAxis (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetEnableAutoScaleData2Axis ( );
    void PutEnableAutoScaleData2Axis (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetEnableAutoScaleSeriesAxis ( );
    void PutEnableAutoScaleSeriesAxis (
        VARIANT_BOOL pBool );
    enum CRPieLegendLayout GetLegendLayout ( );
    void PutLegendLayout (
        enum CRPieLegendLayout pLegendLayout );
    enum CRSortDirection GetConditionFieldSortOrder (
        int index );
    void PutConditionFieldSortOrder (
        int index,
        enum CRSortDirection pSortOrder );
    _variant_t GetSpecifiedGroups (
        int index );
    void PutSpecifiedGroups (
        int index,
        const _variant_t & pSpecifedGroupArray );
    _bstr_t GetDataTitle ( );
    void PutDataTitle (
        _bstr_t ppDataTitle );
    _bstr_t GetData2Title ( );
    void PutData2Title (
        _bstr_t ppData2Title );
    VARIANT_BOOL GetIsGroupsTitleByDefault ( );
    void PutIsGroupsTitleByDefault (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetIsSeriesTitleByDefault ( );
    void PutIsSeriesTitleByDefault (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetIsDataTitleByDefault ( );
    void PutIsDataTitleByDefault (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetIsData2TitleByDefault ( );
    void PutIsData2TitleByDefault (
        VARIANT_BOOL pBool );
    IFontDisp * GetData2TitleFont ( );
    void PutRefData2TitleFont (
        IFontDisp * ppFont );
    IFontDisp * GetData2LabelFont ( );
    void PutRefData2LabelFont (
        IFontDisp * ppFont );
    _bstr_t GetConditionFormula (
        const _variant_t & FormulaType );
    void PutConditionFormula (
        const _variant_t & FormulaType,
        _bstr_t pVal );
    _bstr_t GetCssClass ( );
    void PutCssClass (
        _bstr_t ppCssClass );
    enum CRHyperlinkType GetHyperlinkType ( );
    void PutHyperlinkType (
        enum CRHyperlinkType pType );
    _bstr_t GetHyperlinkText ( );
    void PutHyperlinkText (
        _bstr_t pText );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Name (
        BSTR * ppName ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR ppName ) = 0;
    virtual HRESULT __stdcall get_Kind (
        enum CRObjectKind * pObjectKind ) = 0;
    virtual HRESULT __stdcall get_Left (
        long * pLeft ) = 0;
    virtual HRESULT __stdcall put_Left (
        long pLeft ) = 0;
    virtual HRESULT __stdcall get_Top (
        long * pTop ) = 0;
    virtual HRESULT __stdcall put_Top (
        long pTop ) = 0;
    virtual HRESULT __stdcall get_Width (
        long * pWidth ) = 0;
    virtual HRESULT __stdcall put_Width (
        long pWidth ) = 0;
    virtual HRESULT __stdcall get_Height (
        long * pHeight ) = 0;
    virtual HRESULT __stdcall put_Height (
        long pHeight ) = 0;
    virtual HRESULT __stdcall get_LeftLineStyle (
        enum CRLineStyle * pLeftLineStyle ) = 0;
    virtual HRESULT __stdcall put_LeftLineStyle (
        enum CRLineStyle pLeftLineStyle ) = 0;
    virtual HRESULT __stdcall get_RightLineStyle (
        enum CRLineStyle * pRightLineStyle ) = 0;
    virtual HRESULT __stdcall put_RightLineStyle (
        enum CRLineStyle pRightLineStyle ) = 0;
    virtual HRESULT __stdcall get_TopLineStyle (
        enum CRLineStyle * pTopLineStyle ) = 0;
    virtual HRESULT __stdcall put_TopLineStyle (
        enum CRLineStyle pTopLineStyle ) = 0;
    virtual HRESULT __stdcall get_BottomLineStyle (
        enum CRLineStyle * pBottomLineStyle ) = 0;
    virtual HRESULT __stdcall put_BottomLineStyle (
        enum CRLineStyle pBottomLineStyle ) = 0;
    virtual HRESULT __stdcall get_HasDropShadow (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_HasDropShadow (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_BackColor (
        OLE_COLOR * pBackColor ) = 0;
    virtual HRESULT __stdcall put_BackColor (
        OLE_COLOR pBackColor ) = 0;
    virtual HRESULT __stdcall get_BorderColor (
        OLE_COLOR * pBorderColor ) = 0;
    virtual HRESULT __stdcall put_BorderColor (
        OLE_COLOR pBorderColor ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct ISection * * ppParent ) = 0;
    virtual HRESULT __stdcall get_Suppress (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_Suppress (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_CloseAtPageBreak (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_CloseAtPageBreak (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_KeepTogether (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_KeepTogether (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_DataType (
        enum CRGraphDataType * pDataType ) = 0;
    virtual HRESULT __stdcall get_GraphType (
        enum CRGraphType * pGraphType ) = 0;
    virtual HRESULT __stdcall put_GraphType (
        enum CRGraphType pGraphType ) = 0;
    virtual HRESULT __stdcall get_Title (
        BSTR * ppTitle ) = 0;
    virtual HRESULT __stdcall put_Title (
        BSTR ppTitle ) = 0;
    virtual HRESULT __stdcall get_SubTitle (
        BSTR * ppSubTitle ) = 0;
    virtual HRESULT __stdcall put_SubTitle (
        BSTR ppSubTitle ) = 0;
    virtual HRESULT __stdcall get_FootNote (
        BSTR * ppFootNote ) = 0;
    virtual HRESULT __stdcall put_FootNote (
        BSTR ppFootNote ) = 0;
    virtual HRESULT __stdcall get_GroupsTitle (
        BSTR * ppGroupsTitle ) = 0;
    virtual HRESULT __stdcall put_GroupsTitle (
        BSTR ppGroupsTitle ) = 0;
    virtual HRESULT __stdcall get_SeriesTitle (
        BSTR * ppSeriesTitle ) = 0;
    virtual HRESULT __stdcall put_SeriesTitle (
        BSTR ppSeriesTitle ) = 0;
    virtual HRESULT __stdcall get_XAxisTitle (
        BSTR * ppXAxisTitle ) = 0;
    virtual HRESULT __stdcall put_XAxisTitle (
        BSTR ppXAxisTitle ) = 0;
    virtual HRESULT __stdcall get_YAxisTitle (
        BSTR * ppYAxisTitle ) = 0;
    virtual HRESULT __stdcall put_YAxisTitle (
        BSTR ppYAxisTitle ) = 0;
    virtual HRESULT __stdcall get_Y2AxisTitle (
        BSTR * ppY2AxisTitle ) = 0;
    virtual HRESULT __stdcall put_Y2AxisTitle (
        BSTR ppY2AxisTitle ) = 0;
    virtual HRESULT __stdcall get_MaxDataAxisValue (
        double * pMaxDataAxisValue ) = 0;
    virtual HRESULT __stdcall put_MaxDataAxisValue (
        double pMaxDataAxisValue ) = 0;
    virtual HRESULT __stdcall get_MinDataAxisValue (
        double * pMinDataAxisValue ) = 0;
    virtual HRESULT __stdcall put_MinDataAxisValue (
        double pMinDataAxisValue ) = 0;
    virtual HRESULT __stdcall get_MaxData2AxisValue (
        double * pMaxData2AxisValue ) = 0;
    virtual HRESULT __stdcall put_MaxData2AxisValue (
        double pMaxData2AxisValue ) = 0;
    virtual HRESULT __stdcall get_MinData2AxisValue (
        double * pMinData2AxisValue ) = 0;
    virtual HRESULT __stdcall put_MinData2AxisValue (
        double pMinData2AxisValue ) = 0;
    virtual HRESULT __stdcall get_MaxSeriesAxisValue (
        double * pMaxSeriesAxisValue ) = 0;
    virtual HRESULT __stdcall put_MaxSeriesAxisValue (
        double pMaxSeriesAxisValue ) = 0;
    virtual HRESULT __stdcall get_MinSeriesAxisValue (
        double * pMinSeriesAxisValue ) = 0;
    virtual HRESULT __stdcall put_MinSeriesAxisValue (
        double pMinSeriesAxisValue ) = 0;
    virtual HRESULT __stdcall get_DataPoint (
        enum CRGraphDataPoint * pDataPoint ) = 0;
    virtual HRESULT __stdcall put_DataPoint (
        enum CRGraphDataPoint pDataPoint ) = 0;
    virtual HRESULT __stdcall get_GroupAxisGridline (
        enum CRGridlineType * pGroupAxisGridline ) = 0;
    virtual HRESULT __stdcall put_GroupAxisGridline (
        enum CRGridlineType pGroupAxisGridline ) = 0;
    virtual HRESULT __stdcall get_SeriesAxisGridline (
        enum CRGridlineType * pSeriesAxisGridline ) = 0;
    virtual HRESULT __stdcall put_SeriesAxisGridline (
        enum CRGridlineType pSeriesAxisGridline ) = 0;
    virtual HRESULT __stdcall get_DataAxisGridline (
        enum CRGridlineType * pDataAxisGridline ) = 0;
    virtual HRESULT __stdcall put_DataAxisGridline (
        enum CRGridlineType pDataAxisGridline ) = 0;
    virtual HRESULT __stdcall get_Data2AxisGridline (
        enum CRGridlineType * pData2AxisGridline ) = 0;
    virtual HRESULT __stdcall put_Data2AxisGridline (
        enum CRGridlineType pData2AxisGridline ) = 0;
    virtual HRESULT __stdcall get_EnableShowLegend (
        VARIANT_BOOL * pEnableShowLegend ) = 0;
    virtual HRESULT __stdcall put_EnableShowLegend (
        VARIANT_BOOL pEnableShowLegend ) = 0;
    virtual HRESULT __stdcall get_LegendPosition (
        enum CRLegendPosition * pLegendPosition ) = 0;
    virtual HRESULT __stdcall put_LegendPosition (
        enum CRLegendPosition pLegendPosition ) = 0;
    virtual HRESULT __stdcall get_GraphDirection (
        enum CRGraphDirection * pDirection ) = 0;
    virtual HRESULT __stdcall put_GraphDirection (
        enum CRGraphDirection pDirection ) = 0;
    virtual HRESULT __stdcall get_PieSize (
        enum CRPieSize * pPieSize ) = 0;
    virtual HRESULT __stdcall put_PieSize (
        enum CRPieSize pPieSize ) = 0;
    virtual HRESULT __stdcall get_SliceDetachment (
        enum CRSliceDetachment * pSliceDetachment ) = 0;
    virtual HRESULT __stdcall put_SliceDetachment (
        enum CRSliceDetachment pSliceDetachment ) = 0;
    virtual HRESULT __stdcall get_BarSize (
        enum CRBarSize * pBarSize ) = 0;
    virtual HRESULT __stdcall put_BarSize (
        enum CRBarSize pBarSize ) = 0;
    virtual HRESULT __stdcall get_MarkerSize (
        enum CRMarkerSize * pMarkerSize ) = 0;
    virtual HRESULT __stdcall put_MarkerSize (
        enum CRMarkerSize pMarkerSize ) = 0;
    virtual HRESULT __stdcall get_MarkerShape (
        enum CRMarkerShape * pMarkerShape ) = 0;
    virtual HRESULT __stdcall put_MarkerShape (
        enum CRMarkerShape pMarkerShape ) = 0;
    virtual HRESULT __stdcall get_DataAxisNumberFormat (
        enum CRNumberFormat * pDataAxisNumberFormat ) = 0;
    virtual HRESULT __stdcall put_DataAxisNumberFormat (
        enum CRNumberFormat pDataAxisNumberFormat ) = 0;
    virtual HRESULT __stdcall get_Data2AxisNumberFormat (
        enum CRNumberFormat * pData2AxisNumberFormat ) = 0;
    virtual HRESULT __stdcall put_Data2AxisNumberFormat (
        enum CRNumberFormat pData2AxisNumberFormat ) = 0;
    virtual HRESULT __stdcall get_SeriesAxisNumberFormat (
        enum CRNumberFormat * pSeriesAxisNumberFormat ) = 0;
    virtual HRESULT __stdcall put_SeriesAxisNumberFormat (
        enum CRNumberFormat pSeriesAxisNumberFormat ) = 0;
    virtual HRESULT __stdcall get_AutoRangeDataAxis (
        VARIANT_BOOL * pAutoRangeDataAxis ) = 0;
    virtual HRESULT __stdcall put_AutoRangeDataAxis (
        VARIANT_BOOL pAutoRangeDataAxis ) = 0;
    virtual HRESULT __stdcall get_AutoRangeData2Axis (
        VARIANT_BOOL * pAutoRangeData2Axis ) = 0;
    virtual HRESULT __stdcall put_AutoRangeData2Axis (
        VARIANT_BOOL pAutoRangeData2Axis ) = 0;
    virtual HRESULT __stdcall get_AutoRangeSeriesAxis (
        VARIANT_BOOL * pAutoRangeSeriesAxis ) = 0;
    virtual HRESULT __stdcall put_AutoRangeSeriesAxis (
        VARIANT_BOOL pAutoRangeSeriesAxis ) = 0;
    virtual HRESULT __stdcall get_DataAxisDivisionMethod (
        enum CRDivisionMethod * pDataAxisDivisionMethod ) = 0;
    virtual HRESULT __stdcall put_DataAxisDivisionMethod (
        enum CRDivisionMethod pDataAxisDivisionMethod ) = 0;
    virtual HRESULT __stdcall get_Data2AxisDivisionMethod (
        enum CRDivisionMethod * pData2AxisDivisionMethod ) = 0;
    virtual HRESULT __stdcall put_Data2AxisDivisionMethod (
        enum CRDivisionMethod pData2AxisDivisionMethod ) = 0;
    virtual HRESULT __stdcall get_SeriesAxisDivisionMethod (
        enum CRDivisionMethod * pSeriesAxisDivisionMethod ) = 0;
    virtual HRESULT __stdcall put_SeriesAxisDivisionMethod (
        enum CRDivisionMethod pSeriesAxisDivisionMethod ) = 0;
    virtual HRESULT __stdcall get_DataAxisDivisionNumber (
        long * pDataAxisDivisionNumber ) = 0;
    virtual HRESULT __stdcall put_DataAxisDivisionNumber (
        long pDataAxisDivisionNumber ) = 0;
    virtual HRESULT __stdcall get_Data2AxisDivisionNumber (
        long * pData2AxisDivisionNumber ) = 0;
    virtual HRESULT __stdcall put_Data2AxisDivisionNumber (
        long pData2AxisDivisionNumber ) = 0;
    virtual HRESULT __stdcall get_SeriesAxisDivisionNumber (
        long * pSeriesAxisDivisionNumber ) = 0;
    virtual HRESULT __stdcall put_SeriesAxisDivisionNumber (
        long pSeriesAxisDivisionNumber ) = 0;
    virtual HRESULT __stdcall get_GraphColor (
        enum CRGraphColor * pGraphColor ) = 0;
    virtual HRESULT __stdcall put_GraphColor (
        enum CRGraphColor pGraphColor ) = 0;
    virtual HRESULT __stdcall get_DataValueNumberFormat (
        enum CRNumberFormat * pDataValueNumberFormat ) = 0;
    virtual HRESULT __stdcall put_DataValueNumberFormat (
        enum CRNumberFormat pDataValueNumberFormat ) = 0;
    virtual HRESULT __stdcall get_ViewingAngle (
        enum CRViewingAngle * pViewingAngle ) = 0;
    virtual HRESULT __stdcall put_ViewingAngle (
        enum CRViewingAngle pViewingAngle ) = 0;
    virtual HRESULT __stdcall get_ZAxisTitle (
        BSTR * ppZAxisTitle ) = 0;
    virtual HRESULT __stdcall put_ZAxisTitle (
        BSTR ppZAxisTitle ) = 0;
    virtual HRESULT __stdcall get_ConditionFields (
        struct IFieldDefinitions * * ppConditionFields ) = 0;
    virtual HRESULT __stdcall get_SummaryFields (
        struct IObjectSummaryFieldDefinitions * * ppSummaryFields ) = 0;
    virtual HRESULT __stdcall get_EnableForEachRecord (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_EnableForEachRecord (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_EnableSummarizeValues (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_EnableSummarizeValues (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_CrossTabObject (
        struct ICrossTabObject * * ppCrossTabObject ) = 0;
    virtual HRESULT __stdcall get_TitleFont (
        IFontDisp * * ppFont ) = 0;
    virtual HRESULT __stdcall putref_TitleFont (
        IFontDisp * ppFont ) = 0;
    virtual HRESULT __stdcall get_SubTitleFont (
        IFontDisp * * ppFont ) = 0;
    virtual HRESULT __stdcall putref_SubTitleFont (
        IFontDisp * ppFont ) = 0;
    virtual HRESULT __stdcall get_FootnoteFont (
        IFontDisp * * ppFont ) = 0;
    virtual HRESULT __stdcall putref_FootnoteFont (
        IFontDisp * ppFont ) = 0;
    virtual HRESULT __stdcall get_GroupTitleFont (
        IFontDisp * * ppFont ) = 0;
    virtual HRESULT __stdcall putref_GroupTitleFont (
        IFontDisp * ppFont ) = 0;
    virtual HRESULT __stdcall get_DataTitleFont (
        IFontDisp * * ppFont ) = 0;
    virtual HRESULT __stdcall putref_DataTitleFont (
        IFontDisp * ppFont ) = 0;
    virtual HRESULT __stdcall get_SeriesTitleFont (
        IFontDisp * * ppFont ) = 0;
    virtual HRESULT __stdcall putref_SeriesTitleFont (
        IFontDisp * ppFont ) = 0;
    virtual HRESULT __stdcall get_LegendFont (
        IFontDisp * * ppFont ) = 0;
    virtual HRESULT __stdcall putref_LegendFont (
        IFontDisp * ppFont ) = 0;
    virtual HRESULT __stdcall get_GroupLabelFont (
        IFontDisp * * ppFont ) = 0;
    virtual HRESULT __stdcall putref_GroupLabelFont (
        IFontDisp * ppFont ) = 0;
    virtual HRESULT __stdcall get_DataLabelFont (
        IFontDisp * * ppFont ) = 0;
    virtual HRESULT __stdcall putref_DataLabelFont (
        IFontDisp * ppFont ) = 0;
    virtual HRESULT __stdcall get_SeriesLabelFont (
        IFontDisp * * ppFont ) = 0;
    virtual HRESULT __stdcall putref_SeriesLabelFont (
        IFontDisp * ppFont ) = 0;
    virtual HRESULT __stdcall get_IsTitleByDefault (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_IsTitleByDefault (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_IsSubTitleByDefault (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_IsSubTitleByDefault (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_IsFootnoteByDefault (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_IsFootnoteByDefault (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_IsXAxisTitleByDefault (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_IsXAxisTitleByDefault (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_IsYAxisTitleByDefault (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_IsYAxisTitleByDefault (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_IsZAxisTitleByDefault (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_IsZAxisTitleByDefault (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_EnableAutoScaleDataAxis (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_EnableAutoScaleDataAxis (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_EnableAutoScaleData2Axis (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_EnableAutoScaleData2Axis (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_EnableAutoScaleSeriesAxis (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_EnableAutoScaleSeriesAxis (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_LegendLayout (
        enum CRPieLegendLayout * pLegendLayout ) = 0;
    virtual HRESULT __stdcall put_LegendLayout (
        enum CRPieLegendLayout pLegendLayout ) = 0;
    virtual HRESULT __stdcall get_ConditionFieldSortOrder (
        int index,
        enum CRSortDirection * pSortOrder ) = 0;
    virtual HRESULT __stdcall put_ConditionFieldSortOrder (
        int index,
        enum CRSortDirection pSortOrder ) = 0;
    virtual HRESULT __stdcall get_SpecifiedGroups (
        int index,
        VARIANT * pSpecifedGroupArray ) = 0;
    virtual HRESULT __stdcall put_SpecifiedGroups (
        int index,
        VARIANT pSpecifedGroupArray ) = 0;
    virtual HRESULT __stdcall get_DataTitle (
        BSTR * ppDataTitle ) = 0;
    virtual HRESULT __stdcall put_DataTitle (
        BSTR ppDataTitle ) = 0;
    virtual HRESULT __stdcall get_Data2Title (
        BSTR * ppData2Title ) = 0;
    virtual HRESULT __stdcall put_Data2Title (
        BSTR ppData2Title ) = 0;
    virtual HRESULT __stdcall get_IsGroupsTitleByDefault (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_IsGroupsTitleByDefault (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_IsSeriesTitleByDefault (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_IsSeriesTitleByDefault (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_IsDataTitleByDefault (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_IsDataTitleByDefault (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_IsData2TitleByDefault (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_IsData2TitleByDefault (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_Data2TitleFont (
        IFontDisp * * ppFont ) = 0;
    virtual HRESULT __stdcall putref_Data2TitleFont (
        IFontDisp * ppFont ) = 0;
    virtual HRESULT __stdcall get_Data2LabelFont (
        IFontDisp * * ppFont ) = 0;
    virtual HRESULT __stdcall putref_Data2LabelFont (
        IFontDisp * ppFont ) = 0;
    virtual HRESULT __stdcall get_ConditionFormula (
        VARIANT FormulaType,
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_ConditionFormula (
        VARIANT FormulaType,
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_CssClass (
        BSTR * ppCssClass ) = 0;
    virtual HRESULT __stdcall put_CssClass (
        BSTR ppCssClass ) = 0;
    virtual HRESULT __stdcall get_HyperlinkType (
        enum CRHyperlinkType * pType ) = 0;
    virtual HRESULT __stdcall put_HyperlinkType (
        enum CRHyperlinkType pType ) = 0;
    virtual HRESULT __stdcall get_HyperlinkText (
        BSTR * pText ) = 0;
    virtual HRESULT __stdcall put_HyperlinkText (
        BSTR pText ) = 0;
};

enum CRGraphType
{
    crSideBySideBarGraph = 0,
    crStackedBarGraph = 1,
    crPercentBarGraph = 2,
    crFaked3DSideBySideBarGraph = 3,
    crFaked3DStackedBarGraph = 4,
    crFaked3DPercentBarGraph = 5,
    crRegularLineGraph = 10,
    crStackedLineGraph = 11,
    crPercentageLineGraph = 12,
    crLineGraphWithMarkers = 13,
    crStackedLineGraphWithMarkers = 14,
    crPercentageLineGraphWithMarkers = 15,
    crStackedAreaGraph = 21,
    crPercentAreaGraph = 22,
    crFaked3DStackedAreaGraph = 24,
    crFaked3DPercentAreaGraph = 25,
    crRegularPieGraph = 30,
    crFaked3DRegularPieGraph = 31,
    crMultiplePieGraph = 32,
    crMultipleProportionalPieGraph = 33,
    crRegularDoughnutGraph = 40,
    crMultipleDoughnutGraph = 41,
    crMultipleProportionalDoughnutGraph = 42,
    crThreeDRegularGraph = 50,
    crThreeDPyramidGraph = 51,
    crThreeDOctagonGraph = 52,
    crThreeDCutCornersGraph = 53,
    crThreeDSurfaceRegularGraph = 60,
    crThreeDSurfaceWithSidesGraph = 61,
    crThreeDSurfaceHoneycombGraph = 62,
    crXyScatterGraph = 70,
    crRegularRadarGraph = 80,
    crStackedRadarGraph = 81,
    crRegularBubbleGraph = 90,
    crHighLowGraph = 100,
    crHighLowOpenCloseGraph = 104,
    crUnknownGraph = 1000
};

enum CRGraphDataPoint
{
    crNone = 0,
    crShowLabel = 1,
    crShowValue = 2
};

enum CRGridlineType
{
    crNoGridlines = 0,
    crMinorGridlines = 1,
    crMajorGridlines = 2,
    crMajorAndMinorGridlines = 3
};

enum CRLegendPosition
{
    crPlaceRight = 4,
    crPlaceLeft = 5,
    crPlaceBottom = 6,
    crPlaceCustom = 7
};

enum CRGraphDirection
{
    crHorizontalGraph = 0,
    crVerticalGraph = 1
};

enum CRPieSize
{
    crMinimumPieSize = 64,
    crSmallPieSize = 48,
    crAveragePieSize = 32,
    crLargePieSize = 16,
    crMaximumPieSize = 0
};

enum CRSliceDetachment
{
    crNoDetachment = 0,
    crSmallestSlice = 1,
    crLargestSlice = 2
};

enum CRBarSize
{
    crMinimumBarSize = 0,
    crSmallBarSize = 1,
    crAverageBarSize = 2,
    crLargeBarSize = 3,
    crMaximumBarSize = 4
};

enum CRMarkerSize
{
    crSmallMarkers = 0,
    crMediumSmallMarkers = 1,
    crMediumMarkers = 2,
    crMediumLargeMarkers = 3,
    crLargeMarkers = 4
};

enum CRMarkerShape
{
    crRectangleShape = 1,
    crCircleShape = 4,
    crDiamondShape = 5,
    crTriangleShape = 8
};

enum CRNumberFormat
{
    crNoDecimal = 0,
    crOneDecimal = 1,
    crTwoDecimal = 2,
    crCurrencyNoDecimal = 3,
    crCurrencyTwoDecimal = 4,
    crPercentNoDecimal = 5,
    crPercentOneDecimal = 6,
    crPercentTwoDecimal = 7,
    crCustomNumberFormat = 8,
    crThousandsNoDecimal = 9,
    crMillionsNoDecimal = 10,
    crCurrencyThousands = 11,
    crCurrencyMillions = 12
};

enum CRDivisionMethod
{
    crAutomaticDivision = 0,
    crManualDivision = 1
};

enum CRGraphColor
{
    crColorGraph = 0,
    crBlackAndWhiteGraph = 1
};

enum CRViewingAngle
{
    crStandardView = 1,
    crTallView = 2,
    crTopView = 3,
    crDistortedView = 4,
    crShortView = 5,
    crGroupEyeView = 6,
    crGroupEmphasisView = 7,
    crFewSeriesView = 8,
    crFewGroupsView = 9,
    crDistortedStdView = 10,
    crThickGroupsView = 11,
    crShorterView = 12,
    crThickSeriesView = 13,
    crThickStdView = 14,
    crBirdsEyeView = 15,
    crMaxView = 16
};

struct __declspec(uuid("af376851-6120-4e28-96dd-63fd2dc27b7a"))
IFieldDefinitions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IFieldDefinitionPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IReportObjectPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    IFieldDefinitionPtr GetItem (
        long index );
    long GetCount ( );
    IReportObjectPtr GetParent ( );
    HRESULT Add (
        const _variant_t & Field );
    HRESULT Delete (
        const _variant_t & Field );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * ppNewEnum ) = 0;
    virtual HRESULT __stdcall get_Item (
        long index,
        struct IFieldDefinition * * ppFieldDefinition ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * pCount ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct IReportObject * * ppReportObject ) = 0;
    virtual HRESULT __stdcall raw_Add (
        VARIANT Field ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT Field ) = 0;
};

enum CRPieLegendLayout
{
    crPercentLayout = 0,
    crAmountLayout = 1,
    crBothLayout = 2,
    crNoneLayout = 3
};

enum CRTopBottomNGroupSortOrder
{
    crAllGroupsUnsorted = 0,
    crAllGroupsSorted = 1,
    crTopNGroups = 2,
    crBottomNGroups = 3,
    crUnknownGroupsSortOrder = 10
};

enum CRConvertDateTimeType
{
    crConvertDateTimeToString = 0,
    crConvertDateTimeToDate = 1,
    crKeepDateTimeType = 2
};

struct __declspec(uuid("af376818-6120-4e28-96dd-63fd2dc27b7a"))
IDatabase : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTables))
    IDatabaseTablesPtr Tables;
    __declspec(property(get=GetParent))
    IReportPtr Parent;
    __declspec(property(get=GetLinks))
    ITableLinksPtr Links;
    __declspec(property(get=GetDictionaryLocation,put=PutDictionaryLocation))
    _bstr_t DictionaryLocation;

    //
    // Wrapper methods for error-handling
    //

    IDatabaseTablesPtr GetTables ( );
    IReportPtr GetParent ( );
    HRESULT LogOnServer (
        _bstr_t pDllName,
        _bstr_t pServerName,
        const _variant_t & pDatabaseName = vtMissing,
        const _variant_t & pUserID = vtMissing,
        const _variant_t & pPassword = vtMissing );
    HRESULT LogOffServer (
        _bstr_t pDllName,
        _bstr_t pServerName,
        const _variant_t & pDatabaseName = vtMissing,
        const _variant_t & pUserID = vtMissing,
        const _variant_t & pPassword = vtMissing );
    HRESULT SetDataSource (
        const _variant_t & data,
        const _variant_t & dataTag = vtMissing,
        const _variant_t & tableNumber = vtMissing );
    HRESULT Verify ( );
    ITableLinksPtr GetLinks ( );
    HRESULT AddOLEDBSource (
        _bstr_t pConnectionString,
        _bstr_t pTableName );
    HRESULT AddADOCommand (
        const _variant_t & pConnection,
        const _variant_t & pCommand );
    HRESULT LogOnServerEx (
        _bstr_t pDllName,
        _bstr_t pServerName,
        const _variant_t & pDatabaseName = vtMissing,
        const _variant_t & pUserID = vtMissing,
        const _variant_t & pPassword = vtMissing,
        const _variant_t & pServerType = vtMissing,
        const _variant_t & pConnectionString = vtMissing );
    _bstr_t GetDictionaryLocation ( );
    void PutDictionaryLocation (
        _bstr_t ppLocation );
    HRESULT LogOnServerWithPrivateInfo (
        _bstr_t pDllName,
        const _variant_t & privateInfo );
    HRESULT ConvertDatabaseDriver (
        _bstr_t pDllName,
        VARIANT_BOOL blDoImmediateConvert );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Tables (
        struct IDatabaseTables * * ppTables ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct IReport * * ppParent ) = 0;
    virtual HRESULT __stdcall raw_LogOnServer (
        BSTR pDllName,
        BSTR pServerName,
        VARIANT pDatabaseName = vtMissing,
        VARIANT pUserID = vtMissing,
        VARIANT pPassword = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_LogOffServer (
        BSTR pDllName,
        BSTR pServerName,
        VARIANT pDatabaseName = vtMissing,
        VARIANT pUserID = vtMissing,
        VARIANT pPassword = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_SetDataSource (
        VARIANT data,
        VARIANT dataTag = vtMissing,
        VARIANT tableNumber = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_Verify ( ) = 0;
    virtual HRESULT __stdcall get_Links (
        struct ITableLinks * * ppLinks ) = 0;
    virtual HRESULT __stdcall raw_AddOLEDBSource (
        BSTR pConnectionString,
        BSTR pTableName ) = 0;
    virtual HRESULT __stdcall raw_AddADOCommand (
        VARIANT pConnection,
        VARIANT pCommand ) = 0;
    virtual HRESULT __stdcall raw_LogOnServerEx (
        BSTR pDllName,
        BSTR pServerName,
        VARIANT pDatabaseName = vtMissing,
        VARIANT pUserID = vtMissing,
        VARIANT pPassword = vtMissing,
        VARIANT pServerType = vtMissing,
        VARIANT pConnectionString = vtMissing ) = 0;
    virtual HRESULT __stdcall get_DictionaryLocation (
        BSTR * ppLocation ) = 0;
    virtual HRESULT __stdcall put_DictionaryLocation (
        BSTR ppLocation ) = 0;
    virtual HRESULT __stdcall raw_LogOnServerWithPrivateInfo (
        BSTR pDllName,
        VARIANT privateInfo ) = 0;
    virtual HRESULT __stdcall raw_ConvertDatabaseDriver (
        BSTR pDllName,
        VARIANT_BOOL blDoImmediateConvert ) = 0;
};

struct __declspec(uuid("af376819-6120-4e28-96dd-63fd2dc27b7a"))
IDatabaseTables : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IDatabaseTablePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDatabasePtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    IDatabaseTablePtr GetItem (
        long index );
    long GetCount ( );
    IDatabasePtr GetParent ( );
    HRESULT Add (
        _bstr_t pLocation,
        const _variant_t & pSubLocation = vtMissing,
        const _variant_t & pConnectInfo = vtMissing,
        const _variant_t & tableType = vtMissing,
        const _variant_t & pDllName = vtMissing,
        const _variant_t & pServerName = vtMissing,
        const _variant_t & pServerType = vtMissing,
        const _variant_t & pDatabaseName = vtMissing,
        const _variant_t & pUserID = vtMissing,
        const _variant_t & pPassword = vtMissing );
    HRESULT Delete (
        long index );
    HRESULT AddStoredProcedure (
        _bstr_t pLocation,
        const _variant_t & pSubLocation = vtMissing,
        const _variant_t & pConnectInfo = vtMissing,
        const _variant_t & tableType = vtMissing,
        const _variant_t & pDllName = vtMissing,
        const _variant_t & pServerName = vtMissing,
        const _variant_t & pServerType = vtMissing,
        const _variant_t & pDatabaseName = vtMissing,
        const _variant_t & pUserID = vtMissing,
        const _variant_t & pPassword = vtMissing,
        const _variant_t & paramValueInfos = vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * ppNewEnum ) = 0;
    virtual HRESULT __stdcall get_Item (
        long index,
        struct IDatabaseTable * * ppDatabaseTable ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * pCount ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct IDatabase * * ppParent ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR pLocation,
        VARIANT pSubLocation = vtMissing,
        VARIANT pConnectInfo = vtMissing,
        VARIANT tableType = vtMissing,
        VARIANT pDllName = vtMissing,
        VARIANT pServerName = vtMissing,
        VARIANT pServerType = vtMissing,
        VARIANT pDatabaseName = vtMissing,
        VARIANT pUserID = vtMissing,
        VARIANT pPassword = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        long index ) = 0;
    virtual HRESULT __stdcall raw_AddStoredProcedure (
        BSTR pLocation,
        VARIANT pSubLocation = vtMissing,
        VARIANT pConnectInfo = vtMissing,
        VARIANT tableType = vtMissing,
        VARIANT pDllName = vtMissing,
        VARIANT pServerName = vtMissing,
        VARIANT pServerType = vtMissing,
        VARIANT pDatabaseName = vtMissing,
        VARIANT pUserID = vtMissing,
        VARIANT pPassword = vtMissing,
        VARIANT paramValueInfos = vtMissing ) = 0;
};

struct __declspec(uuid("af37681a-6120-4e28-96dd-63fd2dc27b7a"))
IDatabaseTable : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetParent))
    IDatabasePtr Parent;
    __declspec(property(get=GetLocation,put=PutLocation))
    _bstr_t Location;
    __declspec(property(get=GetFields))
    IDatabaseFieldDefinitionsPtr Fields;
    __declspec(property(get=GetSubLocation))
    _bstr_t SubLocation;
    __declspec(property(get=GetConnectBufferString,put=PutConnectBufferString))
    _bstr_t ConnectBufferString;
    __declspec(property(get=GetConnectionProperties))
    INameValuePairsPtr ConnectionProperties;
    __declspec(property(get=GetDllName,put=PutDllName))
    _bstr_t DllName;
    __declspec(property(get=GetDecriptiveName))
    _bstr_t DecriptiveName;
    __declspec(property(get=GetLogOnServerName))
    _bstr_t LogOnServerName;
    __declspec(property(get=GetLogOnDatabaseName))
    _bstr_t LogOnDatabaseName;
    __declspec(property(get=GetLogOnUserID))
    _bstr_t LogOnUserID;
    __declspec(property(get=GetSessionUserID))
    _bstr_t SessionUserID;
    __declspec(property(get=GetDatabaseType))
    enum CRDatabaseType DatabaseType;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t ppName );
    _bstr_t GetLocation ( );
    void PutLocation (
        _bstr_t ppLocation );
    IDatabaseFieldDefinitionsPtr GetFields ( );
    HRESULT SetPrivateData (
        long dataTag,
        const _variant_t & data );
    IDatabasePtr GetParent ( );
    HRESULT SetDataSource (
        const _variant_t & data,
        const _variant_t & dataTag = vtMissing );
    _bstr_t GetDllName ( );
    _bstr_t GetDecriptiveName ( );
    _bstr_t GetLogOnServerName ( );
    _bstr_t GetLogOnDatabaseName ( );
    _bstr_t GetLogOnUserID ( );
    _bstr_t GetSessionUserID ( );
    VARIANT_BOOL TestConnectivity ( );
    HRESULT SetLogOnInfo (
        _bstr_t pServerName,
        const _variant_t & pDatabaseName = vtMissing,
        const _variant_t & pUserID = vtMissing,
        const _variant_t & pPassword = vtMissing );
    HRESULT SetSessionInfo (
        _bstr_t pSessionUserID,
        _bstr_t pSessionPassword );
    enum CRDatabaseType GetDatabaseType ( );
    HRESULT CheckDifferences (
        long * pDifferences,
        VARIANT * reserved );
    _bstr_t GetSubLocation ( );
    HRESULT SetTableLocation (
        _bstr_t pLocation,
        _bstr_t pSubLocation,
        _bstr_t pConnectBufferSting );
    _bstr_t GetConnectBufferString ( );
    void PutConnectBufferString (
        _bstr_t ppConnectBufferString );
    void PutDllName (
        _bstr_t ppDllName );
    INameValuePairsPtr GetConnectionProperties ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Name (
        BSTR * ppName ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR ppName ) = 0;
    virtual HRESULT __stdcall get_Location (
        BSTR * ppLocation ) = 0;
    virtual HRESULT __stdcall put_Location (
        BSTR ppLocation ) = 0;
    virtual HRESULT __stdcall get_Fields (
        struct IDatabaseFieldDefinitions * * ppFieldDefinitions ) = 0;
    virtual HRESULT __stdcall raw_SetPrivateData (
        long dataTag,
        VARIANT data ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct IDatabase * * ppParent ) = 0;
    virtual HRESULT __stdcall raw_SetDataSource (
        VARIANT data,
        VARIANT dataTag = vtMissing ) = 0;
    virtual HRESULT __stdcall get_DllName (
        BSTR * ppDllName ) = 0;
    virtual HRESULT __stdcall get_DecriptiveName (
        BSTR * ppDescriptiveName ) = 0;
    virtual HRESULT __stdcall get_LogOnServerName (
        BSTR * ppLogOnServerName ) = 0;
    virtual HRESULT __stdcall get_LogOnDatabaseName (
        BSTR * ppLogOnDatabaseName ) = 0;
    virtual HRESULT __stdcall get_LogOnUserID (
        BSTR * ppLogOnUserID ) = 0;
    virtual HRESULT __stdcall get_SessionUserID (
        BSTR * ppSessionUserID ) = 0;
    virtual HRESULT __stdcall raw_TestConnectivity (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall raw_SetLogOnInfo (
        BSTR pServerName,
        VARIANT pDatabaseName = vtMissing,
        VARIANT pUserID = vtMissing,
        VARIANT pPassword = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_SetSessionInfo (
        BSTR pSessionUserID,
        BSTR pSessionPassword ) = 0;
    virtual HRESULT __stdcall get_DatabaseType (
        enum CRDatabaseType * pDatabaseType ) = 0;
    virtual HRESULT __stdcall raw_CheckDifferences (
        long * pDifferences,
        VARIANT * reserved ) = 0;
    virtual HRESULT __stdcall get_SubLocation (
        BSTR * ppSubLocation ) = 0;
    virtual HRESULT __stdcall raw_SetTableLocation (
        BSTR pLocation,
        BSTR pSubLocation,
        BSTR pConnectBufferSting ) = 0;
    virtual HRESULT __stdcall get_ConnectBufferString (
        BSTR * ppConnectBufferString ) = 0;
    virtual HRESULT __stdcall put_ConnectBufferString (
        BSTR ppConnectBufferString ) = 0;
    virtual HRESULT __stdcall put_DllName (
        BSTR ppDllName ) = 0;
    virtual HRESULT __stdcall get_ConnectionProperties (
        struct INameValuePairs * * ppConnectionProperties ) = 0;
};

struct __declspec(uuid("af37681d-6120-4e28-96dd-63fd2dc27b7a"))
IDatabaseFieldDefinitions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IDatabaseFieldDefinitionPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDatabaseTablePtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    IDatabaseFieldDefinitionPtr GetItem (
        long index );
    long GetCount ( );
    IDatabaseTablePtr GetParent ( );
    IDatabaseFieldDefinitionPtr GetItemByName (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * ppNewEnum ) = 0;
    virtual HRESULT __stdcall get_Item (
        long index,
        struct IDatabaseFieldDefinition * * ppFieldDefinition ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * pCount ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct IDatabaseTable * * ppParent ) = 0;
    virtual HRESULT __stdcall raw_GetItemByName (
        BSTR Name,
        struct IDatabaseFieldDefinition * * ppDatabaseFieldDefinition ) = 0;
};

enum CRDatabaseType
{
    crStandardDatabase = 1,
    crSQLDatabase = 2
};

struct __declspec(uuid("af376860-6120-4e28-96dd-63fd2dc27b7a"))
INameValuePairs : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    _variant_t Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetNameIDs))
    _variant_t NameIDs;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    _variant_t GetItem (
        _bstr_t Name );
    long GetCount ( );
    HRESULT Add (
        _bstr_t Name,
        const _variant_t & Value );
    HRESULT Delete (
        const _variant_t & index );
    HRESULT DeleteAll ( );
    _variant_t GetNameIDs ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * ppNewEnum ) = 0;
    virtual HRESULT __stdcall get_Item (
        BSTR Name,
        VARIANT * pValue ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * pCount ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR Name,
        VARIANT Value ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT index ) = 0;
    virtual HRESULT __stdcall raw_DeleteAll ( ) = 0;
    virtual HRESULT __stdcall get_NameIDs (
        VARIANT * pIDs ) = 0;
};

struct __declspec(uuid("af37681b-6120-4e28-96dd-63fd2dc27b7a"))
ITableLinks : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    ITableLinkPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IDatabasePtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    long GetCount ( );
    ITableLinkPtr GetItem (
        long index );
    IDatabasePtr GetParent ( );
    ITableLinkPtr Add (
        struct IDatabaseTable * psrcTable,
        struct IDatabaseTable * pDestTable,
        const _variant_t & srcFields,
        const _variant_t & destFields,
        enum CRLinkJoinType JoinType,
        enum CRLinkLookUpType LookupType,
        VARIANT_BOOL PartialMatchEnabled,
        short indexInUse );
    HRESULT Delete (
        long index );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * ppNewEnum ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * pCount ) = 0;
    virtual HRESULT __stdcall get_Item (
        long index,
        struct ITableLink * * ppDatabaseTable ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct IDatabase * * ppParent ) = 0;
    virtual HRESULT __stdcall raw_Add (
        struct IDatabaseTable * psrcTable,
        struct IDatabaseTable * pDestTable,
        VARIANT srcFields,
        VARIANT destFields,
        enum CRLinkJoinType JoinType,
        enum CRLinkLookUpType LookupType,
        VARIANT_BOOL PartialMatchEnabled,
        short indexInUse,
        struct ITableLink * * ppTableLink ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        long index ) = 0;
};

struct __declspec(uuid("af37681c-6120-4e28-96dd-63fd2dc27b7a"))
ITableLink : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IDatabasePtr Parent;
    __declspec(property(get=GetSourceTable))
    IDatabaseTablePtr SourceTable;
    __declspec(property(get=GetDestinationTable))
    IDatabaseTablePtr DestinationTable;
    __declspec(property(get=GetJoinType))
    enum CRLinkJoinType JoinType;
    __declspec(property(get=GetLookupType))
    enum CRLinkLookUpType LookupType;
    __declspec(property(get=GetPartialMatchEnabled))
    VARIANT_BOOL PartialMatchEnabled;
    __declspec(property(get=GetIndexUsed))
    short IndexUsed;
    __declspec(property(get=GetSourceFields))
    IDatabaseFieldDefinitionsPtr SourceFields;
    __declspec(property(get=GetDestinationFields))
    IDatabaseFieldDefinitionsPtr DestinationFields;

    //
    // Wrapper methods for error-handling
    //

    IDatabasePtr GetParent ( );
    IDatabaseTablePtr GetSourceTable ( );
    IDatabaseTablePtr GetDestinationTable ( );
    enum CRLinkJoinType GetJoinType ( );
    enum CRLinkLookUpType GetLookupType ( );
    VARIANT_BOOL GetPartialMatchEnabled ( );
    short GetIndexUsed ( );
    IDatabaseFieldDefinitionsPtr GetSourceFields ( );
    IDatabaseFieldDefinitionsPtr GetDestinationFields ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Parent (
        struct IDatabase * * ppParent ) = 0;
    virtual HRESULT __stdcall get_SourceTable (
        struct IDatabaseTable * * ppSrcTable ) = 0;
    virtual HRESULT __stdcall get_DestinationTable (
        struct IDatabaseTable * * ppDestTable ) = 0;
    virtual HRESULT __stdcall get_JoinType (
        enum CRLinkJoinType * pJoinType ) = 0;
    virtual HRESULT __stdcall get_LookupType (
        enum CRLinkLookUpType * pLookupType ) = 0;
    virtual HRESULT __stdcall get_PartialMatchEnabled (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall get_IndexUsed (
        short * pIndexUsed ) = 0;
    virtual HRESULT __stdcall get_SourceFields (
        struct IDatabaseFieldDefinitions * * ppSrcFields ) = 0;
    virtual HRESULT __stdcall get_DestinationFields (
        struct IDatabaseFieldDefinitions * * ppDestFields ) = 0;
};

enum CRLinkJoinType
{
    crJTEqual = 4,
    crJTLeftOuter = 5,
    crJTRightOutter = 6,
    crJROuter = 7,
    crJTGreaterThan = 8,
    crJTLessThan = 9,
    crJTGreaterOrEqual = 10,
    crJTLessOrEqual = 11,
    crJTNotEqual = 12,
    crJTAdvance = 13
};

enum CRLinkLookUpType
{
    crLTLookupParallel = 1,
    crLTLookupProduct = 2,
    crLTLookupSeries = 3
};

enum CRPaperOrientation
{
    crDefaultPaperOrientation = 0,
    crPortrait = 1,
    crLandscape = 2
};

enum CRPaperSize
{
    crDefaultPaperSize = 0,
    crPaperLetter = 1,
    crPaperLetterSmall = 2,
    crPaperTabloid = 3,
    crPaperLedger = 4,
    crPaperLegal = 5,
    crPaperStatement = 6,
    crPaperExecutive = 7,
    crPaperA3 = 8,
    crPaperA4 = 9,
    crPaperA4Small = 10,
    crPaperA5 = 11,
    crPaperB4 = 12,
    crPaperB5 = 13,
    crPaperFolio = 14,
    crPaperQuarto = 15,
    crPaper10x14 = 16,
    crPaper11x17 = 17,
    crPaperNote = 18,
    crPaperEnvelope9 = 19,
    crPaperEnvelope10 = 20,
    crPaperEnvelope11 = 21,
    crPaperEnvelope12 = 22,
    crPaperEnvelope14 = 23,
    crPaperCsheet = 24,
    crPaperDsheet = 25,
    crPaperEsheet = 26,
    crPaperEnvelopeDL = 27,
    crPaperEnvelopeC5 = 28,
    crPaperEnvelopeC3 = 29,
    crPaperEnvelopeC4 = 30,
    crPaperEnvelopeC6 = 31,
    crPaperEnvelopeC65 = 32,
    crPaperEnvelopeB4 = 33,
    crPaperEnvelopeB5 = 34,
    crPaperEnvelopeB6 = 35,
    crPaperEnvelopeItaly = 36,
    crPaperEnvelopeMonarch = 37,
    crPaperEnvelopePersonal = 38,
    crPaperFanfoldUS = 39,
    crPaperFanfoldStdGerman = 40,
    crPaperFanfoldLegalGerman = 41,
    crPaperUser = 256
};

struct __declspec(uuid("af37681e-6120-4e28-96dd-63fd2dc27b7a"))
IFormulaFieldDefinitions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IFormulaFieldDefinitionPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IReportPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    IFormulaFieldDefinitionPtr GetItem (
        long index );
    long GetCount ( );
    IReportPtr GetParent ( );
    IFormulaFieldDefinitionPtr Add (
        _bstr_t FormulaName,
        _bstr_t Text );
    HRESULT Delete (
        const _variant_t & index );
    IFormulaFieldDefinitionPtr GetItemByName (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * ppNewEnum ) = 0;
    virtual HRESULT __stdcall get_Item (
        long index,
        struct IFormulaFieldDefinition * * ppFormualFieldDefinition ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * pCount ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct IReport * * ppParent ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR FormulaName,
        BSTR Text,
        struct IFormulaFieldDefinition * * ppFormulaField ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT index ) = 0;
    virtual HRESULT __stdcall raw_GetItemByName (
        BSTR Name,
        struct IFormulaFieldDefinition * * ppFormulaFieldDefinition ) = 0;
};

struct __declspec(uuid("af37680f-6120-4e28-96dd-63fd2dc27b7a"))
IFormulaFieldDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetValueType))
    CRFieldValueType ValueType;
    __declspec(property(get=GetNumberOfBytes))
    short NumberOfBytes;
    __declspec(property(get=GetFormulaFieldName))
    _bstr_t FormulaFieldName;
    __declspec(property(get=GetKind))
    enum CRFieldKind Kind;
    __declspec(property(get=GetParent))
    IReportPtr Parent;
    __declspec(property(get=GetPreviousValue))
    _variant_t PreviousValue;
    __declspec(property(get=GetNextValue))
    _variant_t NextValue;
    __declspec(property(get=GetValue))
    _variant_t Value;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;

    //
    // Wrapper methods for error-handling
    //

    enum CRFieldKind GetKind ( );
    CRFieldValueType GetValueType ( );
    short GetNumberOfBytes ( );
    _bstr_t GetName ( );
    _variant_t GetValue ( );
    _bstr_t GetFormulaFieldName ( );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t ppText );
    IReportPtr GetParent ( );
    _variant_t GetPreviousValue ( );
    _variant_t GetNextValue ( );
    HRESULT Check (
        VARIANT_BOOL * pBool,
        BSTR * ppErrorString );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Kind (
        enum CRFieldKind * pKind ) = 0;
    virtual HRESULT __stdcall get_ValueType (
        CRFieldValueType * pValueType ) = 0;
    virtual HRESULT __stdcall get_NumberOfBytes (
        short * pNumberOfBytes ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * pName ) = 0;
    virtual HRESULT __stdcall get_Value (
        VARIANT * pValue ) = 0;
    virtual HRESULT __stdcall get_FormulaFieldName (
        BSTR * ppFormulaFieldName ) = 0;
    virtual HRESULT __stdcall get_Text (
        BSTR * ppText ) = 0;
    virtual HRESULT __stdcall put_Text (
        BSTR ppText ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct IReport * * ppParent ) = 0;
    virtual HRESULT __stdcall get_PreviousValue (
        VARIANT * pPreValue ) = 0;
    virtual HRESULT __stdcall get_NextValue (
        VARIANT * pNextValue ) = 0;
    virtual HRESULT __stdcall raw_Check (
        VARIANT_BOOL * pBool,
        BSTR * ppErrorString ) = 0;
};

struct __declspec(uuid("af37681f-6120-4e28-96dd-63fd2dc27b7a"))
IParameterFieldDefinitions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IParameterFieldDefinitionPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IReportPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    IParameterFieldDefinitionPtr GetItem (
        long index );
    long GetCount ( );
    IReportPtr GetParent ( );
    IParameterFieldDefinitionPtr Add (
        _bstr_t parameterName,
        CRFieldValueType ValueType );
    HRESULT Delete (
        const _variant_t & index );
    IParameterFieldDefinitionPtr GetItemByName (
        _bstr_t Name,
        const _variant_t & SubreportName = vtMissing );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * ppNewEnum ) = 0;
    virtual HRESULT __stdcall get_Item (
        long index,
        struct IParameterFieldDefinition * * ppParameterFieldDefinition ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * pCount ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct IReport * * ppParent ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR parameterName,
        CRFieldValueType ValueType,
        struct IParameterFieldDefinition * * ppParameterField ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT index ) = 0;
    virtual HRESULT __stdcall raw_GetItemByName (
        BSTR Name,
        VARIANT SubreportName,
        struct IParameterFieldDefinition * * ppParameterFieldDefinition ) = 0;
};

struct __declspec(uuid("af376812-6120-4e28-96dd-63fd2dc27b7a"))
IParameterFieldDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNeedsCurrentValue))
    VARIANT_BOOL NeedsCurrentValue;
    __declspec(property(get=GetValue))
    _variant_t Value;
    __declspec(property(get=GetIsCurrentValueSet))
    VARIANT_BOOL IsCurrentValueSet;
    __declspec(property(get=GetCurrentValue))
    _variant_t CurrentValue;
    __declspec(property(get=GetDefaultValue))
    _variant_t DefaultValue;
    __declspec(property(get=GetParameterFieldName))
    _bstr_t ParameterFieldName;
    __declspec(property(get=GetEnableNullValue,put=PutEnableNullValue))
    VARIANT_BOOL EnableNullValue;
    __declspec(property(get=GetEnableMultipleValues,put=PutEnableMultipleValues))
    VARIANT_BOOL EnableMultipleValues;
    __declspec(property(get=GetDiscreteOrRangeKind,put=PutDiscreteOrRangeKind))
    enum CRDiscreteOrRangeKind DiscreteOrRangeKind;
    __declspec(property(get=GetPlaceInGroup,put=PutPlaceInGroup))
    VARIANT_BOOL PlaceInGroup;
    __declspec(property(get=GetEnableExclusiveGroup,put=PutEnableExclusiveGroup))
    VARIANT_BOOL EnableExclusiveGroup;
    __declspec(property(get=GetNumberOfCurrentValues))
    short NumberOfCurrentValues;
    __declspec(property(get=GetNumberOfCurrentRanges))
    short NumberOfCurrentRanges;
    __declspec(property(get=GetEnableRangeLimit,put=PutEnableRangeLimit))
    VARIANT_BOOL EnableRangeLimit;
    __declspec(property(get=GetMinimumValue,put=PutMinimumValue))
    _variant_t MinimumValue;
    __declspec(property(get=GetMaximumValue,put=PutMaximumValue))
    _variant_t MaximumValue;
    __declspec(property(get=GetEditMask,put=PutEditMask))
    _bstr_t EditMask;
    __declspec(property(get=GetParameterType))
    enum CRParameterFieldType ParameterType;
    __declspec(property(get=GetDisallowEditing,put=PutDisallowEditing))
    VARIANT_BOOL DisallowEditing;
    __declspec(property(get=GetNumberOfDefaultValues))
    short NumberOfDefaultValues;
    __declspec(property(get=GetGroupNumber,put=PutGroupNumber))
    short GroupNumber;
    __declspec(property(get=GetParent))
    IReportPtr Parent;
    __declspec(property(get=GetKind))
    enum CRFieldKind Kind;
    __declspec(property(get=GetValueType))
    CRFieldValueType ValueType;
    __declspec(property(get=GetNumberOfBytes))
    short NumberOfBytes;
    __declspec(property(get=GetNthValueDescription,put=PutNthValueDescription))
    _bstr_t NthValueDescription[];
    __declspec(property(get=GetEnableShowDescriptionOnly,put=PutEnableShowDescriptionOnly))
    VARIANT_BOOL EnableShowDescriptionOnly;
    __declspec(property(get=GetPicklistSortMethod,put=PutPicklistSortMethod))
    enum CRParameterPicklistSortMethod PicklistSortMethod;
    __declspec(property(get=GetEnableSortBasedOnDesc,put=PutEnableSortBasedOnDesc))
    VARIANT_BOOL EnableSortBasedOnDesc;
    __declspec(property(get=GetPreviousValue))
    _variant_t PreviousValue;
    __declspec(property(get=GetNextValue))
    _variant_t NextValue;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetPrompt,put=PutPrompt))
    _bstr_t Prompt;
    __declspec(property(get=GetIsDefaultValueSet))
    VARIANT_BOOL IsDefaultValueSet;
    __declspec(property(get=GetReportName))
    _bstr_t ReportName;

    //
    // Wrapper methods for error-handling
    //

    enum CRFieldKind GetKind ( );
    CRFieldValueType GetValueType ( );
    short GetNumberOfBytes ( );
    _bstr_t GetName ( );
    _variant_t GetValue ( );
    _bstr_t GetParameterFieldName ( );
    IReportPtr GetParent ( );
    _variant_t GetPreviousValue ( );
    _variant_t GetNextValue ( );
    _bstr_t GetPrompt ( );
    void PutPrompt (
        _bstr_t ppPrompt );
    VARIANT_BOOL GetIsDefaultValueSet ( );
    _bstr_t GetReportName ( );
    VARIANT_BOOL GetNeedsCurrentValue ( );
    VARIANT_BOOL GetIsCurrentValueSet ( );
    _variant_t GetCurrentValue ( );
    _variant_t GetDefaultValue ( );
    HRESULT SetCurrentValue (
        const _variant_t & CurrentValue,
        const _variant_t & ValueType = vtMissing );
    HRESULT SetDefaultValue (
        const _variant_t & DefaultValue,
        const _variant_t & ValueType = vtMissing );
    VARIANT_BOOL GetEnableRangeLimit ( );
    void PutEnableRangeLimit (
        VARIANT_BOOL pBool );
    _variant_t GetMinimumValue ( );
    void PutMinimumValue (
        const _variant_t & pMinimumValue );
    _variant_t GetMaximumValue ( );
    void PutMaximumValue (
        const _variant_t & pMaximumValue );
    _bstr_t GetEditMask ( );
    void PutEditMask (
        _bstr_t ppEditMask );
    enum CRParameterFieldType GetParameterType ( );
    VARIANT_BOOL GetDisallowEditing ( );
    void PutDisallowEditing (
        VARIANT_BOOL pBool );
    short GetNumberOfDefaultValues ( );
    _variant_t GetNthDefaultValue (
        short index );
    HRESULT SetNthDefaultValue (
        short index,
        const _variant_t & nthDefaultValue );
    HRESULT AddDefaultValue (
        const _variant_t & DefaultValue );
    HRESULT DeleteNthDefaultValue (
        short index );
    VARIANT_BOOL GetEnableNullValue ( );
    void PutEnableNullValue (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetEnableMultipleValues ( );
    void PutEnableMultipleValues (
        VARIANT_BOOL pBool );
    enum CRDiscreteOrRangeKind GetDiscreteOrRangeKind ( );
    void PutDiscreteOrRangeKind (
        enum CRDiscreteOrRangeKind pDiscreteOrRangeKind );
    VARIANT_BOOL GetPlaceInGroup ( );
    void PutPlaceInGroup (
        VARIANT_BOOL pBool );
    short GetGroupNumber ( );
    void PutGroupNumber (
        short pGroupNumber );
    VARIANT_BOOL GetEnableExclusiveGroup ( );
    void PutEnableExclusiveGroup (
        VARIANT_BOOL pBool );
    short GetNumberOfCurrentValues ( );
    short GetNumberOfCurrentRanges ( );
    _variant_t GetNthCurrentValue (
        short index );
    HRESULT AddCurrentValue (
        const _variant_t & CurrentValue );
    HRESULT GetNthCurrentRange (
        short index,
        VARIANT * pStart,
        VARIANT * pEnd,
        enum CRRangeInfo * pRangeInfo );
    HRESULT AddCurrentRange (
        const _variant_t & start,
        const _variant_t & end,
        enum CRRangeInfo rangeInfo );
    HRESULT ClearCurrentValueAndRange ( );
    _bstr_t GetNthValueDescription (
        short index );
    void PutNthValueDescription (
        short index,
        _bstr_t pValueDescription );
    VARIANT_BOOL GetEnableShowDescriptionOnly ( );
    void PutEnableShowDescriptionOnly (
        VARIANT_BOOL pBool );
    enum CRParameterPicklistSortMethod GetPicklistSortMethod ( );
    void PutPicklistSortMethod (
        enum CRParameterPicklistSortMethod pMethod );
    VARIANT_BOOL GetEnableSortBasedOnDesc ( );
    void PutEnableSortBasedOnDesc (
        VARIANT_BOOL pBool );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Kind (
        enum CRFieldKind * pKind ) = 0;
    virtual HRESULT __stdcall get_ValueType (
        CRFieldValueType * pValueType ) = 0;
    virtual HRESULT __stdcall get_NumberOfBytes (
        short * pNumberOfBytes ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * pName ) = 0;
    virtual HRESULT __stdcall get_Value (
        VARIANT * pValue ) = 0;
    virtual HRESULT __stdcall get_ParameterFieldName (
        BSTR * ppParameterFieldName ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct IReport * * ppParent ) = 0;
    virtual HRESULT __stdcall get_PreviousValue (
        VARIANT * pPreValue ) = 0;
    virtual HRESULT __stdcall get_NextValue (
        VARIANT * pNextValue ) = 0;
    virtual HRESULT __stdcall get_Prompt (
        BSTR * ppPrompt ) = 0;
    virtual HRESULT __stdcall put_Prompt (
        BSTR ppPrompt ) = 0;
    virtual HRESULT __stdcall get_IsDefaultValueSet (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall get_ReportName (
        BSTR * ppReportName ) = 0;
    virtual HRESULT __stdcall get_NeedsCurrentValue (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall get_IsCurrentValueSet (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall get_CurrentValue (
        VARIANT * pCurrentValue ) = 0;
    virtual HRESULT __stdcall get_DefaultValue (
        VARIANT * pDefaultValue ) = 0;
    virtual HRESULT __stdcall raw_SetCurrentValue (
        VARIANT CurrentValue,
        VARIANT ValueType = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_SetDefaultValue (
        VARIANT DefaultValue,
        VARIANT ValueType = vtMissing ) = 0;
    virtual HRESULT __stdcall get_EnableRangeLimit (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_EnableRangeLimit (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_MinimumValue (
        VARIANT * pMinimumValue ) = 0;
    virtual HRESULT __stdcall put_MinimumValue (
        VARIANT pMinimumValue ) = 0;
    virtual HRESULT __stdcall get_MaximumValue (
        VARIANT * pMaximumValue ) = 0;
    virtual HRESULT __stdcall put_MaximumValue (
        VARIANT pMaximumValue ) = 0;
    virtual HRESULT __stdcall get_EditMask (
        BSTR * ppEditMask ) = 0;
    virtual HRESULT __stdcall put_EditMask (
        BSTR ppEditMask ) = 0;
    virtual HRESULT __stdcall get_ParameterType (
        enum CRParameterFieldType * pParameterType ) = 0;
    virtual HRESULT __stdcall get_DisallowEditing (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_DisallowEditing (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_NumberOfDefaultValues (
        short * pNumberOfDefaultValues ) = 0;
    virtual HRESULT __stdcall raw_GetNthDefaultValue (
        short index,
        VARIANT * pNthDefaultValue ) = 0;
    virtual HRESULT __stdcall raw_SetNthDefaultValue (
        short index,
        VARIANT nthDefaultValue ) = 0;
    virtual HRESULT __stdcall raw_AddDefaultValue (
        VARIANT DefaultValue ) = 0;
    virtual HRESULT __stdcall raw_DeleteNthDefaultValue (
        short index ) = 0;
    virtual HRESULT __stdcall get_EnableNullValue (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_EnableNullValue (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_EnableMultipleValues (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_EnableMultipleValues (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_DiscreteOrRangeKind (
        enum CRDiscreteOrRangeKind * pDiscreteOrRangeKind ) = 0;
    virtual HRESULT __stdcall put_DiscreteOrRangeKind (
        enum CRDiscreteOrRangeKind pDiscreteOrRangeKind ) = 0;
    virtual HRESULT __stdcall get_PlaceInGroup (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_PlaceInGroup (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_GroupNumber (
        short * pGroupNumber ) = 0;
    virtual HRESULT __stdcall put_GroupNumber (
        short pGroupNumber ) = 0;
    virtual HRESULT __stdcall get_EnableExclusiveGroup (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_EnableExclusiveGroup (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_NumberOfCurrentValues (
        short * pNumberOfCurrentValues ) = 0;
    virtual HRESULT __stdcall get_NumberOfCurrentRanges (
        short * pNumberOfCurrentRanges ) = 0;
    virtual HRESULT __stdcall raw_GetNthCurrentValue (
        short index,
        VARIANT * pCurrentValue ) = 0;
    virtual HRESULT __stdcall raw_AddCurrentValue (
        VARIANT CurrentValue ) = 0;
    virtual HRESULT __stdcall raw_GetNthCurrentRange (
        short index,
        VARIANT * pStart,
        VARIANT * pEnd,
        enum CRRangeInfo * pRangeInfo ) = 0;
    virtual HRESULT __stdcall raw_AddCurrentRange (
        VARIANT start,
        VARIANT end,
        enum CRRangeInfo rangeInfo ) = 0;
    virtual HRESULT __stdcall raw_ClearCurrentValueAndRange ( ) = 0;
    virtual HRESULT __stdcall get_NthValueDescription (
        short index,
        BSTR * pValueDescription ) = 0;
    virtual HRESULT __stdcall put_NthValueDescription (
        short index,
        BSTR pValueDescription ) = 0;
    virtual HRESULT __stdcall get_EnableShowDescriptionOnly (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_EnableShowDescriptionOnly (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_PicklistSortMethod (
        enum CRParameterPicklistSortMethod * pMethod ) = 0;
    virtual HRESULT __stdcall put_PicklistSortMethod (
        enum CRParameterPicklistSortMethod pMethod ) = 0;
    virtual HRESULT __stdcall get_EnableSortBasedOnDesc (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_EnableSortBasedOnDesc (
        VARIANT_BOOL pBool ) = 0;
};

enum CRParameterFieldType
{
    crReportParameter = 0,
    crQueryParameter = 1,
    crStoreProcedureParameter = 2
};

enum CRDiscreteOrRangeKind
{
    crDiscreteValue = 0,
    crRangeValue = 1,
    crDiscreteAndRangeValue = 2
};

enum CRRangeInfo
{
    crRangeNotIncludeUpperLowerBound = 0,
    crRangeIncludeUpperBound = 1,
    crRangeIncludeLowerBound = 2,
    crRangeNoUpperBound = 4,
    crRangeNoLowerBound = 8
};

enum CRParameterPicklistSortMethod
{
    crNoSort = 0,
    crAlphanumericAscending = 1,
    crAlphanumericDescending = 2,
    crNumericAscending = 3,
    crNumericDescending = 4
};

struct __declspec(uuid("af376820-6120-4e28-96dd-63fd2dc27b7a"))
IGroupNameFieldDefinitions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IGroupNameFieldDefinitionPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IReportPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    IGroupNameFieldDefinitionPtr GetItem (
        long index );
    long GetCount ( );
    IReportPtr GetParent ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * ppNewEnum ) = 0;
    virtual HRESULT __stdcall get_Item (
        long index,
        struct IGroupNameFieldDefinition * * ppGroupNameFieldDefinition ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * pCount ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct IReport * * ppParent ) = 0;
};

struct __declspec(uuid("af376813-6120-4e28-96dd-63fd2dc27b7a"))
IGroupNameFieldDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetValueType))
    CRFieldValueType ValueType;
    __declspec(property(get=GetNumberOfBytes))
    short NumberOfBytes;
    __declspec(property(get=GetParent))
    IReportPtr Parent;
    __declspec(property(get=GetKind))
    enum CRFieldKind Kind;
    __declspec(property(get=GetPreviousValue))
    _variant_t PreviousValue;
    __declspec(property(get=GetNextValue))
    _variant_t NextValue;
    __declspec(property(get=GetGroupNameConditionFormula,put=PutGroupNameConditionFormula))
    _bstr_t GroupNameConditionFormula;
    __declspec(property(get=GetValue))
    _variant_t Value;
    __declspec(property(get=GetGroupNumber))
    short GroupNumber;
    __declspec(property(get=GetGroupNameFieldName))
    _bstr_t GroupNameFieldName;

    //
    // Wrapper methods for error-handling
    //

    enum CRFieldKind GetKind ( );
    CRFieldValueType GetValueType ( );
    short GetNumberOfBytes ( );
    _bstr_t GetName ( );
    _variant_t GetValue ( );
    _bstr_t GetGroupNameFieldName ( );
    IReportPtr GetParent ( );
    _variant_t GetPreviousValue ( );
    _variant_t GetNextValue ( );
    short GetGroupNumber ( );
    _bstr_t GetGroupNameConditionFormula ( );
    void PutGroupNameConditionFormula (
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Kind (
        enum CRFieldKind * pKind ) = 0;
    virtual HRESULT __stdcall get_ValueType (
        CRFieldValueType * pValueType ) = 0;
    virtual HRESULT __stdcall get_NumberOfBytes (
        short * pNumberOfBytes ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * pName ) = 0;
    virtual HRESULT __stdcall get_Value (
        VARIANT * pValue ) = 0;
    virtual HRESULT __stdcall get_GroupNameFieldName (
        BSTR * ppGroupNameFieldName ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct IReport * * ppParent ) = 0;
    virtual HRESULT __stdcall get_PreviousValue (
        VARIANT * pPreValue ) = 0;
    virtual HRESULT __stdcall get_NextValue (
        VARIANT * pNextValue ) = 0;
    virtual HRESULT __stdcall get_GroupNumber (
        short * pGroupNumber ) = 0;
    virtual HRESULT __stdcall get_GroupNameConditionFormula (
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_GroupNameConditionFormula (
        BSTR pVal ) = 0;
};

struct __declspec(uuid("af376821-6120-4e28-96dd-63fd2dc27b7a"))
ISummaryFieldDefinitions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    ISummaryFieldDefinitionPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IReportPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    ISummaryFieldDefinitionPtr GetItem (
        long index );
    long GetCount ( );
    IReportPtr GetParent ( );
    ISummaryFieldDefinitionPtr Add (
        long groupLevel,
        const _variant_t & Field,
        enum CRSummaryType SummaryType,
        const _variant_t & secondSummaryFieldOrFactor = vtMissing );
    HRESULT Delete (
        const _variant_t & index );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * ppNewEnum ) = 0;
    virtual HRESULT __stdcall get_Item (
        long index,
        struct ISummaryFieldDefinition * * ppSummaryFieldDefinition ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * pCount ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct IReport * * ppParent ) = 0;
    virtual HRESULT __stdcall raw_Add (
        long groupLevel,
        VARIANT Field,
        enum CRSummaryType SummaryType,
        VARIANT secondSummaryFieldOrFactor,
        struct ISummaryFieldDefinition * * ppSummaryDefinition ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT index ) = 0;
};

enum CRReportKind
{
    crColumnarReport = 1,
    crLabelReport = 2,
    crMulColumnReport = 3
};

struct __declspec(uuid("af37682b-6120-4e28-96dd-63fd2dc27b7a"))
IPageEngine : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValueFormatOptions,put=PutValueFormatOptions))
    enum CRValueFormatType ValueFormatOptions;
    __declspec(property(get=GetParent))
    IReportPtr Parent;
    __declspec(property(get=GetPlaceHolderOptions,put=PutPlaceHolderOptions))
    enum CRPlaceHolderType PlaceHolderOptions;
    __declspec(property(get=GetImageOptions,put=PutImageOptions))
    enum CRImageType ImageOptions;

    //
    // Wrapper methods for error-handling
    //

    enum CRImageType GetImageOptions ( );
    void PutImageOptions (
        enum CRImageType pImageOptions );
    IPageGeneratorPtr CreatePageGenerator (
        const _variant_t & GroupPath,
        const _variant_t & DrillDownLevel = vtMissing );
    _variant_t RenderTotallerETF (
        const _variant_t & rootGroupPath,
        long startingChildNumber,
        short pastRootLevels,
        const _variant_t & maxNodeCount,
        enum CRRenderResultType resultType );
    _variant_t RenderTotallerHTML (
        const _variant_t & rootGroupPath,
        long startingChildNumber,
        short pastRootLevels,
        const _variant_t & maxNodeCount,
        const _variant_t & openGroupPath,
        VARIANT_BOOL includeDrillDownLinks,
        _bstr_t baseURL,
        enum CRRenderResultType resultType );
    IReportPtr GetParent ( );
    enum CRPlaceHolderType GetPlaceHolderOptions ( );
    void PutPlaceHolderOptions (
        enum CRPlaceHolderType pPlaceHolderType );
    enum CRValueFormatType GetValueFormatOptions ( );
    void PutValueFormatOptions (
        enum CRValueFormatType pValueFormatType );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_ImageOptions (
        enum CRImageType * pImageOptions ) = 0;
    virtual HRESULT __stdcall put_ImageOptions (
        enum CRImageType pImageOptions ) = 0;
    virtual HRESULT __stdcall raw_CreatePageGenerator (
        VARIANT GroupPath,
        VARIANT DrillDownLevel,
        struct IPageGenerator * * ppPageGenerator ) = 0;
    virtual HRESULT __stdcall raw_RenderTotallerETF (
        VARIANT rootGroupPath,
        long startingChildNumber,
        short pastRootLevels,
        VARIANT maxNodeCount,
        enum CRRenderResultType resultType,
        VARIANT * pETFArray ) = 0;
    virtual HRESULT __stdcall raw_RenderTotallerHTML (
        VARIANT rootGroupPath,
        long startingChildNumber,
        short pastRootLevels,
        VARIANT maxNodeCount,
        VARIANT openGroupPath,
        VARIANT_BOOL includeDrillDownLinks,
        BSTR baseURL,
        enum CRRenderResultType resultType,
        VARIANT * pHTMLArray ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct IReport * * ppParent ) = 0;
    virtual HRESULT __stdcall get_PlaceHolderOptions (
        enum CRPlaceHolderType * pPlaceHolderType ) = 0;
    virtual HRESULT __stdcall put_PlaceHolderOptions (
        enum CRPlaceHolderType pPlaceHolderType ) = 0;
    virtual HRESULT __stdcall get_ValueFormatOptions (
        enum CRValueFormatType * pValueFormatType ) = 0;
    virtual HRESULT __stdcall put_ValueFormatOptions (
        enum CRValueFormatType pValueFormatType ) = 0;
};

enum CRImageType
{
    crImageUnknown = 0,
    crDIBImageType = 1,
    crJPEGImageType = 2
};

struct __declspec(uuid("af37682c-6120-4e28-96dd-63fd2dc27b7a"))
IPageGenerator : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetContainingPageNumber))
    long ContainingPageNumber;
    __declspec(property(get=GetParent))
    IPageEnginePtr Parent;
    __declspec(property(get=GetContainingGroupPath))
    _variant_t ContainingGroupPath;
    __declspec(property(get=GetContainingGroupName))
    _bstr_t ContainingGroupName;
    __declspec(property(get=GetxOffset))
    long xOffset;
    __declspec(property(get=GetyOffset))
    long yOffset;
    __declspec(property(get=GetReportName))
    _bstr_t ReportName;
    __declspec(property(get=GetPages))
    IPagesPtr Pages;
    __declspec(property(get=GetDrillDownLevel))
    short DrillDownLevel;
    __declspec(property(get=GetGroupPath))
    _variant_t GroupPath;
    __declspec(property(get=GetGroupName))
    _bstr_t GroupName;

    //
    // Wrapper methods for error-handling
    //

    IPageEnginePtr GetParent ( );
    IPagesPtr GetPages ( );
    short GetDrillDownLevel ( );
    _variant_t GetGroupPath ( );
    long GetPageNumberForGroup (
        const _variant_t & GroupPath );
    IPageGeneratorPtr DrillOnGraph (
        long PageNumber,
        long xOffset,
        long yOffset );
    HRESULT SearchForText (
        _bstr_t Text,
        enum CRSearchDirection direction,
        long * pPageNumber );
    _bstr_t GetGroupName ( );
    _bstr_t GetReportName ( );
    long GetContainingPageNumber ( );
    _variant_t GetContainingGroupPath ( );
    _bstr_t GetContainingGroupName ( );
    long GetxOffset ( );
    long GetyOffset ( );
    _variant_t RenderTotallerETF (
        const _variant_t & rootGroupPath,
        long startingChildNumber,
        short pastRootLevels,
        const _variant_t & maxNodeCount,
        enum CRRenderResultType resultType );
    _variant_t RenderTotallerHTML (
        const _variant_t & rootGroupPath,
        long startingChildNumber,
        short pastRootLevels,
        const _variant_t & maxNodeCount,
        const _variant_t & openGroupPath,
        VARIANT_BOOL includeDrillDownLinks,
        _bstr_t baseURL,
        enum CRRenderResultType resultType );
    IPageGeneratorPtr DrillOnMap (
        long PageNumber,
        long xOffset,
        long yOffset );
    IPageGeneratorPtr DrillOnSubreport (
        long PageNumber,
        long xOffset,
        long yOffset );
    _variant_t Export (
        enum CRRenderResultType resultType );
    IPageGeneratorPtr CreateSubreportPageGenerator (
        const _variant_t & GroupPath,
        const _variant_t & DrillDownLevel = vtMissing );
    VARIANT_BOOL FindText (
        _bstr_t Text,
        enum CRSearchDirection direction,
        VARIANT * pPageNumber );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Parent (
        struct IPageEngine * * ppParent ) = 0;
    virtual HRESULT __stdcall get_Pages (
        struct IPages * * ppPages ) = 0;
    virtual HRESULT __stdcall get_DrillDownLevel (
        short * pDrillDownLevel ) = 0;
    virtual HRESULT __stdcall get_GroupPath (
        VARIANT * pGroupPath ) = 0;
    virtual HRESULT __stdcall raw_GetPageNumberForGroup (
        VARIANT GroupPath,
        long * pPageNumber ) = 0;
    virtual HRESULT __stdcall raw_DrillOnGraph (
        long PageNumber,
        long xOffset,
        long yOffset,
        struct IPageGenerator * * ppPageGenerator ) = 0;
    virtual HRESULT __stdcall raw_SearchForText (
        BSTR Text,
        enum CRSearchDirection direction,
        long * pPageNumber ) = 0;
    virtual HRESULT __stdcall get_GroupName (
        BSTR * ppGroupName ) = 0;
    virtual HRESULT __stdcall get_ReportName (
        BSTR * ppReportName ) = 0;
    virtual HRESULT __stdcall get_ContainingPageNumber (
        long * pContainingPageNumber ) = 0;
    virtual HRESULT __stdcall get_ContainingGroupPath (
        VARIANT * pContainingGroupPath ) = 0;
    virtual HRESULT __stdcall get_ContainingGroupName (
        BSTR * ppContainingGroupName ) = 0;
    virtual HRESULT __stdcall get_xOffset (
        long * pXOffset ) = 0;
    virtual HRESULT __stdcall get_yOffset (
        long * pYOffset ) = 0;
    virtual HRESULT __stdcall raw_RenderTotallerETF (
        VARIANT rootGroupPath,
        long startingChildNumber,
        short pastRootLevels,
        VARIANT maxNodeCount,
        enum CRRenderResultType resultType,
        VARIANT * pETFArray ) = 0;
    virtual HRESULT __stdcall raw_RenderTotallerHTML (
        VARIANT rootGroupPath,
        long startingChildNumber,
        short pastRootLevels,
        VARIANT maxNodeCount,
        VARIANT openGroupPath,
        VARIANT_BOOL includeDrillDownLinks,
        BSTR baseURL,
        enum CRRenderResultType resultType,
        VARIANT * pHTMLArray ) = 0;
    virtual HRESULT __stdcall raw_DrillOnMap (
        long PageNumber,
        long xOffset,
        long yOffset,
        struct IPageGenerator * * ppPageGenerator ) = 0;
    virtual HRESULT __stdcall raw_DrillOnSubreport (
        long PageNumber,
        long xOffset,
        long yOffset,
        struct IPageGenerator * * ppPageGenerator ) = 0;
    virtual HRESULT __stdcall raw_Export (
        enum CRRenderResultType resultType,
        VARIANT * pExportArray ) = 0;
    virtual HRESULT __stdcall raw_CreateSubreportPageGenerator (
        VARIANT GroupPath,
        VARIANT DrillDownLevel,
        struct IPageGenerator * * ppPageGenerator ) = 0;
    virtual HRESULT __stdcall raw_FindText (
        BSTR Text,
        enum CRSearchDirection direction,
        VARIANT * pPageNumber,
        VARIANT_BOOL * pBool ) = 0;
};

struct __declspec(uuid("af37682d-6120-4e28-96dd-63fd2dc27b7a"))
IPages : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IPagePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IPageGeneratorPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    IPagePtr GetItem (
        long index );
    long GetCount ( );
    IPageGeneratorPtr GetParent ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * ppNewEnum ) = 0;
    virtual HRESULT __stdcall get_Item (
        long index,
        struct IPage * * ppPage ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * pCount ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct IPageGenerator * * ppPageGenerator ) = 0;
};

struct __declspec(uuid("af37682e-6120-4e28-96dd-63fd2dc27b7a"))
IPage : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsLastPage))
    VARIANT_BOOL IsLastPage;
    __declspec(property(get=GetParent))
    IPageGeneratorPtr Parent;
    __declspec(property(get=GetIsMissingTotalPageCount))
    VARIANT_BOOL IsMissingTotalPageCount;
    __declspec(property(get=GetPageNumber))
    long PageNumber;

    //
    // Wrapper methods for error-handling
    //

    IPageGeneratorPtr GetParent ( );
    long GetPageNumber ( );
    VARIANT_BOOL GetIsLastPage ( );
    _variant_t RenderEPF (
        enum CRRenderResultType resultType );
    _variant_t RenderHTML (
        VARIANT_BOOL includeDrillDownLinks,
        enum CRHTMLPageStyle pageStyle,
        enum CRHTMLToolbarStyle toolbarStyle,
        _bstr_t baseURL,
        enum CRRenderResultType resultType );
    VARIANT_BOOL GetIsMissingTotalPageCount ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Parent (
        struct IPageGenerator * * ppPageGenerator ) = 0;
    virtual HRESULT __stdcall get_PageNumber (
        long * pPageNumber ) = 0;
    virtual HRESULT __stdcall get_IsLastPage (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall raw_RenderEPF (
        enum CRRenderResultType resultType,
        VARIANT * pEPFArray ) = 0;
    virtual HRESULT __stdcall raw_RenderHTML (
        VARIANT_BOOL includeDrillDownLinks,
        enum CRHTMLPageStyle pageStyle,
        enum CRHTMLToolbarStyle toolbarStyle,
        BSTR baseURL,
        enum CRRenderResultType resultType,
        VARIANT * pHTMLArray ) = 0;
    virtual HRESULT __stdcall get_IsMissingTotalPageCount (
        VARIANT_BOOL * pBool ) = 0;
};

enum CRRenderResultType
{
    crUISafeArrayType = 8209,
    crBSTRType = 8
};

enum CRHTMLPageStyle
{
    crPlainPageStyle = 0,
    crToolbarPageStyle = 1,
    crFramePageStyle = 2,
    crToolbarAtTopPageStyle = 3,
    crToolbarAtBottomPageStyle = 4
};

enum CRHTMLToolbarStyle
{
    crToolbarRefreshButton = 1,
    crToolbarSearchBox = 2
};

enum CRSearchDirection
{
    crForward = 0,
    crBackward = 1
};

enum CRPlaceHolderType
{
    crDelayTotalPageCountCalc = 1,
    crAllowPlaceHolders = 2
};

enum CRValueFormatType
{
    crIncludeFieldValues = 1,
    crIncludeHiddenFields = 2,
    crAllowComplexFieldFormatting = 4
};

struct __declspec(uuid("af37682f-6120-4e28-96dd-63fd2dc27b7a"))
IExportOptions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetExcelConvertDateToString,put=PutExcelConvertDateToString))
    VARIANT_BOOL ExcelConvertDateToString;
    __declspec(property(get=GetExcelExportAllPages,put=PutExcelExportAllPages))
    VARIANT_BOOL ExcelExportAllPages;
    __declspec(property(get=GetExcelFirstPageNumber,put=PutExcelFirstPageNumber))
    long ExcelFirstPageNumber;
    __declspec(property(get=GetExcelLastPageNumber,put=PutExcelLastPageNumber))
    long ExcelLastPageNumber;
    __declspec(property(get=GetMailUserName,put=PutMailUserName))
    _bstr_t MailUserName;
    __declspec(property(get=GetMailPassword,put=PutMailPassword))
    _bstr_t MailPassword;
    __declspec(property(get=GetUseDefaultCharactersPerInch,put=PutUseDefaultCharactersPerInch))
    VARIANT_BOOL UseDefaultCharactersPerInch;
    __declspec(property(get=GetUserDefinedCharactersPerInch,put=PutUserDefinedCharactersPerInch))
    long UserDefinedCharactersPerInch;
    __declspec(property(get=GetExcelExportPageAreaPair,put=PutExcelExportPageAreaPair))
    enum CRExcelExportPageAreaPair ExcelExportPageAreaPair;
    __declspec(property(get=GetExcelMaintainRelativeObjectPosition,put=PutExcelMaintainRelativeObjectPosition))
    VARIANT_BOOL ExcelMaintainRelativeObjectPosition;
    __declspec(property(get=GetExcelShowGridlines,put=PutExcelShowGridlines))
    VARIANT_BOOL ExcelShowGridlines;
    __declspec(property(get=GetExcelChopPageHeader,put=PutExcelChopPageHeader))
    VARIANT_BOOL ExcelChopPageHeader;
    __declspec(property(get=GetExcelExportImagesInDataOnly,put=PutExcelExportImagesInDataOnly))
    VARIANT_BOOL ExcelExportImagesInDataOnly;
    __declspec(property(get=GetExcelUseFormatInDataOnly,put=PutExcelUseFormatInDataOnly))
    VARIANT_BOOL ExcelUseFormatInDataOnly;
    __declspec(property(get=GetExcelMaintainColumnAlignment,put=PutExcelMaintainColumnAlignment))
    VARIANT_BOOL ExcelMaintainColumnAlignment;
    __declspec(property(get=GetFormatType,put=PutFormatType))
    enum CRExportFormatType FormatType;
    __declspec(property(get=GetDestinationType,put=PutDestinationType))
    enum CRExportDestinationType DestinationType;
    __declspec(property(get=GetExchangeProfile,put=PutExchangeProfile))
    _bstr_t ExchangeProfile;
    __declspec(property(get=GetDiskFileName,put=PutDiskFileName))
    _bstr_t DiskFileName;
    __declspec(property(get=GetUseReportDateFormat,put=PutUseReportDateFormat))
    VARIANT_BOOL UseReportDateFormat;
    __declspec(property(get=GetUseReportNumberFormat,put=PutUseReportNumberFormat))
    VARIANT_BOOL UseReportNumberFormat;
    __declspec(property(get=GetCharFieldDelimiter,put=PutCharFieldDelimiter))
    _bstr_t CharFieldDelimiter;
    __declspec(property(get=GetCharStringDelimiter,put=PutCharStringDelimiter))
    _bstr_t CharStringDelimiter;
    __declspec(property(get=GetNumberOfLinesPerPage,put=PutNumberOfLinesPerPage))
    short NumberOfLinesPerPage;
    __declspec(property(get=GetODBCDataSourceName,put=PutODBCDataSourceName))
    _bstr_t ODBCDataSourceName;
    __declspec(property(get=GetODBCDataSourceUserID,put=PutODBCDataSourceUserID))
    _bstr_t ODBCDataSourceUserID;
    __declspec(property(get=GetExcelUseConstantColumnWidth,put=PutExcelUseConstantColumnWidth))
    VARIANT_BOOL ExcelUseConstantColumnWidth;
    __declspec(property(get=GetExcelConstantColumnWidth,put=PutExcelConstantColumnWidth))
    double ExcelConstantColumnWidth;
    __declspec(property(get=GetExcelAreaType,put=PutExcelAreaType))
    enum CRAreaKind ExcelAreaType;
    __declspec(property(get=GetExcelAreaGroupNumber,put=PutExcelAreaGroupNumber))
    short ExcelAreaGroupNumber;
    __declspec(property(get=GetExcelUseTabularFormat,put=PutExcelUseTabularFormat))
    VARIANT_BOOL ExcelUseTabularFormat;
    __declspec(property(put=PutODBCDataSourcePassword))
    _bstr_t ODBCDataSourcePassword;
    __declspec(property(get=GetODBCExportTableName,put=PutODBCExportTableName))
    _bstr_t ODBCExportTableName;
    __declspec(property(get=GetHTMLFileName,put=PutHTMLFileName))
    _bstr_t HTMLFileName;
    __declspec(property(put=PutExchangePassword))
    _bstr_t ExchangePassword;
    __declspec(property(get=GetExchangeDestinationType,put=PutExchangeDestinationType))
    enum CRExchangeDestinationType ExchangeDestinationType;
    __declspec(property(get=GetExchangeFolderPath,put=PutExchangeFolderPath))
    _bstr_t ExchangeFolderPath;
    __declspec(property(get=GetMailCcList,put=PutMailCcList))
    _bstr_t MailCcList;
    __declspec(property(get=GetMailToList,put=PutMailToList))
    _bstr_t MailToList;
    __declspec(property(get=GetMailSubject,put=PutMailSubject))
    _bstr_t MailSubject;
    __declspec(property(get=GetMailMessage,put=PutMailMessage))
    _bstr_t MailMessage;
    __declspec(property(get=GetMailBccList,put=PutMailBccList))
    _bstr_t MailBccList;
    __declspec(property(get=GetFormatDllName))
    _bstr_t FormatDllName;
    __declspec(property(get=GetDestinationDllName))
    _bstr_t DestinationDllName;
    __declspec(property(get=GetExchangeTabHasColumnHeadings,put=PutExchangeTabHasColumnHeadings))
    VARIANT_BOOL ExchangeTabHasColumnHeadings;
    __declspec(property(get=GetApplicationFileName,put=PutApplicationFileName))
    _bstr_t ApplicationFileName;
    __declspec(property(get=GetLotusDominoDatabaseName,put=PutLotusDominoDatabaseName))
    _bstr_t LotusDominoDatabaseName;
    __declspec(property(get=GetLotusDominoFormName,put=PutLotusDominoFormName))
    _bstr_t LotusDominoFormName;
    __declspec(property(get=GetLotusDominoComments,put=PutLotusDominoComments))
    _bstr_t LotusDominoComments;
    __declspec(property(get=GetHTMLHasPageNavigator,put=PutHTMLHasPageNavigator))
    VARIANT_BOOL HTMLHasPageNavigator;
    __declspec(property(get=GetPDFLastPageNumber,put=PutPDFLastPageNumber))
    long PDFLastPageNumber;
    __declspec(property(get=GetRTFExportAllPages,put=PutRTFExportAllPages))
    VARIANT_BOOL RTFExportAllPages;
    __declspec(property(get=GetRTFFirstPageNumber,put=PutRTFFirstPageNumber))
    long RTFFirstPageNumber;
    __declspec(property(get=GetRTFLastPageNumber,put=PutRTFLastPageNumber))
    long RTFLastPageNumber;
    __declspec(property(get=GetXMLFileName,put=PutXMLFileName))
    _bstr_t XMLFileName;
    __declspec(property(get=GetXMLAllowMultipleFiles,put=PutXMLAllowMultipleFiles))
    VARIANT_BOOL XMLAllowMultipleFiles;
    __declspec(property(get=GetHTMLEnableSeparatedPages,put=PutHTMLEnableSeparatedPages))
    VARIANT_BOOL HTMLEnableSeparatedPages;
    __declspec(property(get=GetPDFExportAllPages,put=PutPDFExportAllPages))
    VARIANT_BOOL PDFExportAllPages;
    __declspec(property(get=GetPDFFirstPageNumber,put=PutPDFFirstPageNumber))
    long PDFFirstPageNumber;
    __declspec(property(get=GetExcelTabHasColumnHeadings,put=PutExcelTabHasColumnHeadings))
    VARIANT_BOOL ExcelTabHasColumnHeadings;
    __declspec(property(get=GetExcelUseWorksheetFunctions,put=PutExcelUseWorksheetFunctions))
    VARIANT_BOOL ExcelUseWorksheetFunctions;
    __declspec(property(get=GetParent))
    IReportPtr Parent;
    __declspec(property(get=GetWORDWExportAllPages,put=PutWORDWExportAllPages))
    VARIANT_BOOL WORDWExportAllPages;
    __declspec(property(get=GetWORDWFirstPageNumber,put=PutWORDWFirstPageNumber))
    long WORDWFirstPageNumber;
    __declspec(property(get=GetWORDWLastPageNumber,put=PutWORDWLastPageNumber))
    long WORDWLastPageNumber;
    __declspec(property(get=GetExcelPageBreaks,put=PutExcelPageBreaks))
    VARIANT_BOOL ExcelPageBreaks;

    //
    // Wrapper methods for error-handling
    //

    IReportPtr GetParent ( );
    enum CRExportFormatType GetFormatType ( );
    void PutFormatType (
        enum CRExportFormatType pFormatType );
    enum CRExportDestinationType GetDestinationType ( );
    void PutDestinationType (
        enum CRExportDestinationType pDestinationType );
    _bstr_t GetExchangeProfile ( );
    void PutExchangeProfile (
        _bstr_t ppExchangeProfile );
    _bstr_t GetDiskFileName ( );
    void PutDiskFileName (
        _bstr_t ppDiskFileName );
    VARIANT_BOOL GetUseReportDateFormat ( );
    void PutUseReportDateFormat (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetUseReportNumberFormat ( );
    void PutUseReportNumberFormat (
        VARIANT_BOOL pBool );
    _bstr_t GetCharFieldDelimiter ( );
    void PutCharFieldDelimiter (
        _bstr_t ppCharFieldDelimiter );
    _bstr_t GetCharStringDelimiter ( );
    void PutCharStringDelimiter (
        _bstr_t ppCharStringDelimiter );
    short GetNumberOfLinesPerPage ( );
    void PutNumberOfLinesPerPage (
        short pNumberOfLinesPerPage );
    _bstr_t GetODBCDataSourceName ( );
    void PutODBCDataSourceName (
        _bstr_t ppODBCDataSourceName );
    _bstr_t GetODBCDataSourceUserID ( );
    void PutODBCDataSourceUserID (
        _bstr_t ppODBCDataSourceUserID );
    void PutODBCDataSourcePassword (
        _bstr_t _arg1 );
    _bstr_t GetODBCExportTableName ( );
    void PutODBCExportTableName (
        _bstr_t ppODBCExportTableName );
    _bstr_t GetHTMLFileName ( );
    void PutHTMLFileName (
        _bstr_t ppHTMLFileName );
    void PutExchangePassword (
        _bstr_t _arg1 );
    enum CRExchangeDestinationType GetExchangeDestinationType ( );
    void PutExchangeDestinationType (
        enum CRExchangeDestinationType pExchangeDestinationType );
    _bstr_t GetExchangeFolderPath ( );
    void PutExchangeFolderPath (
        _bstr_t ppExchangeFolderPath );
    _bstr_t GetMailCcList ( );
    void PutMailCcList (
        _bstr_t ppMailCcList );
    _bstr_t GetMailToList ( );
    void PutMailToList (
        _bstr_t ppMailToList );
    _bstr_t GetMailSubject ( );
    void PutMailSubject (
        _bstr_t ppMailSubject );
    _bstr_t GetMailMessage ( );
    void PutMailMessage (
        _bstr_t ppMailMessage );
    _bstr_t GetMailBccList ( );
    void PutMailBccList (
        _bstr_t ppMailBccList );
    _bstr_t GetFormatDllName ( );
    _bstr_t GetDestinationDllName ( );
    VARIANT_BOOL GetExchangeTabHasColumnHeadings ( );
    void PutExchangeTabHasColumnHeadings (
        VARIANT_BOOL pBool );
    HRESULT Reset ( );
    HRESULT PromptForExportOptions ( );
    VARIANT_BOOL GetExcelTabHasColumnHeadings ( );
    void PutExcelTabHasColumnHeadings (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetExcelUseWorksheetFunctions ( );
    void PutExcelUseWorksheetFunctions (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetExcelUseConstantColumnWidth ( );
    void PutExcelUseConstantColumnWidth (
        VARIANT_BOOL pBool );
    double GetExcelConstantColumnWidth ( );
    void PutExcelConstantColumnWidth (
        double pColWidth );
    enum CRAreaKind GetExcelAreaType ( );
    void PutExcelAreaType (
        enum CRAreaKind pAreaKind );
    short GetExcelAreaGroupNumber ( );
    void PutExcelAreaGroupNumber (
        short pGroupNumber );
    VARIANT_BOOL GetExcelUseTabularFormat ( );
    void PutExcelUseTabularFormat (
        VARIANT_BOOL pBool );
    _bstr_t GetApplicationFileName ( );
    void PutApplicationFileName (
        _bstr_t ppAppFileName );
    _bstr_t GetLotusDominoDatabaseName ( );
    void PutLotusDominoDatabaseName (
        _bstr_t ppLotusDominoDatabaseName );
    _bstr_t GetLotusDominoFormName ( );
    void PutLotusDominoFormName (
        _bstr_t ppLotusDominoFormName );
    _bstr_t GetLotusDominoComments ( );
    void PutLotusDominoComments (
        _bstr_t ppLotusDominoComments );
    VARIANT_BOOL GetHTMLEnableSeparatedPages ( );
    void PutHTMLEnableSeparatedPages (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetHTMLHasPageNavigator ( );
    void PutHTMLHasPageNavigator (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetPDFExportAllPages ( );
    void PutPDFExportAllPages (
        VARIANT_BOOL pBool );
    long GetPDFFirstPageNumber ( );
    void PutPDFFirstPageNumber (
        long pFirstPageNumber );
    long GetPDFLastPageNumber ( );
    void PutPDFLastPageNumber (
        long pLastPageNumber );
    VARIANT_BOOL GetRTFExportAllPages ( );
    void PutRTFExportAllPages (
        VARIANT_BOOL pBool );
    long GetRTFFirstPageNumber ( );
    void PutRTFFirstPageNumber (
        long pFirstPageNumber );
    long GetRTFLastPageNumber ( );
    void PutRTFLastPageNumber (
        long pLastPageNumber );
    _bstr_t GetXMLFileName ( );
    void PutXMLFileName (
        _bstr_t ppXMLFileName );
    VARIANT_BOOL GetXMLAllowMultipleFiles ( );
    void PutXMLAllowMultipleFiles (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetWORDWExportAllPages ( );
    void PutWORDWExportAllPages (
        VARIANT_BOOL pBool );
    long GetWORDWFirstPageNumber ( );
    void PutWORDWFirstPageNumber (
        long pFirstPageNumber );
    long GetWORDWLastPageNumber ( );
    void PutWORDWLastPageNumber (
        long pLastPageNumber );
    VARIANT_BOOL GetUseDefaultCharactersPerInch ( );
    void PutUseDefaultCharactersPerInch (
        VARIANT_BOOL pBool );
    long GetUserDefinedCharactersPerInch ( );
    void PutUserDefinedCharactersPerInch (
        long pUserDefinedCPI );
    void PutExcelPageBreaks (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetExcelPageBreaks ( );
    void PutExcelConvertDateToString (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetExcelConvertDateToString ( );
    VARIANT_BOOL GetExcelExportAllPages ( );
    void PutExcelExportAllPages (
        VARIANT_BOOL pBool );
    long GetExcelFirstPageNumber ( );
    void PutExcelFirstPageNumber (
        long pFirstPageNumber );
    long GetExcelLastPageNumber ( );
    void PutExcelLastPageNumber (
        long pLastPageNumber );
    _bstr_t GetMailUserName ( );
    void PutMailUserName (
        _bstr_t ppUserName );
    _bstr_t GetMailPassword ( );
    void PutMailPassword (
        _bstr_t ppPassword );
    enum CRExcelExportPageAreaPair GetExcelExportPageAreaPair ( );
    void PutExcelExportPageAreaPair (
        enum CRExcelExportPageAreaPair exportPageAreaPair );
    VARIANT_BOOL GetExcelMaintainRelativeObjectPosition ( );
    void PutExcelMaintainRelativeObjectPosition (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetExcelShowGridlines ( );
    void PutExcelShowGridlines (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetExcelChopPageHeader ( );
    void PutExcelChopPageHeader (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetExcelExportImagesInDataOnly ( );
    void PutExcelExportImagesInDataOnly (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetExcelUseFormatInDataOnly ( );
    void PutExcelUseFormatInDataOnly (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetExcelMaintainColumnAlignment ( );
    void PutExcelMaintainColumnAlignment (
        VARIANT_BOOL pBool );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Parent (
        struct IReport * * ppParent ) = 0;
    virtual HRESULT __stdcall get_FormatType (
        enum CRExportFormatType * pFormatType ) = 0;
    virtual HRESULT __stdcall put_FormatType (
        enum CRExportFormatType pFormatType ) = 0;
    virtual HRESULT __stdcall get_DestinationType (
        enum CRExportDestinationType * pDestinationType ) = 0;
    virtual HRESULT __stdcall put_DestinationType (
        enum CRExportDestinationType pDestinationType ) = 0;
    virtual HRESULT __stdcall get_ExchangeProfile (
        BSTR * ppExchangeProfile ) = 0;
    virtual HRESULT __stdcall put_ExchangeProfile (
        BSTR ppExchangeProfile ) = 0;
    virtual HRESULT __stdcall get_DiskFileName (
        BSTR * ppDiskFileName ) = 0;
    virtual HRESULT __stdcall put_DiskFileName (
        BSTR ppDiskFileName ) = 0;
    virtual HRESULT __stdcall get_UseReportDateFormat (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_UseReportDateFormat (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_UseReportNumberFormat (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_UseReportNumberFormat (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_CharFieldDelimiter (
        BSTR * ppCharFieldDelimiter ) = 0;
    virtual HRESULT __stdcall put_CharFieldDelimiter (
        BSTR ppCharFieldDelimiter ) = 0;
    virtual HRESULT __stdcall get_CharStringDelimiter (
        BSTR * ppCharStringDelimiter ) = 0;
    virtual HRESULT __stdcall put_CharStringDelimiter (
        BSTR ppCharStringDelimiter ) = 0;
    virtual HRESULT __stdcall get_NumberOfLinesPerPage (
        short * pNumberOfLinesPerPage ) = 0;
    virtual HRESULT __stdcall put_NumberOfLinesPerPage (
        short pNumberOfLinesPerPage ) = 0;
    virtual HRESULT __stdcall get_ODBCDataSourceName (
        BSTR * ppODBCDataSourceName ) = 0;
    virtual HRESULT __stdcall put_ODBCDataSourceName (
        BSTR ppODBCDataSourceName ) = 0;
    virtual HRESULT __stdcall get_ODBCDataSourceUserID (
        BSTR * ppODBCDataSourceUserID ) = 0;
    virtual HRESULT __stdcall put_ODBCDataSourceUserID (
        BSTR ppODBCDataSourceUserID ) = 0;
    virtual HRESULT __stdcall put_ODBCDataSourcePassword (
        BSTR _arg1 ) = 0;
    virtual HRESULT __stdcall get_ODBCExportTableName (
        BSTR * ppODBCExportTableName ) = 0;
    virtual HRESULT __stdcall put_ODBCExportTableName (
        BSTR ppODBCExportTableName ) = 0;
    virtual HRESULT __stdcall get_HTMLFileName (
        BSTR * ppHTMLFileName ) = 0;
    virtual HRESULT __stdcall put_HTMLFileName (
        BSTR ppHTMLFileName ) = 0;
    virtual HRESULT __stdcall put_ExchangePassword (
        BSTR _arg1 ) = 0;
    virtual HRESULT __stdcall get_ExchangeDestinationType (
        enum CRExchangeDestinationType * pExchangeDestinationType ) = 0;
    virtual HRESULT __stdcall put_ExchangeDestinationType (
        enum CRExchangeDestinationType pExchangeDestinationType ) = 0;
    virtual HRESULT __stdcall get_ExchangeFolderPath (
        BSTR * ppExchangeFolderPath ) = 0;
    virtual HRESULT __stdcall put_ExchangeFolderPath (
        BSTR ppExchangeFolderPath ) = 0;
    virtual HRESULT __stdcall get_MailCcList (
        BSTR * ppMailCcList ) = 0;
    virtual HRESULT __stdcall put_MailCcList (
        BSTR ppMailCcList ) = 0;
    virtual HRESULT __stdcall get_MailToList (
        BSTR * ppMailToList ) = 0;
    virtual HRESULT __stdcall put_MailToList (
        BSTR ppMailToList ) = 0;
    virtual HRESULT __stdcall get_MailSubject (
        BSTR * ppMailSubject ) = 0;
    virtual HRESULT __stdcall put_MailSubject (
        BSTR ppMailSubject ) = 0;
    virtual HRESULT __stdcall get_MailMessage (
        BSTR * ppMailMessage ) = 0;
    virtual HRESULT __stdcall put_MailMessage (
        BSTR ppMailMessage ) = 0;
    virtual HRESULT __stdcall get_MailBccList (
        BSTR * ppMailBccList ) = 0;
    virtual HRESULT __stdcall put_MailBccList (
        BSTR ppMailBccList ) = 0;
    virtual HRESULT __stdcall get_FormatDllName (
        BSTR * ppFormatDllName ) = 0;
    virtual HRESULT __stdcall get_DestinationDllName (
        BSTR * ppDestinationDllName ) = 0;
    virtual HRESULT __stdcall get_ExchangeTabHasColumnHeadings (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_ExchangeTabHasColumnHeadings (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall raw_Reset ( ) = 0;
    virtual HRESULT __stdcall raw_PromptForExportOptions ( ) = 0;
    virtual HRESULT __stdcall get_ExcelTabHasColumnHeadings (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_ExcelTabHasColumnHeadings (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_ExcelUseWorksheetFunctions (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_ExcelUseWorksheetFunctions (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_ExcelUseConstantColumnWidth (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_ExcelUseConstantColumnWidth (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_ExcelConstantColumnWidth (
        double * pColWidth ) = 0;
    virtual HRESULT __stdcall put_ExcelConstantColumnWidth (
        double pColWidth ) = 0;
    virtual HRESULT __stdcall get_ExcelAreaType (
        enum CRAreaKind * pAreaKind ) = 0;
    virtual HRESULT __stdcall put_ExcelAreaType (
        enum CRAreaKind pAreaKind ) = 0;
    virtual HRESULT __stdcall get_ExcelAreaGroupNumber (
        short * pGroupNumber ) = 0;
    virtual HRESULT __stdcall put_ExcelAreaGroupNumber (
        short pGroupNumber ) = 0;
    virtual HRESULT __stdcall get_ExcelUseTabularFormat (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_ExcelUseTabularFormat (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_ApplicationFileName (
        BSTR * ppAppFileName ) = 0;
    virtual HRESULT __stdcall put_ApplicationFileName (
        BSTR ppAppFileName ) = 0;
    virtual HRESULT __stdcall get_LotusDominoDatabaseName (
        BSTR * ppLotusDominoDatabaseName ) = 0;
    virtual HRESULT __stdcall put_LotusDominoDatabaseName (
        BSTR ppLotusDominoDatabaseName ) = 0;
    virtual HRESULT __stdcall get_LotusDominoFormName (
        BSTR * ppLotusDominoFormName ) = 0;
    virtual HRESULT __stdcall put_LotusDominoFormName (
        BSTR ppLotusDominoFormName ) = 0;
    virtual HRESULT __stdcall get_LotusDominoComments (
        BSTR * ppLotusDominoComments ) = 0;
    virtual HRESULT __stdcall put_LotusDominoComments (
        BSTR ppLotusDominoComments ) = 0;
    virtual HRESULT __stdcall get_HTMLEnableSeparatedPages (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_HTMLEnableSeparatedPages (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_HTMLHasPageNavigator (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_HTMLHasPageNavigator (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_PDFExportAllPages (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_PDFExportAllPages (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_PDFFirstPageNumber (
        long * pFirstPageNumber ) = 0;
    virtual HRESULT __stdcall put_PDFFirstPageNumber (
        long pFirstPageNumber ) = 0;
    virtual HRESULT __stdcall get_PDFLastPageNumber (
        long * pLastPageNumber ) = 0;
    virtual HRESULT __stdcall put_PDFLastPageNumber (
        long pLastPageNumber ) = 0;
    virtual HRESULT __stdcall get_RTFExportAllPages (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_RTFExportAllPages (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_RTFFirstPageNumber (
        long * pFirstPageNumber ) = 0;
    virtual HRESULT __stdcall put_RTFFirstPageNumber (
        long pFirstPageNumber ) = 0;
    virtual HRESULT __stdcall get_RTFLastPageNumber (
        long * pLastPageNumber ) = 0;
    virtual HRESULT __stdcall put_RTFLastPageNumber (
        long pLastPageNumber ) = 0;
    virtual HRESULT __stdcall get_XMLFileName (
        BSTR * ppXMLFileName ) = 0;
    virtual HRESULT __stdcall put_XMLFileName (
        BSTR ppXMLFileName ) = 0;
    virtual HRESULT __stdcall get_XMLAllowMultipleFiles (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_XMLAllowMultipleFiles (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_WORDWExportAllPages (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_WORDWExportAllPages (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_WORDWFirstPageNumber (
        long * pFirstPageNumber ) = 0;
    virtual HRESULT __stdcall put_WORDWFirstPageNumber (
        long pFirstPageNumber ) = 0;
    virtual HRESULT __stdcall get_WORDWLastPageNumber (
        long * pLastPageNumber ) = 0;
    virtual HRESULT __stdcall put_WORDWLastPageNumber (
        long pLastPageNumber ) = 0;
    virtual HRESULT __stdcall get_UseDefaultCharactersPerInch (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_UseDefaultCharactersPerInch (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_UserDefinedCharactersPerInch (
        long * pUserDefinedCPI ) = 0;
    virtual HRESULT __stdcall put_UserDefinedCharactersPerInch (
        long pUserDefinedCPI ) = 0;
    virtual HRESULT __stdcall put_ExcelPageBreaks (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_ExcelPageBreaks (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_ExcelConvertDateToString (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_ExcelConvertDateToString (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall get_ExcelExportAllPages (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_ExcelExportAllPages (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_ExcelFirstPageNumber (
        long * pFirstPageNumber ) = 0;
    virtual HRESULT __stdcall put_ExcelFirstPageNumber (
        long pFirstPageNumber ) = 0;
    virtual HRESULT __stdcall get_ExcelLastPageNumber (
        long * pLastPageNumber ) = 0;
    virtual HRESULT __stdcall put_ExcelLastPageNumber (
        long pLastPageNumber ) = 0;
    virtual HRESULT __stdcall get_MailUserName (
        BSTR * ppUserName ) = 0;
    virtual HRESULT __stdcall put_MailUserName (
        BSTR ppUserName ) = 0;
    virtual HRESULT __stdcall get_MailPassword (
        BSTR * ppPassword ) = 0;
    virtual HRESULT __stdcall put_MailPassword (
        BSTR ppPassword ) = 0;
    virtual HRESULT __stdcall get_ExcelExportPageAreaPair (
        enum CRExcelExportPageAreaPair * exportPageAreaPair ) = 0;
    virtual HRESULT __stdcall put_ExcelExportPageAreaPair (
        enum CRExcelExportPageAreaPair exportPageAreaPair ) = 0;
    virtual HRESULT __stdcall get_ExcelMaintainRelativeObjectPosition (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_ExcelMaintainRelativeObjectPosition (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_ExcelShowGridlines (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_ExcelShowGridlines (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_ExcelChopPageHeader (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_ExcelChopPageHeader (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_ExcelExportImagesInDataOnly (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_ExcelExportImagesInDataOnly (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_ExcelUseFormatInDataOnly (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_ExcelUseFormatInDataOnly (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_ExcelMaintainColumnAlignment (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_ExcelMaintainColumnAlignment (
        VARIANT_BOOL pBool ) = 0;
};

enum CRExportFormatType
{
    crEFTNoFormat = 0,
    crEFTCrystalReport = 1,
    crEFTDataInterchange = 2,
    crEFTRecordStyle = 3,
    crEFTRichText = 4,
    crEFTCommaSeparatedValues = 5,
    crEFTTabSeparatedValues = 6,
    crEFTCharSeparatedValues = 7,
    crEFTText = 8,
    crEFTTabSeparatedText = 9,
    crEFTPaginatedText = 10,
    crEFTLotus123WKS = 11,
    crEFTLotus123WK1 = 12,
    crEFTLotus123WK3 = 13,
    crEFTWordForWindows = 14,
    crEFTExcel21 = 18,
    crEFTExcel30 = 19,
    crEFTExcel40 = 20,
    crEFTExcel50 = 21,
    crEFTExcel50Tabular = 22,
    crEFTODBC = 23,
    crEFTHTML32Standard = 24,
    crEFTExplorer32Extend = 25,
    crEFTNetScape20 = 26,
    crEFTExcel70 = 27,
    crEFTExcel70Tabular = 28,
    crEFTExcel80 = 29,
    crEFTExcel80Tabular = 30,
    crEFTPortableDocFormat = 31,
    crEFTHTML40 = 32,
    crEFTCrystalReport70 = 33,
    crEFTReportDefinition = 34,
    crEFTExactRichText = 35,
    crEFTExcel97 = 36,
    crEFTXML = 37,
    crEFTExcelDataOnly = 38
};

enum CRExportDestinationType
{
    crEDTNoDestination = 0,
    crEDTDiskFile = 1,
    crEDTEMailMAPI = 2,
    crEDTEMailVIM = 3,
    crEDTMicrosoftExchange = 4,
    crEDTApplication = 5,
    crEDTLotusDomino = 6
};

enum CRExchangeDestinationType
{
    crExhangeFolderType = 0,
    crExchangePostDocMessage = 1011
};

enum CRExcelExportPageAreaPair
{
    crExportNoPageAreaPair = 0,
    crExportPageAreaPairOncePerReport = 1,
    crExportPageAreaPairForEachPage = 2
};

struct __declspec(uuid("af376830-6120-4e28-96dd-63fd2dc27b7a"))
IApplication : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    IReportPtr OpenReport (
        _bstr_t pFileName,
        const _variant_t & OpenMethod = vtMissing );
    VARIANT_BOOL CanClose ( );
    HRESULT LogOnServer (
        _bstr_t pDllName,
        _bstr_t pServerName,
        const _variant_t & pDatabaseName = vtMissing,
        const _variant_t & pUserID = vtMissing,
        const _variant_t & pPassword = vtMissing );
    HRESULT LogOffServer (
        _bstr_t pDllName,
        _bstr_t pServerName,
        const _variant_t & pDatabaseName = vtMissing,
        const _variant_t & pUserID = vtMissing,
        const _variant_t & pPassword = vtMissing );
    HRESULT SetMorePrintEngineErrorMessages (
        VARIANT_BOOL bl );
    HRESULT SetMatchLogOnInfo (
        VARIANT_BOOL bl );
    IReportPtr NewReport ( );
    short GetVersion ( );
    HRESULT LogOnServerEx (
        _bstr_t pDllName,
        _bstr_t pServerName,
        const _variant_t & pDatabaseName = vtMissing,
        const _variant_t & pUserID = vtMissing,
        const _variant_t & pPassword = vtMissing,
        const _variant_t & pServerType = vtMissing,
        const _variant_t & pConnectionString = vtMissing );
    HRESULT LogOnServerWithPrivateInfo (
        _bstr_t pDllName,
        const _variant_t & privateInfo );
    VARIANT_BOOL GetLicenseStatus (
        VARIANT * pMaxLicenseNumber,
        VARIANT * pLicenseUsed );
    HRESULT SetLicenseKeycode (
        _bstr_t pKeycode );
    HRESULT RunReportWizard (
        struct IReport * pReport,
        const _variant_t & dataSource );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_OpenReport (
        BSTR pFileName,
        VARIANT OpenMethod,
        struct IReport * * ppReport ) = 0;
    virtual HRESULT __stdcall raw_CanClose (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall raw_LogOnServer (
        BSTR pDllName,
        BSTR pServerName,
        VARIANT pDatabaseName = vtMissing,
        VARIANT pUserID = vtMissing,
        VARIANT pPassword = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_LogOffServer (
        BSTR pDllName,
        BSTR pServerName,
        VARIANT pDatabaseName = vtMissing,
        VARIANT pUserID = vtMissing,
        VARIANT pPassword = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_SetMorePrintEngineErrorMessages (
        VARIANT_BOOL bl ) = 0;
    virtual HRESULT __stdcall raw_SetMatchLogOnInfo (
        VARIANT_BOOL bl ) = 0;
    virtual HRESULT __stdcall raw_NewReport (
        struct IReport * * ppReport ) = 0;
    virtual HRESULT __stdcall raw_GetVersion (
        short * versionNumber ) = 0;
    virtual HRESULT __stdcall raw_LogOnServerEx (
        BSTR pDllName,
        BSTR pServerName,
        VARIANT pDatabaseName = vtMissing,
        VARIANT pUserID = vtMissing,
        VARIANT pPassword = vtMissing,
        VARIANT pServerType = vtMissing,
        VARIANT pConnectionString = vtMissing ) = 0;
    virtual HRESULT __stdcall raw_LogOnServerWithPrivateInfo (
        BSTR pDllName,
        VARIANT privateInfo ) = 0;
    virtual HRESULT __stdcall raw_GetLicenseStatus (
        VARIANT * pMaxLicenseNumber,
        VARIANT * pLicenseUsed,
        VARIANT_BOOL * pIsActive ) = 0;
    virtual HRESULT __stdcall raw_SetLicenseKeycode (
        BSTR pKeycode ) = 0;
    virtual HRESULT __stdcall raw_RunReportWizard (
        struct IReport * pReport,
        VARIANT dataSource ) = 0;
};

struct __declspec(uuid("af376831-6120-4e28-96dd-63fd2dc27b7a"))
ISortFields : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    ISortFieldPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IReportPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    ISortFieldPtr GetItem (
        long index );
    long GetCount ( );
    IReportPtr GetParent ( );
    HRESULT Add (
        struct IFieldDefinition * pFieldDefinition,
        enum CRSortDirection SortDirection );
    HRESULT Delete (
        long index );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * ppNewEnum ) = 0;
    virtual HRESULT __stdcall get_Item (
        long index,
        struct ISortField * * ppSortField ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * pCount ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct IReport * * ppParent ) = 0;
    virtual HRESULT __stdcall raw_Add (
        struct IFieldDefinition * pFieldDefinition,
        enum CRSortDirection SortDirection ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        long index ) = 0;
};

struct __declspec(uuid("af376832-6120-4e28-96dd-63fd2dc27b7a"))
ISortField : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IReportPtr Parent;
    __declspec(property(get=GetField,put=PutField))
    IDispatchPtr Field;
    __declspec(property(get=GetSortDirection,put=PutSortDirection))
    enum CRSortDirection SortDirection;

    //
    // Wrapper methods for error-handling
    //

    IReportPtr GetParent ( );
    enum CRSortDirection GetSortDirection ( );
    void PutSortDirection (
        enum CRSortDirection pSortDirection );
    IDispatchPtr GetField ( );
    void PutField (
        IDispatch * ppField );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Parent (
        struct IReport * * ppParent ) = 0;
    virtual HRESULT __stdcall get_SortDirection (
        enum CRSortDirection * pSortDirection ) = 0;
    virtual HRESULT __stdcall put_SortDirection (
        enum CRSortDirection pSortDirection ) = 0;
    virtual HRESULT __stdcall get_Field (
        IDispatch * * ppField ) = 0;
    virtual HRESULT __stdcall put_Field (
        IDispatch * ppField ) = 0;
};

struct __declspec(uuid("af376833-6120-4e28-96dd-63fd2dc27b7a"))
IPrintingStatus : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IReportPtr Parent;
    __declspec(property(get=GetNumberOfRecordRead))
    long NumberOfRecordRead;
    __declspec(property(get=GetNumberOfRecordSelected))
    long NumberOfRecordSelected;
    __declspec(property(get=GetNumberOfRecordPrinted))
    long NumberOfRecordPrinted;
    __declspec(property(get=GetProgress))
    enum CRPrintingProgress Progress;
    __declspec(property(get=GetNumberOfPages))
    long NumberOfPages;

    //
    // Wrapper methods for error-handling
    //

    IReportPtr GetParent ( );
    long GetNumberOfRecordRead ( );
    long GetNumberOfRecordSelected ( );
    long GetNumberOfRecordPrinted ( );
    enum CRPrintingProgress GetProgress ( );
    long GetNumberOfPages ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Parent (
        struct IReport * * ppParent ) = 0;
    virtual HRESULT __stdcall get_NumberOfRecordRead (
        long * pRecordsRead ) = 0;
    virtual HRESULT __stdcall get_NumberOfRecordSelected (
        long * pRecordsSelected ) = 0;
    virtual HRESULT __stdcall get_NumberOfRecordPrinted (
        long * pRecordsPrinted ) = 0;
    virtual HRESULT __stdcall get_Progress (
        enum CRPrintingProgress * pProgress ) = 0;
    virtual HRESULT __stdcall get_NumberOfPages (
        long * pNumberOfPages ) = 0;
};

enum CRPrintingProgress
{
    crPrintingNotStarted = 1,
    crPrintingInProgress = 2,
    crPrintingCompleted = 3,
    crPrintingFailed = 4,
    crPrintingCancelled = 5,
    crPrintingHalted = 6
};

struct __declspec(uuid("af376822-6120-4e28-96dd-63fd2dc27b7a"))
IRunningTotalFieldDefinitions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IRunningTotalFieldDefinitionPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IReportPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    IRunningTotalFieldDefinitionPtr GetItem (
        long index );
    long GetCount ( );
    IReportPtr GetParent ( );
    IRunningTotalFieldDefinitionPtr Add (
        _bstr_t runningTotalName );
    HRESULT Delete (
        const _variant_t & index );
    IRunningTotalFieldDefinitionPtr GetItemByName (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * ppNewEnum ) = 0;
    virtual HRESULT __stdcall get_Item (
        long index,
        struct IRunningTotalFieldDefinition * * ppRunningTotalFieldDefinition ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * pCount ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct IReport * * ppParent ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR runningTotalName,
        struct IRunningTotalFieldDefinition * * ppRunningTotalDefinition ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT index ) = 0;
    virtual HRESULT __stdcall raw_GetItemByName (
        BSTR Name,
        struct IRunningTotalFieldDefinition * * ppRunningTotalFieldDefinition ) = 0;
};

struct __declspec(uuid("af376816-6120-4e28-96dd-63fd2dc27b7a"))
IRunningTotalFieldDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetHierarchicalSummaryType,put=PutHierarchicalSummaryType))
    enum CRHierarchicalSummaryType HierarchicalSummaryType;
    __declspec(property(get=GetSecondarySummarizedField))
    IDispatchPtr SecondarySummarizedField;
    __declspec(property(get=GetSummaryOperationParameter,put=PutSummaryOperationParameter))
    long SummaryOperationParameter;
    __declspec(property(get=GetEvaluateCondition))
    enum CRRunningTotalCondition EvaluateCondition;
    __declspec(property(get=GetResetCondition))
    enum CRRunningTotalCondition ResetCondition;
    __declspec(property(get=GetEvaluateGroupNumber,put=PutEvaluateGroupNumber))
    short EvaluateGroupNumber;
    __declspec(property(get=GetResetGroupNumber,put=PutResetGroupNumber))
    short ResetGroupNumber;
    __declspec(property(get=GetEvaluateConditionField))
    IDispatchPtr EvaluateConditionField;
    __declspec(property(get=GetResetConditionField))
    IDispatchPtr ResetConditionField;
    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetEvaluateConditionFormula,put=PutEvaluateConditionFormula))
    _bstr_t EvaluateConditionFormula;
    __declspec(property(get=GetParent))
    IReportPtr Parent;
    __declspec(property(get=GetKind))
    enum CRFieldKind Kind;
    __declspec(property(get=GetResetConditionFormula,put=PutResetConditionFormula))
    _bstr_t ResetConditionFormula;
    __declspec(property(get=GetSummarizedField))
    IDispatchPtr SummarizedField;
    __declspec(property(get=GetPreviousValue))
    _variant_t PreviousValue;
    __declspec(property(get=GetNextValue))
    _variant_t NextValue;
    __declspec(property(get=GetValueType))
    CRFieldValueType ValueType;
    __declspec(property(get=GetNumberOfBytes))
    short NumberOfBytes;
    __declspec(property(get=GetSummaryType,put=PutSummaryType))
    enum CRSummaryType SummaryType;
    __declspec(property(get=GetValue))
    _variant_t Value;
    __declspec(property(get=GetRunningTotalFieldName))
    _bstr_t RunningTotalFieldName;

    //
    // Wrapper methods for error-handling
    //

    enum CRFieldKind GetKind ( );
    CRFieldValueType GetValueType ( );
    short GetNumberOfBytes ( );
    _bstr_t GetName ( );
    _variant_t GetValue ( );
    IReportPtr GetParent ( );
    _variant_t GetPreviousValue ( );
    _variant_t GetNextValue ( );
    _bstr_t GetRunningTotalFieldName ( );
    IDispatchPtr GetSummarizedField ( );
    HRESULT SetSummarizedField (
        const _variant_t & SummarizedField );
    IDispatchPtr GetSecondarySummarizedField ( );
    HRESULT SetSecondarySummarizedField (
        const _variant_t & secondarySummariedField );
    long GetSummaryOperationParameter ( );
    void PutSummaryOperationParameter (
        long pOperationParameter );
    enum CRSummaryType GetSummaryType ( );
    void PutSummaryType (
        enum CRSummaryType pSummaryType );
    enum CRRunningTotalCondition GetEvaluateCondition ( );
    HRESULT SetNoEvaluateCondition ( );
    enum CRRunningTotalCondition GetResetCondition ( );
    HRESULT SetNoResetCondition ( );
    short GetEvaluateGroupNumber ( );
    void PutEvaluateGroupNumber (
        short pEvaluateGroupNumber );
    short GetResetGroupNumber ( );
    void PutResetGroupNumber (
        short pResetGroupNumber );
    IDispatchPtr GetEvaluateConditionField ( );
    HRESULT SetEvaluateConditionField (
        const _variant_t & pEvaluateConditionField );
    IDispatchPtr GetResetConditionField ( );
    HRESULT SetResetConditionField (
        const _variant_t & pResetConditionField );
    _bstr_t GetEvaluateConditionFormula ( );
    void PutEvaluateConditionFormula (
        _bstr_t ppText );
    _bstr_t GetResetConditionFormula ( );
    void PutResetConditionFormula (
        _bstr_t ppText );
    enum CRHierarchicalSummaryType GetHierarchicalSummaryType ( );
    void PutHierarchicalSummaryType (
        enum CRHierarchicalSummaryType pHierarchicalType );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Kind (
        enum CRFieldKind * pKind ) = 0;
    virtual HRESULT __stdcall get_ValueType (
        CRFieldValueType * pValueType ) = 0;
    virtual HRESULT __stdcall get_NumberOfBytes (
        short * pNumberOfBytes ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * pName ) = 0;
    virtual HRESULT __stdcall get_Value (
        VARIANT * pValue ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct IReport * * ppParent ) = 0;
    virtual HRESULT __stdcall get_PreviousValue (
        VARIANT * pPreValue ) = 0;
    virtual HRESULT __stdcall get_NextValue (
        VARIANT * pNextValue ) = 0;
    virtual HRESULT __stdcall get_RunningTotalFieldName (
        BSTR * ppRunningTotalFieldName ) = 0;
    virtual HRESULT __stdcall get_SummarizedField (
        IDispatch * * ppSummarizedField ) = 0;
    virtual HRESULT __stdcall raw_SetSummarizedField (
        VARIANT SummarizedField ) = 0;
    virtual HRESULT __stdcall get_SecondarySummarizedField (
        IDispatch * * ppSummarizedField ) = 0;
    virtual HRESULT __stdcall raw_SetSecondarySummarizedField (
        VARIANT secondarySummariedField ) = 0;
    virtual HRESULT __stdcall get_SummaryOperationParameter (
        long * pOperationParameter ) = 0;
    virtual HRESULT __stdcall put_SummaryOperationParameter (
        long pOperationParameter ) = 0;
    virtual HRESULT __stdcall get_SummaryType (
        enum CRSummaryType * pSummaryType ) = 0;
    virtual HRESULT __stdcall put_SummaryType (
        enum CRSummaryType pSummaryType ) = 0;
    virtual HRESULT __stdcall get_EvaluateCondition (
        enum CRRunningTotalCondition * pEvaluateCondition ) = 0;
    virtual HRESULT __stdcall raw_SetNoEvaluateCondition ( ) = 0;
    virtual HRESULT __stdcall get_ResetCondition (
        enum CRRunningTotalCondition * pResetCondition ) = 0;
    virtual HRESULT __stdcall raw_SetNoResetCondition ( ) = 0;
    virtual HRESULT __stdcall get_EvaluateGroupNumber (
        short * pEvaluateGroupNumber ) = 0;
    virtual HRESULT __stdcall put_EvaluateGroupNumber (
        short pEvaluateGroupNumber ) = 0;
    virtual HRESULT __stdcall get_ResetGroupNumber (
        short * pResetGroupNumber ) = 0;
    virtual HRESULT __stdcall put_ResetGroupNumber (
        short pResetGroupNumber ) = 0;
    virtual HRESULT __stdcall get_EvaluateConditionField (
        IDispatch * * ppEvaluateConditionField ) = 0;
    virtual HRESULT __stdcall raw_SetEvaluateConditionField (
        VARIANT pEvaluateConditionField ) = 0;
    virtual HRESULT __stdcall get_ResetConditionField (
        IDispatch * * ppResetConditionField ) = 0;
    virtual HRESULT __stdcall raw_SetResetConditionField (
        VARIANT pResetConditionField ) = 0;
    virtual HRESULT __stdcall get_EvaluateConditionFormula (
        BSTR * ppText ) = 0;
    virtual HRESULT __stdcall put_EvaluateConditionFormula (
        BSTR ppText ) = 0;
    virtual HRESULT __stdcall get_ResetConditionFormula (
        BSTR * ppText ) = 0;
    virtual HRESULT __stdcall put_ResetConditionFormula (
        BSTR ppText ) = 0;
    virtual HRESULT __stdcall get_HierarchicalSummaryType (
        enum CRHierarchicalSummaryType * pHierarchicalType ) = 0;
    virtual HRESULT __stdcall put_HierarchicalSummaryType (
        enum CRHierarchicalSummaryType pHierarchicalType ) = 0;
};

enum CRRunningTotalCondition
{
    crRTEvalNoCondition = 0,
    crRTEvalOnChangeOfField = 1,
    crRTEvalOnChangeOfGroup = 2,
    crRTEvalOnFormula = 3
};

struct __declspec(uuid("af376823-6120-4e28-96dd-63fd2dc27b7a"))
ISQLExpressionFieldDefinitions : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    ISQLExpressionFieldDefinitionPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IReportPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    ISQLExpressionFieldDefinitionPtr GetItem (
        long index );
    long GetCount ( );
    IReportPtr GetParent ( );
    ISQLExpressionFieldDefinitionPtr Add (
        _bstr_t SQLExpressionName,
        _bstr_t Text );
    HRESULT Delete (
        const _variant_t & index );
    ISQLExpressionFieldDefinitionPtr GetItemByName (
        _bstr_t Name );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * ppNewEnum ) = 0;
    virtual HRESULT __stdcall get_Item (
        long index,
        struct ISQLExpressionFieldDefinition * * ppSQLExpressionFieldDefinition ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * pCount ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct IReport * * ppParent ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR SQLExpressionName,
        BSTR Text,
        struct ISQLExpressionFieldDefinition * * ppSQLExpression ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT index ) = 0;
    virtual HRESULT __stdcall raw_GetItemByName (
        BSTR Name,
        struct ISQLExpressionFieldDefinition * * ppSQLExpressionFieldDefinition ) = 0;
};

struct __declspec(uuid("af376817-6120-4e28-96dd-63fd2dc27b7a"))
ISQLExpressionFieldDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetValueType))
    CRFieldValueType ValueType;
    __declspec(property(get=GetNumberOfBytes))
    short NumberOfBytes;
    __declspec(property(get=GetParent))
    IReportPtr Parent;
    __declspec(property(get=GetKind))
    enum CRFieldKind Kind;
    __declspec(property(get=GetPreviousValue))
    _variant_t PreviousValue;
    __declspec(property(get=GetNextValue))
    _variant_t NextValue;
    __declspec(property(get=GetValue))
    _variant_t Value;
    __declspec(property(get=GetText,put=PutText))
    _bstr_t Text;
    __declspec(property(get=GetSQLExpressionFieldName))
    _bstr_t SQLExpressionFieldName;

    //
    // Wrapper methods for error-handling
    //

    enum CRFieldKind GetKind ( );
    CRFieldValueType GetValueType ( );
    short GetNumberOfBytes ( );
    _bstr_t GetName ( );
    _variant_t GetValue ( );
    IReportPtr GetParent ( );
    _variant_t GetPreviousValue ( );
    _variant_t GetNextValue ( );
    _bstr_t GetSQLExpressionFieldName ( );
    _bstr_t GetText ( );
    void PutText (
        _bstr_t ppText );
    HRESULT Check (
        VARIANT_BOOL * pBool,
        BSTR * ppErrorString );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Kind (
        enum CRFieldKind * pKind ) = 0;
    virtual HRESULT __stdcall get_ValueType (
        CRFieldValueType * pValueType ) = 0;
    virtual HRESULT __stdcall get_NumberOfBytes (
        short * pNumberOfBytes ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * pName ) = 0;
    virtual HRESULT __stdcall get_Value (
        VARIANT * pValue ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct IReport * * ppParent ) = 0;
    virtual HRESULT __stdcall get_PreviousValue (
        VARIANT * pPreValue ) = 0;
    virtual HRESULT __stdcall get_NextValue (
        VARIANT * pNextValue ) = 0;
    virtual HRESULT __stdcall get_SQLExpressionFieldName (
        BSTR * ppSQLExpressionFieldName ) = 0;
    virtual HRESULT __stdcall get_Text (
        BSTR * ppText ) = 0;
    virtual HRESULT __stdcall put_Text (
        BSTR ppText ) = 0;
    virtual HRESULT __stdcall raw_Check (
        VARIANT_BOOL * pBool,
        BSTR * ppErrorString ) = 0;
};

enum CRReportVariableValueType
{
    crRVNumber = 0,
    crRVCurrency = 1,
    crRVBoolean = 2,
    crRVDate = 3,
    crRVTime = 4,
    crRVDateTime = 5,
    crRVString = 6
};

enum CRReportFormatStyle
{
    crRFStandardStyle = 0,
    crRFLeadingBreakStyle = 1,
    crRFTrailingBreakStyle = 2,
    crRFTableStyle = 3,
    crRFDropTableStyle = 4,
    crRFExecutiveLeadingBreakStyle = 5,
    crRFExecutiveTrailingBreakStyle = 6,
    crRFShadingStyle = 7,
    crRFRedBlueBorderStyle = 8,
    crRFMartoonTealBoxStyle = 9
};

enum CRPrinterDuplexType
{
    crPRDPDefault = 0,
    crPRDPSimplex = 1,
    crPRDPVertical = 2,
    crPRDPHorizontal = 3
};

enum CRPaperSource
{
    crPRBinUpper = 1,
    crPRBinLower = 2,
    crPRBinMiddle = 3,
    crPRBinManual = 4,
    crPRBinEnvelope = 5,
    crPRBinEnvManual = 6,
    crPRBinAuto = 7,
    crPRBinTractor = 8,
    crPRBinSmallFmt = 9,
    crPRBinLargeFmt = 10,
    crPRBinLargeCapacity = 11,
    crPRBinCassette = 14,
    crPRBinFormSource = 15
};

enum CRBindingMatchType
{
    crBMTName = 0,
    crBMTNameAndValue = 1
};

enum CRReportFileFormat
{
    crDefaultFileFormat = 0,
    cr70FileFormat = 1792,
    cr80FileFormat = 2048
};

enum CRFieldMappingType
{
    crAutoFieldMapping = 0,
    crPromptFieldMapping = 1,
    crEventFieldMapping = 2
};

enum CRFormulaSyntax
{
    crCrystalSyntaxFormula = 0,
    crBasicSyntaxFormula = 1
};

struct __declspec(uuid("af37685c-6120-4e28-96dd-63fd2dc27b7a"))
IReportAlerts : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IReportAlertPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IReportPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    IReportAlertPtr GetItem (
        const _variant_t & index );
    long GetCount ( );
    IReportPtr GetParent ( );
    IReportAlertPtr Add (
        _bstr_t Name,
        _bstr_t DefaultMessage,
        VARIANT_BOOL IsEnabled,
        _bstr_t ConditionFormula,
        _bstr_t MessageFormula );
    HRESULT Delete (
        const _variant_t & index );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * ppNewEnum ) = 0;
    virtual HRESULT __stdcall get_Item (
        VARIANT index,
        struct IReportAlert * * ppReportAlert ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * pCount ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct IReport * * ppParent ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR Name,
        BSTR DefaultMessage,
        VARIANT_BOOL IsEnabled,
        BSTR ConditionFormula,
        BSTR MessageFormula,
        struct IReportAlert * * ppAlert ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT index ) = 0;
};

struct __declspec(uuid("af37685b-6120-4e28-96dd-63fd2dc27b7a"))
IReportAlert : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetParent))
    IReportPtr Parent;
    __declspec(property(get=GetAlertInstances))
    IReportAlertInstancesPtr AlertInstances;
    __declspec(property(get=GetMessageFormula,put=PutMessageFormula))
    _bstr_t MessageFormula;
    __declspec(property(get=GetDefaultMessage,put=PutDefaultMessage))
    _bstr_t DefaultMessage;
    __declspec(property(get=GetIsEnabled,put=PutIsEnabled))
    VARIANT_BOOL IsEnabled;
    __declspec(property(get=GetConditionFormula,put=PutConditionFormula))
    _bstr_t ConditionFormula;

    //
    // Wrapper methods for error-handling
    //

    IReportPtr GetParent ( );
    _bstr_t GetName ( );
    void PutName (
        _bstr_t ppName );
    _bstr_t GetDefaultMessage ( );
    void PutDefaultMessage (
        _bstr_t ppMessage );
    VARIANT_BOOL GetIsEnabled ( );
    void PutIsEnabled (
        VARIANT_BOOL pBool );
    _bstr_t GetConditionFormula ( );
    void PutConditionFormula (
        _bstr_t ppText );
    _bstr_t GetMessageFormula ( );
    void PutMessageFormula (
        _bstr_t ppText );
    IReportAlertInstancesPtr GetAlertInstances ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Parent (
        struct IReport * * ppParent ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * ppName ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR ppName ) = 0;
    virtual HRESULT __stdcall get_DefaultMessage (
        BSTR * ppMessage ) = 0;
    virtual HRESULT __stdcall put_DefaultMessage (
        BSTR ppMessage ) = 0;
    virtual HRESULT __stdcall get_IsEnabled (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_IsEnabled (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_ConditionFormula (
        BSTR * ppText ) = 0;
    virtual HRESULT __stdcall put_ConditionFormula (
        BSTR ppText ) = 0;
    virtual HRESULT __stdcall get_MessageFormula (
        BSTR * ppText ) = 0;
    virtual HRESULT __stdcall put_MessageFormula (
        BSTR ppText ) = 0;
    virtual HRESULT __stdcall get_AlertInstances (
        struct IReportAlertInstances * * ppInstances ) = 0;
};

struct __declspec(uuid("af37685e-6120-4e28-96dd-63fd2dc27b7a"))
IReportAlertInstances : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IReportAlertInstancePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetParent))
    IReportAlertPtr Parent;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    IReportAlertInstancePtr GetItem (
        long index );
    long GetCount ( );
    IReportAlertPtr GetParent ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * ppNewEnum ) = 0;
    virtual HRESULT __stdcall get_Item (
        long index,
        struct IReportAlertInstance * * ppReportAlertInstance ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * pCount ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct IReportAlert * * ppParent ) = 0;
};

struct __declspec(uuid("af37685d-6120-4e28-96dd-63fd2dc27b7a"))
IReportAlertInstance : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParent))
    IReportAlertPtr Parent;
    __declspec(property(get=GetAlertMessage))
    _bstr_t AlertMessage;

    //
    // Wrapper methods for error-handling
    //

    IReportAlertPtr GetParent ( );
    _bstr_t GetAlertMessage ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Parent (
        struct IReportAlert * * ppParent ) = 0;
    virtual HRESULT __stdcall get_AlertMessage (
        BSTR * ppMessage ) = 0;
};

struct __declspec(uuid("3dcc8fb4-c434-11d1-a817-00a0c92784cd"))
ICrystalReportSource : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT GetPage (
        long lCookie,
        _bstr_t bstrBranch,
        _bstr_t bstrFormula,
        long lPageNumber,
        short DrillDownLevel );
    HRESULT GetTotaller (
        long lCookie,
        _bstr_t bstrBranch,
        _bstr_t bstrFormula,
        _bstr_t bstrRootGroup,
        long lStartFrom,
        short nLevelsPastRoot,
        const _variant_t & vtMaxNodeCount );
    HRESULT GetLastPageNumber (
        long lCookie,
        _bstr_t bstrBranch,
        _bstr_t bstrFormula,
        short DrillDownLevel );
    HRESULT FindGroup (
        long lCookie,
        _bstr_t bstrBranch,
        _bstr_t bstrFormula,
        _bstr_t bstrGroupPath,
        short DrillDownLevel );
    HRESULT FindText (
        long lCookie,
        _bstr_t bstrBranch,
        _bstr_t bstrFormula,
        long lFromPage,
        long lFromInstance,
        _bstr_t bstrText,
        enum CRSearchDirection nMode,
        short DrillDownLevel );
    HRESULT DrillGraph (
        long lCookie,
        _bstr_t bstrBranch,
        _bstr_t bstrFormula,
        long lPageNumber,
        long xOffset,
        long yOffset,
        short DrillDownLevel );
    HRESULT Refresh (
        long lCookie );
    HRESULT Cancel (
        long lCookie );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_GetPage (
        long lCookie,
        BSTR bstrBranch,
        BSTR bstrFormula,
        long lPageNumber,
        short DrillDownLevel ) = 0;
    virtual HRESULT __stdcall raw_GetTotaller (
        long lCookie,
        BSTR bstrBranch,
        BSTR bstrFormula,
        BSTR bstrRootGroup,
        long lStartFrom,
        short nLevelsPastRoot,
        VARIANT vtMaxNodeCount ) = 0;
    virtual HRESULT __stdcall raw_GetLastPageNumber (
        long lCookie,
        BSTR bstrBranch,
        BSTR bstrFormula,
        short DrillDownLevel ) = 0;
    virtual HRESULT __stdcall raw_FindGroup (
        long lCookie,
        BSTR bstrBranch,
        BSTR bstrFormula,
        BSTR bstrGroupPath,
        short DrillDownLevel ) = 0;
    virtual HRESULT __stdcall raw_FindText (
        long lCookie,
        BSTR bstrBranch,
        BSTR bstrFormula,
        long lFromPage,
        long lFromInstance,
        BSTR bstrText,
        enum CRSearchDirection nMode,
        short DrillDownLevel ) = 0;
    virtual HRESULT __stdcall raw_DrillGraph (
        long lCookie,
        BSTR bstrBranch,
        BSTR bstrFormula,
        long lPageNumber,
        long xOffset,
        long yOffset,
        short DrillDownLevel ) = 0;
    virtual HRESULT __stdcall raw_Refresh (
        long lCookie ) = 0;
    virtual HRESULT __stdcall raw_Cancel (
        long lCookie ) = 0;
};

struct __declspec(uuid("3dcc8fb5-c434-11d1-a817-00a0c92784cd"))
ICrystalReportProperties : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetTitle ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_GetTitle (
        BSTR * pVal ) = 0;
};

struct __declspec(uuid("6876d971-f0f2-11d1-bedf-00a0c95a6a5c"))
ICrystalReportSourceProperties : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    enum CRImageType GetImageType ( );
    VARIANT_BOOL SupportsSelectionFormula ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_GetImageType (
        enum CRImageType * pVal ) = 0;
    virtual HRESULT __stdcall raw_SupportsSelectionFormula (
        VARIANT_BOOL * pVal ) = 0;
};

struct __declspec(uuid("b25f55d1-2313-11d2-bf21-00a0c95a6a5c"))
ICrystalReportSourceProperties2 : ICrystalReportSourceProperties
{
    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL SupportsExport ( );
    VARIANT_BOOL SupportsSearchExpert ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_SupportsExport (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall raw_SupportsSearchExpert (
        VARIANT_BOOL * pVal ) = 0;
};

struct __declspec(uuid("25a6cb81-5a76-11d3-bfc3-00a0c9da4fa2"))
ICrystalReportSourceProperties3 : ICrystalReportSourceProperties2
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SetContainer (
        IUnknown * newVal );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_SetContainer (
        IUnknown * newVal ) = 0;
};

struct __declspec(uuid("a9a6c0ee-956b-4c15-9b1c-b4255508b244"))
ICrystalReportSourceProperties4 : ICrystalReportSourceProperties3
{
    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL SupportsExportInDrilldownViews ( );
    HRESULT RequestSmartImageHandling (
        VARIANT_BOOL newVal );
    VARIANT_BOOL SupportsExportPageRanges ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_SupportsExportInDrilldownViews (
        VARIANT_BOOL * pVal ) = 0;
    virtual HRESULT __stdcall raw_RequestSmartImageHandling (
        VARIANT_BOOL newVal ) = 0;
    virtual HRESULT __stdcall raw_SupportsExportPageRanges (
        VARIANT_BOOL * pVal ) = 0;
};

struct __declspec(uuid("b4742013-45a6-11d1-abec-00a0c9274b91"))
ICrystalReportPrinterPort : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Print (
        _bstr_t pBstrBranch,
        short DrillDownLevel );
    _bstr_t GetPrinterName ( );
    _bstr_t GetDriverName ( );
    _bstr_t GetPortName ( );
    enum CRPaperOrientation GetPaperOrientation ( );
    enum CRPaperSize GetPaperSize ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_Print (
        BSTR pBstrBranch,
        short DrillDownLevel ) = 0;
    virtual HRESULT __stdcall raw_GetPrinterName (
        BSTR * ppPrinterName ) = 0;
    virtual HRESULT __stdcall raw_GetDriverName (
        BSTR * ppDriverName ) = 0;
    virtual HRESULT __stdcall raw_GetPortName (
        BSTR * ppPortName ) = 0;
    virtual HRESULT __stdcall raw_GetPaperOrientation (
        enum CRPaperOrientation * pPaperOrientation ) = 0;
    virtual HRESULT __stdcall raw_GetPaperSize (
        enum CRPaperSize * pPaperSize ) = 0;
};

struct __declspec(uuid("b4742143-45a6-11d1-abec-00a0c9274b91"))
ICrystalReportPrinterPortEx : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT Print (
        _bstr_t pBstrBranch,
        short DrillDownLevel,
        _bstr_t bstrSubreportContext );
    _bstr_t GetPrinterName ( );
    _bstr_t GetDriverName ( );
    _bstr_t GetPortName ( );
    enum CRPaperOrientation GetPaperOrientation ( );
    enum CRPaperSize GetPaperSize ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_Print (
        BSTR pBstrBranch,
        short DrillDownLevel,
        BSTR bstrSubreportContext ) = 0;
    virtual HRESULT __stdcall raw_GetPrinterName (
        BSTR * ppPrinterName ) = 0;
    virtual HRESULT __stdcall raw_GetDriverName (
        BSTR * ppDriverName ) = 0;
    virtual HRESULT __stdcall raw_GetPortName (
        BSTR * ppPortName ) = 0;
    virtual HRESULT __stdcall raw_GetPaperOrientation (
        enum CRPaperOrientation * pPaperOrientation ) = 0;
    virtual HRESULT __stdcall raw_GetPaperSize (
        enum CRPaperSize * pPaperSize ) = 0;
};

struct __declspec(uuid("3dcc8fb3-c434-11d1-a817-00a0c92784cd"))
ICrystalReportSourceEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT OnStartBinding (
        long dwReserved );
    HRESULT OnStopBinding (
        HRESULT hrStatus,
        _bstr_t bstrStatusText );
    HRESULT OnDataAvailable (
        const _variant_t & vtDataDescription,
        const _variant_t & vtData,
        const _variant_t & vtParam );
    HRESULT OnProgress (
        long ulProgress,
        long ulProgressMax,
        long ulStatusCode,
        _bstr_t szStatusText );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_OnStartBinding (
        long dwReserved ) = 0;
    virtual HRESULT __stdcall raw_OnStopBinding (
        HRESULT hrStatus,
        BSTR bstrStatusText ) = 0;
    virtual HRESULT __stdcall raw_OnDataAvailable (
        VARIANT vtDataDescription,
        VARIANT vtData,
        VARIANT vtParam ) = 0;
    virtual HRESULT __stdcall raw_OnProgress (
        long ulProgress,
        long ulProgressMax,
        long ulStatusCode,
        BSTR szStatusText ) = 0;
};

struct __declspec(uuid("af376802-6120-4e28-96dd-63fd2dc27b7a"))
IReportEvent : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT NoData (
        VARIANT_BOOL * pCancel );
    HRESULT BeforeFormatPage (
        long PageNumber );
    HRESULT AfterFormatPage (
        long PageNumber );
    HRESULT FieldMapping (
        VARIANT * reportFieldArray,
        const _variant_t & databaseFieldArray,
        VARIANT_BOOL * useDefault );
};

struct __declspec(uuid("bd10a9c0-07cc-11d2-beff-00a0c95a6a5c"))
ICrystalReportExport : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SetReportSource (
        IUnknown * pNewVal );
    HRESULT Export (
        unsigned int hWnd,
        _bstr_t pBstrBranch,
        _bstr_t bstrSubreportContext,
        _bstr_t pBstrFormula,
        const _variant_t & vtPromptingInfo );
    _bstr_t GetFileName ( );
    HRESULT SetFileName (
        _bstr_t pNewVal );
    HRESULT GetExportType (
        VARIANT * format,
        VARIANT * reserved );
    HRESULT SetExportType (
        const _variant_t & format,
        const _variant_t & reserved );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_SetReportSource (
        IUnknown * pNewVal ) = 0;
    virtual HRESULT __stdcall raw_Export (
        unsigned int hWnd,
        BSTR pBstrBranch,
        BSTR bstrSubreportContext,
        BSTR pBstrFormula,
        VARIANT vtPromptingInfo ) = 0;
    virtual HRESULT __stdcall raw_GetFileName (
        BSTR * ppVal ) = 0;
    virtual HRESULT __stdcall raw_SetFileName (
        BSTR pNewVal ) = 0;
    virtual HRESULT __stdcall raw_GetExportType (
        VARIANT * format,
        VARIANT * reserved ) = 0;
    virtual HRESULT __stdcall raw_SetExportType (
        VARIANT format,
        VARIANT reserved ) = 0;
};

struct __declspec(uuid("4d773761-0ad4-11d2-bf01-00a0c95a6a5c"))
ICrystalReportExportEvents : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT ExportCancelled ( );
    HRESULT ExportFailed ( );
    HRESULT ExportComplete (
        _bstr_t pFileName,
        _bstr_t pFileType );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_ExportCancelled ( ) = 0;
    virtual HRESULT __stdcall raw_ExportFailed ( ) = 0;
    virtual HRESULT __stdcall raw_ExportComplete (
        BSTR pFileName,
        BSTR pFileType ) = 0;
};

struct __declspec(uuid("cf871130-3880-489d-a2b5-03fcdd4c48fa"))
Areas;
    // [ default ] interface IAreas

struct __declspec(uuid("fe9d9b24-6476-4928-9f3c-d26971f0e58c"))
Sections;
    // [ default ] interface ISections

struct __declspec(uuid("88478b47-3140-4cbe-a3e7-3c7b5df3b6bb"))
Area;
    // [ default ] interface IArea

struct __declspec(uuid("402cbb6d-8283-4621-b5a9-e5725c2940db"))
Section;
    // [ default ] interface ISection
    // [ default, source ] dispinterface ISectionEvent

struct __declspec(uuid("af37684b-6120-4e28-96dd-63fd2dc27b7a"))
ISectionEvent : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    HRESULT format (
        IDispatch * pFormattingInfo );
};

struct __declspec(uuid("37b19a2e-73c1-40fb-aa66-c85b757ee33d"))
ReportObjects;
    // [ default ] interface IReportObjects

struct __declspec(uuid("05c96152-3bb9-4c9c-9946-8c447cde5542"))
FieldObject;
    // [ default ] interface IFieldObject
    // interface IReportObject

struct __declspec(uuid("88738712-6759-4a5a-91cb-3b431a7102d2"))
TextObject;
    // [ default ] interface ITextObject
    // interface IReportObject

struct __declspec(uuid("57f52af0-f741-40e7-b4f2-44e21ef9b1dd"))
SubreportObject;
    // [ default ] interface ISubreportObject
    // interface IReportObject

struct __declspec(uuid("41930ff1-58c0-499a-8019-489044d3b242"))
DatabaseFieldDefinition;
    // [ default ] interface IDatabaseFieldDefinition
    // interface IFieldDefinition

struct __declspec(uuid("c835db68-aa79-4b5e-80fb-b22d43e6888f"))
FormulaFieldDefinition;
    // [ default ] interface IFormulaFieldDefinition
    // interface IFieldDefinition

struct __declspec(uuid("a50374e9-6c59-4469-a08d-661f152a17f6"))
ParameterFieldDefinition;
    // [ default ] interface IParameterFieldDefinition
    // interface IFieldDefinition

struct __declspec(uuid("99ef771d-950d-495c-9e9b-73ed8704a522"))
GroupNameFieldDefinition;
    // [ default ] interface IGroupNameFieldDefinition
    // interface IFieldDefinition

struct __declspec(uuid("a8df00ab-3bfb-4e84-8682-f47a18f55973"))
SpecialVarFieldDefinition;
    // [ default ] interface ISpecialVarFieldDefinition
    // interface IFieldDefinition

struct __declspec(uuid("af376814-6120-4e28-96dd-63fd2dc27b7a"))
ISpecialVarFieldDefinition : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetValueType))
    CRFieldValueType ValueType;
    __declspec(property(get=GetNumberOfBytes))
    short NumberOfBytes;
    __declspec(property(get=GetParent))
    IReportPtr Parent;
    __declspec(property(get=GetKind))
    enum CRFieldKind Kind;
    __declspec(property(get=GetPreviousValue))
    _variant_t PreviousValue;
    __declspec(property(get=GetNextValue))
    _variant_t NextValue;
    __declspec(property(get=GetspecialVarType))
    enum CRSpecialVarType specialVarType;
    __declspec(property(get=GetValue))
    _variant_t Value;

    //
    // Wrapper methods for error-handling
    //

    enum CRFieldKind GetKind ( );
    CRFieldValueType GetValueType ( );
    short GetNumberOfBytes ( );
    _bstr_t GetName ( );
    _variant_t GetValue ( );
    enum CRSpecialVarType GetspecialVarType ( );
    IReportPtr GetParent ( );
    _variant_t GetPreviousValue ( );
    _variant_t GetNextValue ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Kind (
        enum CRFieldKind * pKind ) = 0;
    virtual HRESULT __stdcall get_ValueType (
        CRFieldValueType * pValueType ) = 0;
    virtual HRESULT __stdcall get_NumberOfBytes (
        short * pNumberOfBytes ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * pName ) = 0;
    virtual HRESULT __stdcall get_Value (
        VARIANT * pValue ) = 0;
    virtual HRESULT __stdcall get_specialVarType (
        enum CRSpecialVarType * pSpecialVarType ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct IReport * * ppParent ) = 0;
    virtual HRESULT __stdcall get_PreviousValue (
        VARIANT * pPreValue ) = 0;
    virtual HRESULT __stdcall get_NextValue (
        VARIANT * pNextValue ) = 0;
};

struct __declspec(uuid("647c3d82-b822-49f4-b35a-0f87bbc2f469"))
SummaryFieldDefinition;
    // [ default ] interface ISummaryFieldDefinition
    // interface IFieldDefinition

struct __declspec(uuid("ecb8f188-68de-4031-b0ac-303f39e652ee"))
RunningTotalFieldDefinition;
    // [ default ] interface IRunningTotalFieldDefinition
    // interface IFieldDefinition

struct __declspec(uuid("65401c34-31dc-413f-8164-52cb727cda64"))
SQLExpressionFieldDefinition;
    // [ default ] interface ISQLExpressionFieldDefinition
    // interface IFieldDefinition

struct __declspec(uuid("9573bb21-a603-4a5e-a456-b377ff1c4eb1"))
Database;
    // [ default ] interface IDatabase

struct __declspec(uuid("80a89788-677d-4f22-895d-a6626dd440ca"))
DatabaseTables;
    // [ default ] interface IDatabaseTables

struct __declspec(uuid("68c28342-76cf-4524-92d8-94f530ecd913"))
DatabaseTable;
    // [ default ] interface IDatabaseTable

struct __declspec(uuid("049d55cd-474a-4609-8889-958b8a7ef37c"))
DatabaseFieldDefinitions;
    // [ default ] interface IDatabaseFieldDefinitions

struct __declspec(uuid("fcd5ee3d-bb2d-4ab7-842f-3caaf3b43964"))
FormulaFieldDefinitions;
    // [ default ] interface IFormulaFieldDefinitions

struct __declspec(uuid("8226047f-5ba9-4c84-8269-cc597bac6d6f"))
ParameterFieldDefinitions;
    // [ default ] interface IParameterFieldDefinitions

struct __declspec(uuid("cf297352-e6da-4093-9b51-2e213d498499"))
GroupNameFieldDefinitions;
    // [ default ] interface IGroupNameFieldDefinitions

struct __declspec(uuid("0cd62d99-62f1-48b3-b576-bed3014820e6"))
SummaryFieldDefinitions;
    // [ default ] interface ISummaryFieldDefinitions

struct __declspec(uuid("0643cfa4-aea6-4c58-bf19-ce28c6fbb2a5"))
RunningTotalFieldDefinitions;
    // [ default ] interface IRunningTotalFieldDefinitions

struct __declspec(uuid("7cd44a69-16ea-4259-a6cf-91cb867042c9"))
SQLExpressionFieldDefinitions;
    // [ default ] interface ISQLExpressionFieldDefinitions

struct __declspec(uuid("3211bb4e-c7e5-439a-ad3e-dbc0622d25c6"))
GraphObject;
    // [ default ] interface IGraphObject

struct __declspec(uuid("6814457b-da24-45c3-8928-ff720e1935ca"))
MapObject;
    // [ default ] interface IMapObject

struct __declspec(uuid("af376825-6120-4e28-96dd-63fd2dc27b7a"))
IMapObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetParent))
    ISectionPtr Parent;
    __declspec(property(get=GetKind))
    enum CRObjectKind Kind;
    __declspec(property(get=GetLeft,put=PutLeft))
    long Left;
    __declspec(property(get=GetTop,put=PutTop))
    long Top;
    __declspec(property(get=GetWidth,put=PutWidth))
    long Width;
    __declspec(property(get=GetHeight,put=PutHeight))
    long Height;
    __declspec(property(get=GetLeftLineStyle,put=PutLeftLineStyle))
    enum CRLineStyle LeftLineStyle;
    __declspec(property(get=GetRightLineStyle,put=PutRightLineStyle))
    enum CRLineStyle RightLineStyle;
    __declspec(property(get=GetTopLineStyle,put=PutTopLineStyle))
    enum CRLineStyle TopLineStyle;
    __declspec(property(get=GetBottomLineStyle,put=PutBottomLineStyle))
    enum CRLineStyle BottomLineStyle;
    __declspec(property(get=GetCssClass,put=PutCssClass))
    _bstr_t CssClass;
    __declspec(property(get=GetHasDropShadow,put=PutHasDropShadow))
    VARIANT_BOOL HasDropShadow;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    OLE_COLOR BackColor;
    __declspec(property(get=GetBorderColor,put=PutBorderColor))
    OLE_COLOR BorderColor;
    __declspec(property(get=GetSuppress,put=PutSuppress))
    VARIANT_BOOL Suppress;
    __declspec(property(get=GetCloseAtPageBreak,put=PutCloseAtPageBreak))
    VARIANT_BOOL CloseAtPageBreak;
    __declspec(property(get=GetKeepTogether,put=PutKeepTogether))
    VARIANT_BOOL KeepTogether;
    __declspec(property(get=GetHyperlinkType,put=PutHyperlinkType))
    enum CRHyperlinkType HyperlinkType;
    __declspec(property(get=GetHyperlinkText,put=PutHyperlinkText))
    _bstr_t HyperlinkText;
    __declspec(property(get=GetConditionFormula,put=PutConditionFormula))
    _bstr_t ConditionFormula[];

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t ppName );
    enum CRObjectKind GetKind ( );
    long GetLeft ( );
    void PutLeft (
        long pLeft );
    long GetTop ( );
    void PutTop (
        long pTop );
    long GetWidth ( );
    void PutWidth (
        long pWidth );
    long GetHeight ( );
    void PutHeight (
        long pHeight );
    enum CRLineStyle GetLeftLineStyle ( );
    void PutLeftLineStyle (
        enum CRLineStyle pLeftLineStyle );
    enum CRLineStyle GetRightLineStyle ( );
    void PutRightLineStyle (
        enum CRLineStyle pRightLineStyle );
    enum CRLineStyle GetTopLineStyle ( );
    void PutTopLineStyle (
        enum CRLineStyle pTopLineStyle );
    enum CRLineStyle GetBottomLineStyle ( );
    void PutBottomLineStyle (
        enum CRLineStyle pBottomLineStyle );
    VARIANT_BOOL GetHasDropShadow ( );
    void PutHasDropShadow (
        VARIANT_BOOL pBool );
    OLE_COLOR GetBackColor ( );
    void PutBackColor (
        OLE_COLOR pBackColor );
    OLE_COLOR GetBorderColor ( );
    void PutBorderColor (
        OLE_COLOR pBorderColor );
    ISectionPtr GetParent ( );
    VARIANT_BOOL GetSuppress ( );
    void PutSuppress (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetCloseAtPageBreak ( );
    void PutCloseAtPageBreak (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetKeepTogether ( );
    void PutKeepTogether (
        VARIANT_BOOL pBool );
    _bstr_t GetConditionFormula (
        const _variant_t & FormulaType );
    void PutConditionFormula (
        const _variant_t & FormulaType,
        _bstr_t pVal );
    _bstr_t GetCssClass ( );
    void PutCssClass (
        _bstr_t ppCssClass );
    enum CRHyperlinkType GetHyperlinkType ( );
    void PutHyperlinkType (
        enum CRHyperlinkType pType );
    _bstr_t GetHyperlinkText ( );
    void PutHyperlinkText (
        _bstr_t pText );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Name (
        BSTR * ppName ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR ppName ) = 0;
    virtual HRESULT __stdcall get_Kind (
        enum CRObjectKind * pObjectKind ) = 0;
    virtual HRESULT __stdcall get_Left (
        long * pLeft ) = 0;
    virtual HRESULT __stdcall put_Left (
        long pLeft ) = 0;
    virtual HRESULT __stdcall get_Top (
        long * pTop ) = 0;
    virtual HRESULT __stdcall put_Top (
        long pTop ) = 0;
    virtual HRESULT __stdcall get_Width (
        long * pWidth ) = 0;
    virtual HRESULT __stdcall put_Width (
        long pWidth ) = 0;
    virtual HRESULT __stdcall get_Height (
        long * pHeight ) = 0;
    virtual HRESULT __stdcall put_Height (
        long pHeight ) = 0;
    virtual HRESULT __stdcall get_LeftLineStyle (
        enum CRLineStyle * pLeftLineStyle ) = 0;
    virtual HRESULT __stdcall put_LeftLineStyle (
        enum CRLineStyle pLeftLineStyle ) = 0;
    virtual HRESULT __stdcall get_RightLineStyle (
        enum CRLineStyle * pRightLineStyle ) = 0;
    virtual HRESULT __stdcall put_RightLineStyle (
        enum CRLineStyle pRightLineStyle ) = 0;
    virtual HRESULT __stdcall get_TopLineStyle (
        enum CRLineStyle * pTopLineStyle ) = 0;
    virtual HRESULT __stdcall put_TopLineStyle (
        enum CRLineStyle pTopLineStyle ) = 0;
    virtual HRESULT __stdcall get_BottomLineStyle (
        enum CRLineStyle * pBottomLineStyle ) = 0;
    virtual HRESULT __stdcall put_BottomLineStyle (
        enum CRLineStyle pBottomLineStyle ) = 0;
    virtual HRESULT __stdcall get_HasDropShadow (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_HasDropShadow (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_BackColor (
        OLE_COLOR * pBackColor ) = 0;
    virtual HRESULT __stdcall put_BackColor (
        OLE_COLOR pBackColor ) = 0;
    virtual HRESULT __stdcall get_BorderColor (
        OLE_COLOR * pBorderColor ) = 0;
    virtual HRESULT __stdcall put_BorderColor (
        OLE_COLOR pBorderColor ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct ISection * * ppParent ) = 0;
    virtual HRESULT __stdcall get_Suppress (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_Suppress (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_CloseAtPageBreak (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_CloseAtPageBreak (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_KeepTogether (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_KeepTogether (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_ConditionFormula (
        VARIANT FormulaType,
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_ConditionFormula (
        VARIANT FormulaType,
        BSTR pVal ) = 0;
    virtual HRESULT __stdcall get_CssClass (
        BSTR * ppCssClass ) = 0;
    virtual HRESULT __stdcall put_CssClass (
        BSTR ppCssClass ) = 0;
    virtual HRESULT __stdcall get_HyperlinkType (
        enum CRHyperlinkType * pType ) = 0;
    virtual HRESULT __stdcall put_HyperlinkType (
        enum CRHyperlinkType pType ) = 0;
    virtual HRESULT __stdcall get_HyperlinkText (
        BSTR * pText ) = 0;
    virtual HRESULT __stdcall put_HyperlinkText (
        BSTR pText ) = 0;
};

struct __declspec(uuid("6b59794f-26e5-4738-ba8d-4dcc1a635dea"))
OleObject;
    // [ default ] interface ICROleObject

struct __declspec(uuid("f4d9ad6a-26dd-4e4a-bd83-2959a47d75ac"))
BlobFieldObject;
    // [ default ] interface IBlobFieldObject

struct __declspec(uuid("37be62a3-9f35-445b-8707-6dbdb3b0013e"))
LineObject;
    // [ default ] interface ILineObject

struct __declspec(uuid("9d430c83-6e6e-4769-a895-0e1f04e6eae6"))
BoxObject;
    // [ default ] interface IBoxObject

struct __declspec(uuid("43e590b8-16d3-4e44-859d-f1beaa7ae2b6"))
OlapGridObject;
    // [ default ] interface IOlapGridObject

struct __declspec(uuid("af37685f-6120-4e28-96dd-63fd2dc27b7a"))
IOlapGridObject : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetParent))
    ISectionPtr Parent;
    __declspec(property(get=GetKind))
    enum CRObjectKind Kind;
    __declspec(property(get=GetLeft,put=PutLeft))
    long Left;
    __declspec(property(get=GetTop,put=PutTop))
    long Top;
    __declspec(property(get=GetWidth))
    long Width;
    __declspec(property(get=GetHeight))
    long Height;
    __declspec(property(get=GetLeftLineStyle,put=PutLeftLineStyle))
    enum CRLineStyle LeftLineStyle;
    __declspec(property(get=GetRightLineStyle,put=PutRightLineStyle))
    enum CRLineStyle RightLineStyle;
    __declspec(property(get=GetTopLineStyle,put=PutTopLineStyle))
    enum CRLineStyle TopLineStyle;
    __declspec(property(get=GetBottomLineStyle,put=PutBottomLineStyle))
    enum CRLineStyle BottomLineStyle;
    __declspec(property(get=GetHasDropShadow,put=PutHasDropShadow))
    VARIANT_BOOL HasDropShadow;
    __declspec(property(get=GetBackColor,put=PutBackColor))
    OLE_COLOR BackColor;
    __declspec(property(get=GetBorderColor,put=PutBorderColor))
    OLE_COLOR BorderColor;
    __declspec(property(get=GetSuppress,put=PutSuppress))
    VARIANT_BOOL Suppress;
    __declspec(property(get=GetCloseAtPageBreak,put=PutCloseAtPageBreak))
    VARIANT_BOOL CloseAtPageBreak;
    __declspec(property(get=GetKeepTogether,put=PutKeepTogether))
    VARIANT_BOOL KeepTogether;
    __declspec(property(get=GetConditionFormula,put=PutConditionFormula))
    _bstr_t ConditionFormula[];

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t ppName );
    enum CRObjectKind GetKind ( );
    long GetLeft ( );
    void PutLeft (
        long pLeft );
    long GetTop ( );
    void PutTop (
        long pTop );
    long GetWidth ( );
    long GetHeight ( );
    enum CRLineStyle GetLeftLineStyle ( );
    void PutLeftLineStyle (
        enum CRLineStyle pLeftLineStyle );
    enum CRLineStyle GetRightLineStyle ( );
    void PutRightLineStyle (
        enum CRLineStyle pRightLineStyle );
    enum CRLineStyle GetTopLineStyle ( );
    void PutTopLineStyle (
        enum CRLineStyle pTopLineStyle );
    enum CRLineStyle GetBottomLineStyle ( );
    void PutBottomLineStyle (
        enum CRLineStyle pBottomLineStyle );
    VARIANT_BOOL GetHasDropShadow ( );
    void PutHasDropShadow (
        VARIANT_BOOL pBool );
    OLE_COLOR GetBackColor ( );
    void PutBackColor (
        OLE_COLOR pBackColor );
    OLE_COLOR GetBorderColor ( );
    void PutBorderColor (
        OLE_COLOR pBorderColor );
    ISectionPtr GetParent ( );
    VARIANT_BOOL GetSuppress ( );
    void PutSuppress (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetCloseAtPageBreak ( );
    void PutCloseAtPageBreak (
        VARIANT_BOOL pBool );
    VARIANT_BOOL GetKeepTogether ( );
    void PutKeepTogether (
        VARIANT_BOOL pBool );
    _bstr_t GetConditionFormula (
        const _variant_t & FormulaType );
    void PutConditionFormula (
        const _variant_t & FormulaType,
        _bstr_t pVal );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Name (
        BSTR * ppName ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR ppName ) = 0;
    virtual HRESULT __stdcall get_Kind (
        enum CRObjectKind * pObjectKind ) = 0;
    virtual HRESULT __stdcall get_Left (
        long * pLeft ) = 0;
    virtual HRESULT __stdcall put_Left (
        long pLeft ) = 0;
    virtual HRESULT __stdcall get_Top (
        long * pTop ) = 0;
    virtual HRESULT __stdcall put_Top (
        long pTop ) = 0;
    virtual HRESULT __stdcall get_Width (
        long * pWidth ) = 0;
    virtual HRESULT __stdcall get_Height (
        long * pHeight ) = 0;
    virtual HRESULT __stdcall get_LeftLineStyle (
        enum CRLineStyle * pLeftLineStyle ) = 0;
    virtual HRESULT __stdcall put_LeftLineStyle (
        enum CRLineStyle pLeftLineStyle ) = 0;
    virtual HRESULT __stdcall get_RightLineStyle (
        enum CRLineStyle * pRightLineStyle ) = 0;
    virtual HRESULT __stdcall put_RightLineStyle (
        enum CRLineStyle pRightLineStyle ) = 0;
    virtual HRESULT __stdcall get_TopLineStyle (
        enum CRLineStyle * pTopLineStyle ) = 0;
    virtual HRESULT __stdcall put_TopLineStyle (
        enum CRLineStyle pTopLineStyle ) = 0;
    virtual HRESULT __stdcall get_BottomLineStyle (
        enum CRLineStyle * pBottomLineStyle ) = 0;
    virtual HRESULT __stdcall put_BottomLineStyle (
        enum CRLineStyle pBottomLineStyle ) = 0;
    virtual HRESULT __stdcall get_HasDropShadow (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_HasDropShadow (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_BackColor (
        OLE_COLOR * pBackColor ) = 0;
    virtual HRESULT __stdcall put_BackColor (
        OLE_COLOR pBackColor ) = 0;
    virtual HRESULT __stdcall get_BorderColor (
        OLE_COLOR * pBorderColor ) = 0;
    virtual HRESULT __stdcall put_BorderColor (
        OLE_COLOR pBorderColor ) = 0;
    virtual HRESULT __stdcall get_Parent (
        struct ISection * * ppParent ) = 0;
    virtual HRESULT __stdcall get_Suppress (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_Suppress (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_CloseAtPageBreak (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_CloseAtPageBreak (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_KeepTogether (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_KeepTogether (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_ConditionFormula (
        VARIANT FormulaType,
        BSTR * pVal ) = 0;
    virtual HRESULT __stdcall put_ConditionFormula (
        VARIANT FormulaType,
        BSTR pVal ) = 0;
};

struct __declspec(uuid("fb276cce-6015-4aca-a43f-0a6b991cbc75"))
CrossTabObject;
    // [ default ] interface ICrossTabObject

struct __declspec(uuid("679c18f4-b367-4577-b3aa-99081d6c4e48"))
PageEngine;
    // [ default ] interface IPageEngine

struct __declspec(uuid("9c3a36d0-a2a1-4ccf-82f1-4af7d238ddbc"))
PageGenerator;
    // [ default ] interface IPageGenerator

struct __declspec(uuid("cc705a3a-acaa-410d-9f2c-a1bb907667bc"))
Pages;
    // [ default ] interface IPages

struct __declspec(uuid("4739bc2c-8a08-4b1e-a3e6-63c45dab8cca"))
Page;
    // [ default ] interface IPage

struct __declspec(uuid("2585f267-8032-4637-852b-35433634acda"))
ExportOptions;
    // [ default ] interface IExportOptions

struct __declspec(uuid("d21a9244-0817-46b1-aef9-360bce813ba9"))
Application;
    // [ default ] interface IApplication

struct __declspec(uuid("fdbcf00f-075c-46c9-b564-1f1b66bf2f62"))
FormattingInfo;
    // [ default ] interface IFormattingInfo

struct __declspec(uuid("af37684c-6120-4e28-96dd-63fd2dc27b7a"))
IFormattingInfo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetIsRepeatedGroupHeader))
    VARIANT_BOOL IsRepeatedGroupHeader;
    __declspec(property(get=GetIsStartOfGroup))
    VARIANT_BOOL IsStartOfGroup;
    __declspec(property(get=GetIsEndOfGroup))
    VARIANT_BOOL IsEndOfGroup;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetIsRepeatedGroupHeader ( );
    VARIANT_BOOL GetIsStartOfGroup ( );
    VARIANT_BOOL GetIsEndOfGroup ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_IsRepeatedGroupHeader (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall get_IsStartOfGroup (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall get_IsEndOfGroup (
        VARIANT_BOOL * pBool ) = 0;
};

struct __declspec(uuid("07989374-b166-4b06-b23c-5749e428f064"))
SortFields;
    // [ default ] interface ISortFields

struct __declspec(uuid("58525595-8b62-4294-865e-6296eb97d466"))
SortField;
    // [ default ] interface ISortField

struct __declspec(uuid("0d82a067-d833-44e4-8e4c-91b64bf8e155"))
PrintingStatus;
    // [ default ] interface IPrintingStatus

struct __declspec(uuid("402bec31-3146-4ab0-a729-9a29d6dc5739"))
SubreportLink;
    // [ default ] interface ISubreportLink

struct __declspec(uuid("06a2cf51-3fdb-450b-93f0-9b1ad46c1523"))
SubreportLinks;
    // [ default ] interface ISubreportLinks

struct __declspec(uuid("5fdb3878-0261-4b64-970c-156562b46027"))
CrossTabGroups;
    // [ default ] interface ICrossTabGroups

struct __declspec(uuid("49721471-3da7-49ac-afaa-e1b09d34f8f5"))
CrossTabGroup;
    // [ default ] interface ICrossTabGroup

struct __declspec(uuid("57c93f36-c684-4539-9b75-5ad18d77e396"))
FieldDefinitions;
    // [ default ] interface IFieldDefinitions

struct __declspec(uuid("219df98d-c1b6-41e5-8e62-721b7bf31194"))
ObjectSummaryFieldDefinitions;
    // [ default ] interface IObjectSummaryFieldDefinitions

struct __declspec(uuid("6eef6d03-7c1e-4a75-a48b-c0c2fcd4e634"))
TableLink;
    // [ default ] interface ITableLink

struct __declspec(uuid("24ff74e5-b0fc-4181-9944-3a85a2eacff9"))
TableLinks;
    // [ default ] interface ITableLinks

struct __declspec(uuid("67655bf2-9c2d-4331-b9c5-4b96b170f669"))
FieldMappingData;
    // [ default ] interface IFieldMappingData

struct __declspec(uuid("af376856-6120-4e28-96dd-63fd2dc27b7a"))
IFieldMappingData : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValueType,put=PutValueType))
    CRFieldValueType ValueType;
    __declspec(property(get=GetTableName,put=PutTableName))
    _bstr_t TableName;
    __declspec(property(get=GetFieldName,put=PutFieldName))
    _bstr_t FieldName;
    __declspec(property(get=GetMappingToFieldIndex,put=PutMappingToFieldIndex))
    short MappingToFieldIndex;

    //
    // Wrapper methods for error-handling
    //

    CRFieldValueType GetValueType ( );
    void PutValueType (
        CRFieldValueType pValueType );
    _bstr_t GetTableName ( );
    void PutTableName (
        _bstr_t pTableName );
    _bstr_t GetFieldName ( );
    void PutFieldName (
        _bstr_t pFieldName );
    short GetMappingToFieldIndex ( );
    void PutMappingToFieldIndex (
        short pMappingTo );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_ValueType (
        CRFieldValueType * pValueType ) = 0;
    virtual HRESULT __stdcall put_ValueType (
        CRFieldValueType pValueType ) = 0;
    virtual HRESULT __stdcall get_TableName (
        BSTR * pTableName ) = 0;
    virtual HRESULT __stdcall put_TableName (
        BSTR pTableName ) = 0;
    virtual HRESULT __stdcall get_FieldName (
        BSTR * pFieldName ) = 0;
    virtual HRESULT __stdcall put_FieldName (
        BSTR pFieldName ) = 0;
    virtual HRESULT __stdcall get_MappingToFieldIndex (
        short * pMappingTo ) = 0;
    virtual HRESULT __stdcall put_MappingToFieldIndex (
        short pMappingTo ) = 0;
};

struct __declspec(uuid("5323c0bf-cc18-41a1-bc23-696870ad5d77"))
ParameterValue;
    // [ default ] interface IParameterValue

struct __declspec(uuid("af376857-6120-4e28-96dd-63fd2dc27b7a"))
IParameterValue : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEndValue,put=PutEndValue))
    _variant_t EndValue;
    __declspec(property(get=GetRangeValue,put=PutRangeValue))
    VARIANT_BOOL RangeValue;
    __declspec(property(get=GetrangeInfo,put=PutrangeInfo))
    enum CRRangeInfo rangeInfo;
    __declspec(property(get=GetStartValue,put=PutStartValue))
    _variant_t StartValue;

    //
    // Wrapper methods for error-handling
    //

    _variant_t GetStartValue ( );
    void PutStartValue (
        const _variant_t & StartValue );
    _variant_t GetEndValue ( );
    void PutEndValue (
        const _variant_t & EndValue );
    VARIANT_BOOL GetRangeValue ( );
    void PutRangeValue (
        VARIANT_BOOL pBool );
    enum CRRangeInfo GetrangeInfo ( );
    void PutrangeInfo (
        enum CRRangeInfo rangeInfo );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_StartValue (
        VARIANT * StartValue ) = 0;
    virtual HRESULT __stdcall put_StartValue (
        VARIANT StartValue ) = 0;
    virtual HRESULT __stdcall get_EndValue (
        VARIANT * EndValue ) = 0;
    virtual HRESULT __stdcall put_EndValue (
        VARIANT EndValue ) = 0;
    virtual HRESULT __stdcall get_RangeValue (
        VARIANT_BOOL * pBool ) = 0;
    virtual HRESULT __stdcall put_RangeValue (
        VARIANT_BOOL pBool ) = 0;
    virtual HRESULT __stdcall get_rangeInfo (
        enum CRRangeInfo * rangeInfo ) = 0;
    virtual HRESULT __stdcall put_rangeInfo (
        enum CRRangeInfo rangeInfo ) = 0;
};

struct __declspec(uuid("bb48214b-c76f-4afd-bc58-ca392b663a9b"))
ParameterValues;
    // [ default ] interface IParameterValues

struct __declspec(uuid("af376858-6120-4e28-96dd-63fd2dc27b7a"))
IParameterValues : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IParameterValuePtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    IParameterValuePtr GetItem (
        long index );
    long GetCount ( );
    HRESULT Add (
        struct IParameterValue * pValue );
    HRESULT Delete (
        long index );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * ppNewEnum ) = 0;
    virtual HRESULT __stdcall get_Item (
        long index,
        struct IParameterValue * * ppValue ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * pCount ) = 0;
    virtual HRESULT __stdcall raw_Add (
        struct IParameterValue * pValue ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        long index ) = 0;
};

struct __declspec(uuid("6cf0caba-9131-487e-92b8-a6d94769b60b"))
ParameterValueInfo;
    // [ default ] interface IParameterValueInfo

struct __declspec(uuid("af376859-6120-4e28-96dd-63fd2dc27b7a"))
IParameterValueInfo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetParameterValues,put=PutParameterValues))
    IParameterValuesPtr ParameterValues;
    __declspec(property(get=GetparameterName,put=PutparameterName))
    _bstr_t parameterName;

    //
    // Wrapper methods for error-handling
    //

    IParameterValuesPtr GetParameterValues ( );
    void PutParameterValues (
        struct IParameterValues * ppValues );
    _bstr_t GetparameterName ( );
    void PutparameterName (
        _bstr_t pParameterName );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_ParameterValues (
        struct IParameterValues * * ppValues ) = 0;
    virtual HRESULT __stdcall put_ParameterValues (
        struct IParameterValues * ppValues ) = 0;
    virtual HRESULT __stdcall get_parameterName (
        BSTR * pParameterName ) = 0;
    virtual HRESULT __stdcall put_parameterName (
        BSTR pParameterName ) = 0;
};

struct __declspec(uuid("cab49111-afb8-4aa7-9dec-75a7171d4280"))
ParameterValueInfos;
    // [ default ] interface IParameterValueInfos

struct __declspec(uuid("af37685a-6120-4e28-96dd-63fd2dc27b7a"))
IParameterValueInfos : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IParameterValueInfoPtr Item[];
    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=Get_NewEnum))
    IUnknownPtr _NewEnum;

    //
    // Wrapper methods for error-handling
    //

    IUnknownPtr Get_NewEnum ( );
    IParameterValueInfoPtr GetItem (
        long index );
    long GetCount ( );
    HRESULT Add (
        struct IParameterValueInfo * pValueInfo );
    HRESULT Delete (
        long index );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get__NewEnum (
        IUnknown * * ppNewEnum ) = 0;
    virtual HRESULT __stdcall get_Item (
        long index,
        struct IParameterValueInfo * * ppValueInfo ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * pCount ) = 0;
    virtual HRESULT __stdcall raw_Add (
        struct IParameterValueInfo * pValueInfo ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        long index ) = 0;
};

struct __declspec(uuid("c9675868-1ac7-4a97-8999-fdbb4fdd092d"))
ReportAlert;
    // [ default ] interface IReportAlert

struct __declspec(uuid("1b0912db-42e4-46e4-8ecd-2fa35090aa74"))
ReportAlerts;
    // [ default ] interface IReportAlerts

struct __declspec(uuid("64838fbb-e415-4305-8086-0b9398fe30f0"))
ReportAlertInstance;
    // [ default ] interface IReportAlertInstance

struct __declspec(uuid("333e68cd-8948-46ef-b6ef-81db9102ccaf"))
ReportAlertInstances;
    // [ default ] interface IReportAlertInstances

struct __declspec(uuid("d26f5e21-2771-4a24-a3e5-e7d18e4d0f0b"))
FieldElements;
    // [ default ] interface IFieldElements

struct __declspec(uuid("26441751-50ae-460f-b842-a2393f7c35d0"))
FieldElement;
    // [ default ] interface IFieldElement

struct __declspec(uuid("9c491db1-a991-43e9-b310-e73285d5084b"))
ConnectionProperties;
    // [ default ] interface INameValuePairs

struct __declspec(uuid("c663f1ba-6c54-4390-a406-64bf5ff4132e"))
ConnectionProperty;
    // [ default ] interface IConnectionProperty

struct __declspec(uuid("af376861-6120-4e28-96dd-63fd2dc27b7a"))
IConnectionProperty : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetValue,put=PutValue))
    _variant_t Value;
    __declspec(property(get=GetName,put=PutName))
    _bstr_t Name;
    __declspec(property(get=GetLocalizedName,put=PutLocalizedName))
    _bstr_t LocalizedName;
    __declspec(property(get=GetDescription,put=PutDescription))
    _bstr_t Description;
    __declspec(property(get=GetChildProperties))
    INameValuePairsPtr ChildProperties;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    void PutName (
        _bstr_t pName );
    _bstr_t GetLocalizedName ( );
    void PutLocalizedName (
        _bstr_t pLocName );
    _bstr_t GetDescription ( );
    void PutDescription (
        _bstr_t pDescription );
    _variant_t GetValue ( );
    void PutValue (
        const _variant_t & pValue );
    INameValuePairsPtr GetChildProperties ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Name (
        BSTR * pName ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR pName ) = 0;
    virtual HRESULT __stdcall get_LocalizedName (
        BSTR * pLocName ) = 0;
    virtual HRESULT __stdcall put_LocalizedName (
        BSTR pLocName ) = 0;
    virtual HRESULT __stdcall get_Description (
        BSTR * pDescription ) = 0;
    virtual HRESULT __stdcall put_Description (
        BSTR pDescription ) = 0;
    virtual HRESULT __stdcall get_Value (
        VARIANT * pValue ) = 0;
    virtual HRESULT __stdcall put_Value (
        VARIANT pValue ) = 0;
    virtual HRESULT __stdcall get_ChildProperties (
        struct INameValuePairs * * ppNVPairs ) = 0;
};

enum CROpenReportMethod
{
    crOpenReportByDefault = 0,
    crOpenReportByTempCopy = 1
};

enum CRSectionAreaFormatConditionFormulaType
{
    crSectionAreaEnableSuppressConditionFormulaType = 0,
    crSectionAreaEnablePrintAtBottomOfPageConditionFormulaType = 1,
    crSectionAreaEnableNewPageAfterConditionFormulaType = 2,
    crSectionAreaEnableNewPageBeforeConditionFormulaType = 3,
    crSectionAreaEnableKeepTogetherConditionFormulaType = 4,
    crSectionAreaEnableSuppressIfBlankConditionFormulaType = 5,
    crSectionAreaEnableResetPageNumberAfterConditionFormulaType = 6,
    crSectionAreaEnableUnderlaySectionConditionFormulaType = 7,
    crSectionAreaBackgroundColorConditionFormulaType = 8,
    crSectionAreaShowAreaConditionFormulaType = 9,
    crSectionAreaEnableHideForDrillDownConditionFormulaType = 10,
    crSectionAreaCssClassConditionFormulaType = 11
};

enum CRBooleanFieldFormatConditionFormulaType
{
    crOutputFormatConditionFormulaType = 20
};

enum CRBorderConditionFormulaType
{
    crLeftLineStyleConditionFormulaType = 40,
    crRightLineStyleConditionFormulaType = 41,
    crTopLineStyleConditionFormulaType = 42,
    crBottomLineStyleConditionFormulaType = 43,
    crHasDropShadowConditionFormulaType = 44,
    crBackgroundColorConditionFormulaType = 45,
    crBorderColorConditionFormulaType = 46,
    crTightHorizontalConditionFormulaType = 47,
    crTightVerticalConditionFormulaType = 48
};

enum CRObjectFormatConditionFormulaType
{
    crEnableSuppressConditionFormulaType = 60,
    crEnableKeepTogetherConditionFormulaType = 61,
    crEnableCloseAtPageBreakConditionFormulaType = 62,
    crHorizontalAlignmentConditionFormulaType = 63,
    crEnableCanGrowConditionFormulaType = 64,
    crToolTipTextConditionFormulaType = 65,
    crRotationConditionFormulaType = 66,
    crHyperLinkConditionFormulaType = 67,
    crCssClassConditionFormulaType = 68
};

enum CRCommonFieldFormatConditionFormulaType
{
    crSuppressIfDuplicatedConditionFormulaType = 80,
    crUseSystemDefaultConditionFormulaType = 81
};

enum CRNumericFieldFormatConditionFormulaType
{
    crNDecimalPlacesConditionFormulaType = 100,
    crRoundingFormatConditionFormulaType = 101,
    crEnableUseLeadZeroConditionFormulaType = 102,
    crNegativeFormatConditionFormulaType = 103,
    crCurrencySymbolFormatConditionFormulaType = 104,
    crEnableSuppressIfZeroConditionFormulaType = 105,
    crThousandsSeparatorConditionFormulaType = 106,
    crThousandSymbolConditionFormulaType = 107,
    crDecimalSymbolConditionFormulaType = 108,
    crCurrencySymbolConditionFormulaType = 109,
    crHasOneSymbolPerPageConditionFormulaType = 110,
    crCurrencyPositionConditionFormulaType = 111,
    crDisplayReverseSignConditionFormulaType = 112,
    crZeroValueStringConditionFormulaType = 113,
    crAllowFieldClippingConditionFormulaType = 114
};

enum CRDateFieldFormatConditionFormulaType
{
    crYearFormatConditionFormulaType = 120,
    crMonthFormatConditionFormulaType = 121,
    crDayFormatConditionFormulaType = 122,
    crWindowsDefaultTypeConditionFormulaType = 123,
    crDateOrderConditionFormulaType = 124,
    crDayOfWeekTypeConditionFormulaType = 125,
    crDayOfWeekSeparatorConditionFormulaType = 126,
    crDayOfWeekPositionConditionFormulaType = 127,
    crDateFirstSeparatorConditionFormulaType = 128,
    crDateSecondSeparatorConditionFormulaType = 129,
    crEraTypeConditionFormulaType = 130,
    crCalendarTypeConditionFormulaType = 131,
    crDatePrefixSeparatorConditionFormulaType = 132,
    crDateSuffixSeparatorConditionFormulaType = 133,
    crDayOfWeekEnclosureConditionFormulaType = 134
};

enum CRDateTimeFieldFormatConditionFormulaType
{
    crDateTimeOrderConditionFormulaType = 140,
    crDateTimeSeparatorConditionFormulaType = 141
};

enum CRTimeFieldFormatConditionFormulaType
{
    crTimeBaseConditionFormulaType = 160,
    crAMPMFormatConditionFormulaType = 161,
    crHourFormatConditionFormulaType = 162,
    crMinuteFormatConditionFormulaType = 163,
    crSecondFormatConditionFormulaType = 164,
    crPMStringConditionFormulaType = 165,
    crAMStringConditionFormulaType = 166,
    crMinuteSecondSeparatorConditionFormulaType = 167,
    crHourMinuteSeparatorConditionFormulaType = 168
};

enum CRFontColorConditionFormulaType
{
    crColorConditionFormulaType = 180,
    crFontConditionFormulaType = 181,
    crFontStyleConditionFormulaType = 182,
    crFontSizeConditionFormulaType = 183,
    crFontStrikeOutConditionFormulaType = 184,
    crFontUnderLineConditionFormulaType = 185
};

enum CRStringFieldConditionFormulaType
{
    crTextInterpretationConditionFormulaType = 200
};

enum CRSubreportConditionFormulaType
{
    crCaptionConditionFormulaType = 220,
    crDrillDownTabTextConditionFormulaType = 221
};

enum CRTableDifferences
{
    crTDOK = 0,
    crTDDatabaseNotFound = 1,
    crTDServerNotFound = 2,
    crTDServerNotOpened = 4,
    crTDAliasChanged = 8,
    crTDIndexesChanged = 16,
    crTDDriverChanged = 32,
    crTDDictionaryChanged = 64,
    crTDFileTypeChanged = 128,
    crTDRecordSizeChanged = 256,
    crTDAccessChanged = 512,
    crTDParametersChanged = 1024,
    crTDLocationChanged = 2048,
    crTDDatabaseOtherChanges = 4096,
    crTDNumberFieldChanged = 65536,
    crTDFieldOtherChanges = 131072,
    crTDFieldNameChanged = 262144,
    crTDFieldDescChanged = 524288,
    crTDFieldTypeChanged = 1048576,
    crTDFieldSizeChanged = 2097152,
    crTDNativeFieldTypeChanged = 4194304,
    crTDNativeFieldOffsetChanged = 8388608,
    crTDNativeFieldSizeChanged = 16777216,
    crTDFieldDecimalPlacesChanged = 33554432
};

struct __declspec(uuid("3dcc8fb6-c434-11d1-a817-00a0c92784cd"))
ICrystalReportSourceEx : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT GetPage (
        long lCookie,
        _bstr_t bstrViewContext,
        _bstr_t bstrSubreportContext,
        _bstr_t bstrFormula,
        const _variant_t & vtPromptingInfo,
        long lPageNumber,
        const _variant_t & vtReserved );
    HRESULT GetTotaller (
        long lCookie,
        _bstr_t bstrViewContext,
        _bstr_t bstrSubreportContext,
        _bstr_t bstrFormula,
        const _variant_t & vtPromptingInfo,
        long lStartFrom,
        short nLevelsPastRoot,
        const _variant_t & vtMaxNodeCount );
    HRESULT GetLastPageNumber (
        long lCookie,
        _bstr_t bstrViewContext,
        _bstr_t bstrSubreportContext,
        _bstr_t bstrFormula,
        const _variant_t & vtPromptingInfo,
        const _variant_t & vtReserved );
    HRESULT FindGroup (
        long lCookie,
        _bstr_t bstrViewContext,
        _bstr_t bstrSubreportContext,
        _bstr_t bstrFormula,
        const _variant_t & vtPromptingInfo,
        _bstr_t bstrGroupPath,
        const _variant_t & vtReserved );
    HRESULT FindText (
        long lCookie,
        _bstr_t bstrViewContext,
        _bstr_t bstrSubreportContext,
        _bstr_t bstrFormula,
        const _variant_t & vtPromptingInfo,
        long lFromPage,
        long lFromInstance,
        _bstr_t bstrText,
        enum CRSearchDirection nMode,
        const _variant_t & vtReserved );
    HRESULT DrillGraph (
        long lCookie,
        _bstr_t bstrViewContext,
        _bstr_t bstrSubreportContext,
        _bstr_t bstrFormula,
        const _variant_t & vtPromptingInfo,
        long lPageNumber,
        long xOffset,
        long yOffset,
        _bstr_t bstrReserved,
        const _variant_t & vtReserved,
        const _variant_t & vtReserved2 );
    HRESULT DrillMap (
        long lCookie,
        _bstr_t bstrViewContext,
        _bstr_t bstrSubreportContext,
        _bstr_t bstrFormula,
        const _variant_t & vtPromptingInfo,
        long lPageNumber,
        long xOffset,
        long yOffset,
        _bstr_t bstrReserved,
        const _variant_t & vtReserved,
        const _variant_t & vtReserved2 );
    HRESULT Search (
        long lCookie,
        _bstr_t bstrViewContext,
        _bstr_t bstrSubreportContext,
        _bstr_t bstrFormula,
        const _variant_t & vtPromptingInfo,
        long lPageN,
        long lSectionInstN,
        _bstr_t bstrSearchFormula,
        _bstr_t bstrReserved,
        const _variant_t & vtReserved );
    HRESULT Export (
        long lCookie,
        _bstr_t bstrViewContext,
        _bstr_t bstrSubreportContext,
        _bstr_t bstrFormula,
        const _variant_t & vtPromptingInfo,
        const _variant_t & exportFormat,
        const _variant_t & pageRange );
    HRESULT GetExportFormats (
        long lCookie );
    HRESULT Refresh (
        long lCookie,
        const _variant_t & vtPromptingInfo );
    HRESULT Cancel (
        long lCookie );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_GetPage (
        long lCookie,
        BSTR bstrViewContext,
        BSTR bstrSubreportContext,
        BSTR bstrFormula,
        VARIANT vtPromptingInfo,
        long lPageNumber,
        VARIANT vtReserved ) = 0;
    virtual HRESULT __stdcall raw_GetTotaller (
        long lCookie,
        BSTR bstrViewContext,
        BSTR bstrSubreportContext,
        BSTR bstrFormula,
        VARIANT vtPromptingInfo,
        long lStartFrom,
        short nLevelsPastRoot,
        VARIANT vtMaxNodeCount ) = 0;
    virtual HRESULT __stdcall raw_GetLastPageNumber (
        long lCookie,
        BSTR bstrViewContext,
        BSTR bstrSubreportContext,
        BSTR bstrFormula,
        VARIANT vtPromptingInfo,
        VARIANT vtReserved ) = 0;
    virtual HRESULT __stdcall raw_FindGroup (
        long lCookie,
        BSTR bstrViewContext,
        BSTR bstrSubreportContext,
        BSTR bstrFormula,
        VARIANT vtPromptingInfo,
        BSTR bstrGroupPath,
        VARIANT vtReserved ) = 0;
    virtual HRESULT __stdcall raw_FindText (
        long lCookie,
        BSTR bstrViewContext,
        BSTR bstrSubreportContext,
        BSTR bstrFormula,
        VARIANT vtPromptingInfo,
        long lFromPage,
        long lFromInstance,
        BSTR bstrText,
        enum CRSearchDirection nMode,
        VARIANT vtReserved ) = 0;
    virtual HRESULT __stdcall raw_DrillGraph (
        long lCookie,
        BSTR bstrViewContext,
        BSTR bstrSubreportContext,
        BSTR bstrFormula,
        VARIANT vtPromptingInfo,
        long lPageNumber,
        long xOffset,
        long yOffset,
        BSTR bstrReserved,
        VARIANT vtReserved,
        VARIANT vtReserved2 ) = 0;
    virtual HRESULT __stdcall raw_DrillMap (
        long lCookie,
        BSTR bstrViewContext,
        BSTR bstrSubreportContext,
        BSTR bstrFormula,
        VARIANT vtPromptingInfo,
        long lPageNumber,
        long xOffset,
        long yOffset,
        BSTR bstrReserved,
        VARIANT vtReserved,
        VARIANT vtReserved2 ) = 0;
    virtual HRESULT __stdcall raw_Search (
        long lCookie,
        BSTR bstrViewContext,
        BSTR bstrSubreportContext,
        BSTR bstrFormula,
        VARIANT vtPromptingInfo,
        long lPageN,
        long lSectionInstN,
        BSTR bstrSearchFormula,
        BSTR bstrReserved,
        VARIANT vtReserved ) = 0;
    virtual HRESULT __stdcall raw_Export (
        long lCookie,
        BSTR bstrViewContext,
        BSTR bstrSubreportContext,
        BSTR bstrFormula,
        VARIANT vtPromptingInfo,
        VARIANT exportFormat,
        VARIANT pageRange ) = 0;
    virtual HRESULT __stdcall raw_GetExportFormats (
        long lCookie ) = 0;
    virtual HRESULT __stdcall raw_Refresh (
        long lCookie,
        VARIANT vtPromptingInfo ) = 0;
    virtual HRESULT __stdcall raw_Cancel (
        long lCookie ) = 0;
};

struct __declspec(uuid("b4742163-45a6-11d1-abec-00a0c9274b91"))
ICrystalReportSourceEx2 : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT GetPage (
        long lCookie,
        _bstr_t bstrViewContext,
        _bstr_t bstrSubreportContext,
        _bstr_t bstrFormula,
        const _variant_t & vtPromptingInfo,
        long lPageNumber,
        const _variant_t & vtReserved );
    HRESULT GetTotaller (
        long lCookie,
        _bstr_t bstrViewContext,
        _bstr_t bstrSubreportContext,
        _bstr_t bstrFormula,
        const _variant_t & vtPromptingInfo,
        long lStartFrom,
        short nLevelsPastRoot,
        const _variant_t & vtMaxNodeCount );
    HRESULT GetLastPageNumber (
        long lCookie,
        _bstr_t bstrViewContext,
        _bstr_t bstrSubreportContext,
        _bstr_t bstrFormula,
        const _variant_t & vtPromptingInfo,
        const _variant_t & vtReserved );
    HRESULT FindGroup (
        long lCookie,
        _bstr_t bstrViewContext,
        _bstr_t bstrSubreportContext,
        _bstr_t bstrFormula,
        const _variant_t & vtPromptingInfo,
        _bstr_t bstrGroupPath,
        const _variant_t & vtReserved );
    HRESULT FindText (
        long lCookie,
        _bstr_t bstrViewContext,
        _bstr_t bstrSubreportContext,
        _bstr_t bstrFormula,
        const _variant_t & vtPromptingInfo,
        long lFromPage,
        long lFromInstance,
        _bstr_t bstrText,
        enum CRSearchDirection nMode,
        const _variant_t & vtReserved );
    HRESULT DrillGraph (
        long lCookie,
        _bstr_t bstrViewContext,
        _bstr_t bstrSubreportContext,
        _bstr_t bstrFormula,
        const _variant_t & vtPromptingInfo,
        long lPageNumber,
        long xOffset,
        long yOffset,
        _bstr_t bstrReserved,
        const _variant_t & vtReserved,
        const _variant_t & vtReserved2 );
    HRESULT DrillMap (
        long lCookie,
        _bstr_t bstrViewContext,
        _bstr_t bstrSubreportContext,
        _bstr_t bstrFormula,
        const _variant_t & vtPromptingInfo,
        long lPageNumber,
        long xOffset,
        long yOffset,
        _bstr_t bstrReserved,
        const _variant_t & vtReserved,
        const _variant_t & vtReserved2 );
    HRESULT Search (
        long lCookie,
        _bstr_t bstrViewContext,
        _bstr_t bstrSubreportContext,
        _bstr_t bstrFormula,
        const _variant_t & vtPromptingInfo,
        long lPageN,
        long lSectionInstN,
        _bstr_t bstrSearchFormula,
        _bstr_t bstrReserved,
        const _variant_t & vtReserved );
    HRESULT Export (
        long lCookie,
        _bstr_t bstrViewContext,
        _bstr_t bstrSubreportContext,
        _bstr_t bstrFormula,
        const _variant_t & vtPromptingInfo,
        const _variant_t & exportFormat,
        const _variant_t & pageRange );
    HRESULT GetExportFormats (
        long lCookie );
    HRESULT Refresh (
        long lCookie,
        const _variant_t & vtPromptingInfo );
    HRESULT Cancel (
        long lCookie );
    HRESULT Update (
        long lCookie );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_GetPage (
        long lCookie,
        BSTR bstrViewContext,
        BSTR bstrSubreportContext,
        BSTR bstrFormula,
        VARIANT vtPromptingInfo,
        long lPageNumber,
        VARIANT vtReserved ) = 0;
    virtual HRESULT __stdcall raw_GetTotaller (
        long lCookie,
        BSTR bstrViewContext,
        BSTR bstrSubreportContext,
        BSTR bstrFormula,
        VARIANT vtPromptingInfo,
        long lStartFrom,
        short nLevelsPastRoot,
        VARIANT vtMaxNodeCount ) = 0;
    virtual HRESULT __stdcall raw_GetLastPageNumber (
        long lCookie,
        BSTR bstrViewContext,
        BSTR bstrSubreportContext,
        BSTR bstrFormula,
        VARIANT vtPromptingInfo,
        VARIANT vtReserved ) = 0;
    virtual HRESULT __stdcall raw_FindGroup (
        long lCookie,
        BSTR bstrViewContext,
        BSTR bstrSubreportContext,
        BSTR bstrFormula,
        VARIANT vtPromptingInfo,
        BSTR bstrGroupPath,
        VARIANT vtReserved ) = 0;
    virtual HRESULT __stdcall raw_FindText (
        long lCookie,
        BSTR bstrViewContext,
        BSTR bstrSubreportContext,
        BSTR bstrFormula,
        VARIANT vtPromptingInfo,
        long lFromPage,
        long lFromInstance,
        BSTR bstrText,
        enum CRSearchDirection nMode,
        VARIANT vtReserved ) = 0;
    virtual HRESULT __stdcall raw_DrillGraph (
        long lCookie,
        BSTR bstrViewContext,
        BSTR bstrSubreportContext,
        BSTR bstrFormula,
        VARIANT vtPromptingInfo,
        long lPageNumber,
        long xOffset,
        long yOffset,
        BSTR bstrReserved,
        VARIANT vtReserved,
        VARIANT vtReserved2 ) = 0;
    virtual HRESULT __stdcall raw_DrillMap (
        long lCookie,
        BSTR bstrViewContext,
        BSTR bstrSubreportContext,
        BSTR bstrFormula,
        VARIANT vtPromptingInfo,
        long lPageNumber,
        long xOffset,
        long yOffset,
        BSTR bstrReserved,
        VARIANT vtReserved,
        VARIANT vtReserved2 ) = 0;
    virtual HRESULT __stdcall raw_Search (
        long lCookie,
        BSTR bstrViewContext,
        BSTR bstrSubreportContext,
        BSTR bstrFormula,
        VARIANT vtPromptingInfo,
        long lPageN,
        long lSectionInstN,
        BSTR bstrSearchFormula,
        BSTR bstrReserved,
        VARIANT vtReserved ) = 0;
    virtual HRESULT __stdcall raw_Export (
        long lCookie,
        BSTR bstrViewContext,
        BSTR bstrSubreportContext,
        BSTR bstrFormula,
        VARIANT vtPromptingInfo,
        VARIANT exportFormat,
        VARIANT pageRange ) = 0;
    virtual HRESULT __stdcall raw_GetExportFormats (
        long lCookie ) = 0;
    virtual HRESULT __stdcall raw_Refresh (
        long lCookie,
        VARIANT vtPromptingInfo ) = 0;
    virtual HRESULT __stdcall raw_Cancel (
        long lCookie ) = 0;
    virtual HRESULT __stdcall raw_Update (
        long lCookie ) = 0;
};

//
// Function implementation mapping
//

#pragma start_map_region("craxdrt.tli")
__declspec(implementation_key(1)) IAreasPtr IReport::GetAreas ( );
__declspec(implementation_key(2)) ISectionsPtr IReport::GetSections ( );
__declspec(implementation_key(3)) DATE IReport::GetPrintDate ( );
__declspec(implementation_key(4)) void IReport::PutPrintDate ( DATE pDate );
__declspec(implementation_key(5)) VARIANT_BOOL IReport::GetUseIndexForSpeed ( );
__declspec(implementation_key(6)) void IReport::PutUseIndexForSpeed ( VARIANT_BOOL pBool );
__declspec(implementation_key(7)) VARIANT_BOOL IReport::GetTranslateDosStrings ( );
__declspec(implementation_key(8)) void IReport::PutTranslateDosStrings ( VARIANT_BOOL pBool );
__declspec(implementation_key(9)) VARIANT_BOOL IReport::GetTranslateDosMemos ( );
__declspec(implementation_key(10)) void IReport::PutTranslateDosMemos ( VARIANT_BOOL pBool );
__declspec(implementation_key(11)) enum CRConvertDateTimeType IReport::GetConvertDateTimeType ( );
__declspec(implementation_key(12)) void IReport::PutConvertDateTimeType ( enum CRConvertDateTimeType pDateTimeType );
__declspec(implementation_key(13)) VARIANT_BOOL IReport::GetConvertNullFieldToDefault ( );
__declspec(implementation_key(14)) void IReport::PutConvertNullFieldToDefault ( VARIANT_BOOL pBool );
__declspec(implementation_key(15)) VARIANT_BOOL IReport::GetCaseInsensitiveSQLData ( );
__declspec(implementation_key(16)) void IReport::PutCaseInsensitiveSQLData ( VARIANT_BOOL pBool );
__declspec(implementation_key(17)) VARIANT_BOOL IReport::GetVerifyOnEveryPrint ( );
__declspec(implementation_key(18)) void IReport::PutVerifyOnEveryPrint ( VARIANT_BOOL pBool );
__declspec(implementation_key(19)) IDatabasePtr IReport::GetDatabase ( );
__declspec(implementation_key(20)) _bstr_t IReport::GetPrinterName ( );
__declspec(implementation_key(21)) _bstr_t IReport::GetDriverName ( );
__declspec(implementation_key(22)) _bstr_t IReport::GetPortName ( );
__declspec(implementation_key(23)) enum CRPaperOrientation IReport::GetPaperOrientation ( );
__declspec(implementation_key(24)) void IReport::PutPaperOrientation ( enum CRPaperOrientation pPaperOrientation );
__declspec(implementation_key(25)) enum CRPaperSize IReport::GetPaperSize ( );
__declspec(implementation_key(26)) void IReport::PutPaperSize ( enum CRPaperSize pPaperSize );
__declspec(implementation_key(27)) HRESULT IReport::Save ( _bstr_t pReportFileName );
__declspec(implementation_key(28)) HRESULT IReport::PrintOut ( const _variant_t & promptUser, const _variant_t & numberOfCopy, const _variant_t & collated, const _variant_t & startPageN, const _variant_t & stopPageN );
__declspec(implementation_key(29)) HRESULT IReport::SelectPrinter ( _bstr_t pDriverName, _bstr_t pPrinterName, _bstr_t pPortName );
__declspec(implementation_key(30)) IFormulaFieldDefinitionsPtr IReport::GetFormulaFields ( );
__declspec(implementation_key(31)) IParameterFieldDefinitionsPtr IReport::GetParameterFields ( );
__declspec(implementation_key(32)) IGroupNameFieldDefinitionsPtr IReport::GetGroupNameFields ( );
__declspec(implementation_key(33)) ISummaryFieldDefinitionsPtr IReport::GetSummaryFields ( );
__declspec(implementation_key(34)) enum CRReportKind IReport::GetKind ( );
__declspec(implementation_key(35)) IReportPtr IReport::GetParent ( );
__declspec(implementation_key(36)) long IReport::GetNumberOfGroup ( );
__declspec(implementation_key(37)) VARIANT_BOOL IReport::GetMorePrintEngineErrorMessages ( );
__declspec(implementation_key(38)) void IReport::PutMorePrintEngineErrorMessages ( VARIANT_BOOL pBool );
__declspec(implementation_key(39)) long IReport::GetLeftMargin ( );
__declspec(implementation_key(40)) void IReport::PutLeftMargin ( long pLeftMargin );
__declspec(implementation_key(41)) long IReport::GetRightMargin ( );
__declspec(implementation_key(42)) void IReport::PutRightMargin ( long pRightMargin );
__declspec(implementation_key(43)) long IReport::GetTopMargin ( );
__declspec(implementation_key(44)) void IReport::PutTopMargin ( long pTopMargin );
__declspec(implementation_key(45)) long IReport::GetBottomMargin ( );
__declspec(implementation_key(46)) void IReport::PutBottomMargin ( long pBottomMargin );
__declspec(implementation_key(47)) IPageEnginePtr IReport::GetPageEngine ( );
__declspec(implementation_key(48)) HRESULT IReport::Export ( const _variant_t & promptUser );
__declspec(implementation_key(49)) IExportOptionsPtr IReport::GetExportOptions ( );
__declspec(implementation_key(50)) IApplicationPtr IReport::GetApplication ( );
__declspec(implementation_key(51)) VARIANT_BOOL IReport::GetEnableParameterPrompting ( );
__declspec(implementation_key(52)) void IReport::PutEnableParameterPrompting ( VARIANT_BOOL pBool );
__declspec(implementation_key(53)) VARIANT_BOOL IReport::GetDisplayProgressDialog ( );
__declspec(implementation_key(54)) void IReport::PutDisplayProgressDialog ( VARIANT_BOOL pBool );
__declspec(implementation_key(55)) _bstr_t IReport::GetRecordSelectionFormula ( );
__declspec(implementation_key(56)) void IReport::PutRecordSelectionFormula ( _bstr_t ppRecordSelectionFormula );
__declspec(implementation_key(57)) _bstr_t IReport::GetGroupSelectionFormula ( );
__declspec(implementation_key(58)) void IReport::PutGroupSelectionFormula ( _bstr_t ppGroupSelectionFormula );
__declspec(implementation_key(59)) ISortFieldsPtr IReport::GetRecordSortFields ( );
__declspec(implementation_key(60)) HRESULT IReport::CancelPrinting ( );
__declspec(implementation_key(61)) VARIANT_BOOL IReport::GetHasSavedData ( );
__declspec(implementation_key(62)) HRESULT IReport::DiscardSavedData ( );
__declspec(implementation_key(63)) IPrintingStatusPtr IReport::GetPrintingStatus ( );
__declspec(implementation_key(64)) _bstr_t IReport::GetReportTitle ( );
__declspec(implementation_key(65)) void IReport::PutReportTitle ( _bstr_t ppReportTitle );
__declspec(implementation_key(66)) _bstr_t IReport::GetReportSubject ( );
__declspec(implementation_key(67)) void IReport::PutReportSubject ( _bstr_t ppReportSubject );
__declspec(implementation_key(68)) _bstr_t IReport::GetReportAuthor ( );
__declspec(implementation_key(69)) void IReport::PutReportAuthor ( _bstr_t ppReportAuthor );
__declspec(implementation_key(70)) _bstr_t IReport::GetReportComments ( );
__declspec(implementation_key(71)) void IReport::PutReportComments ( _bstr_t ppReportComments );
__declspec(implementation_key(72)) _bstr_t IReport::GetReportTemplate ( );
__declspec(implementation_key(73)) void IReport::PutReportTemplate ( _bstr_t ppReportTemplate );
__declspec(implementation_key(74)) _bstr_t IReport::GetKeywordsInReport ( );
__declspec(implementation_key(75)) void IReport::PutKeywordsInReport ( _bstr_t ppKeywordsInReport );
__declspec(implementation_key(76)) _bstr_t IReport::GetApplicationName ( );
__declspec(implementation_key(77)) void IReport::PutApplicationName ( _bstr_t ppApplicationName );
__declspec(implementation_key(78)) HRESULT IReport::ReadRecords ( );
__declspec(implementation_key(79)) _variant_t IReport::GetNextRows ( long startRowN, long * pRowN );
__declspec(implementation_key(80)) IRunningTotalFieldDefinitionsPtr IReport::GetRunningTotalFields ( );
__declspec(implementation_key(81)) VARIANT_BOOL IReport::GetPerformGroupingOnServer ( );
__declspec(implementation_key(82)) void IReport::PutPerformGroupingOnServer ( VARIANT_BOOL pBool );
__declspec(implementation_key(83)) VARIANT_BOOL IReport::GetCanPerformGroupingOnServer ( );
__declspec(implementation_key(84)) _bstr_t IReport::GetSQLQueryString ( );
__declspec(implementation_key(85)) void IReport::PutSQLQueryString ( _bstr_t ppSQLQueryString );
__declspec(implementation_key(86)) ISQLExpressionFieldDefinitionsPtr IReport::GetSQLExpressionFields ( );
__declspec(implementation_key(87)) IReportPtr IReport::OpenSubreport ( _bstr_t pSubreportName );
__declspec(implementation_key(88)) ISortFieldsPtr IReport::GetGroupSortFields ( );
__declspec(implementation_key(89)) HRESULT IReport::AddGroup ( short GroupNumber, IDispatch * pConditionField, enum CRGroupCondition Condition, enum CRSortDirection SortDirection );
__declspec(implementation_key(90)) HRESULT IReport::SetDialogParentWindow ( long hWnd );
__declspec(implementation_key(91)) VARIANT_BOOL IReport::GetEnablePerformQueriesAsynchronously ( );
__declspec(implementation_key(92)) void IReport::PutEnablePerformQueriesAsynchronously ( VARIANT_BOOL pBool );
__declspec(implementation_key(93)) VARIANT_BOOL IReport::GetEnableSelectDistinctRecords ( );
__declspec(implementation_key(94)) void IReport::PutEnableSelectDistinctRecords ( VARIANT_BOOL pBool );
__declspec(implementation_key(95)) HRESULT IReport::AddReportVariable ( enum CRReportVariableValueType type, _bstr_t pName, long arraySize, const _variant_t & reserved );
__declspec(implementation_key(96)) _variant_t IReport::GetReportVariableValue ( _bstr_t pName );
__declspec(implementation_key(97)) HRESULT IReport::SetReportVariableValue ( _bstr_t pName, const _variant_t & var );
__declspec(implementation_key(98)) enum CRReportFormatStyle IReport::GetReportFormatStyle ( );
__declspec(implementation_key(99)) void IReport::PutReportFormatStyle ( enum CRReportFormatStyle pFormatStyle );
__declspec(implementation_key(100)) HRESULT IReport::DeleteGroup ( short GroupNumber );
__declspec(implementation_key(101)) VARIANT_BOOL IReport::GetEnableAsyncQuery ( );
__declspec(implementation_key(102)) void IReport::PutEnableAsyncQuery ( VARIANT_BOOL pBool );
__declspec(implementation_key(103)) VARIANT_BOOL IReport::GetEnableGeneratingDataForHiddenObject ( );
__declspec(implementation_key(104)) void IReport::PutEnableGeneratingDataForHiddenObject ( VARIANT_BOOL pBool );
__declspec(implementation_key(105)) void IReport::PutPrinterDuplex ( enum CRPrinterDuplexType pPrinterDuplexType );
__declspec(implementation_key(106)) enum CRPrinterDuplexType IReport::GetPrinterDuplex ( );
__declspec(implementation_key(107)) void IReport::PutPaperSource ( enum CRPaperSource pPaperSource );
__declspec(implementation_key(108)) enum CRPaperSource IReport::GetPaperSource ( );
__declspec(implementation_key(109)) VARIANT_BOOL IReport::GetSavePreviewPicture ( );
__declspec(implementation_key(110)) void IReport::PutSavePreviewPicture ( VARIANT_BOOL pBool );
__declspec(implementation_key(111)) HRESULT IReport::PrinterSetup ( long hWnd );
__declspec(implementation_key(112)) HRESULT IReport::AutoSetUnboundFieldSource ( enum CRBindingMatchType matchType, const _variant_t & bindSubReports );
__declspec(implementation_key(113)) HRESULT IReport::SaveAs ( _bstr_t pFilePath, enum CRReportFileFormat fileFormat );
__declspec(implementation_key(114)) void IReport::PutFieldMappingType ( enum CRFieldMappingType fldMappingType );
__declspec(implementation_key(115)) enum CRFieldMappingType IReport::GetFieldMappingType ( );
__declspec(implementation_key(116)) enum CRFormulaSyntax IReport::GetFormulaSyntax ( );
__declspec(implementation_key(117)) void IReport::PutFormulaSyntax ( enum CRFormulaSyntax pFormulaSyntax );
__declspec(implementation_key(118)) enum CRFormulaSyntax IReport::GetLastGetFormulaSyntax ( );
__declspec(implementation_key(119)) VARIANT_BOOL IReport::GetNeedUpdatePages ( );
__declspec(implementation_key(120)) IReportAlertsPtr IReport::GetReportAlerts ( );
__declspec(implementation_key(121)) HRESULT IReport::SwapGroups ( short sourceGroupN, short targetGroupN );
__declspec(implementation_key(122)) HRESULT IReport::SetUserPaperSize ( short length, short Width );
__declspec(implementation_key(123)) HRESULT IReport::PrintOutEx ( const _variant_t & promptUser, const _variant_t & numberOfCopy, const _variant_t & collated, const _variant_t & startPageN, const _variant_t & stopPageN, _bstr_t printFileName );
__declspec(implementation_key(124)) long IReport::PrinterSetupEx ( long hWnd );
__declspec(implementation_key(125)) IUnknownPtr IAreas::Get_NewEnum ( );
__declspec(implementation_key(126)) IAreaPtr IAreas::GetItem ( const _variant_t & index );
__declspec(implementation_key(127)) long IAreas::GetCount ( );
__declspec(implementation_key(128)) IReportPtr IAreas::GetParent ( );
__declspec(implementation_key(129)) _bstr_t IArea::GetName ( );
__declspec(implementation_key(130)) void IArea::PutName ( _bstr_t ppName );
__declspec(implementation_key(131)) enum CRAreaKind IArea::GetKind ( );
__declspec(implementation_key(132)) ISectionsPtr IArea::GetSections ( );
__declspec(implementation_key(133)) IReportPtr IArea::GetParent ( );
__declspec(implementation_key(134)) VARIANT_BOOL IArea::GetSuppress ( );
__declspec(implementation_key(135)) void IArea::PutSuppress ( VARIANT_BOOL pBool );
__declspec(implementation_key(136)) VARIANT_BOOL IArea::GetHideForDrillDown ( );
__declspec(implementation_key(137)) void IArea::PutHideForDrillDown ( VARIANT_BOOL pBool );
__declspec(implementation_key(138)) short IArea::GetGroupNumber ( );
__declspec(implementation_key(139)) short IArea::GetCopiesToPrint ( );
__declspec(implementation_key(140)) void IArea::PutCopiesToPrint ( short pCopiesToPrint );
__declspec(implementation_key(141)) VARIANT_BOOL IArea::GetKeepTogether ( );
__declspec(implementation_key(142)) void IArea::PutKeepTogether ( VARIANT_BOOL pBool );
__declspec(implementation_key(143)) VARIANT_BOOL IArea::GetNewPageAfter ( );
__declspec(implementation_key(144)) void IArea::PutNewPageAfter ( VARIANT_BOOL pBool );
__declspec(implementation_key(145)) VARIANT_BOOL IArea::GetNewPageBefore ( );
__declspec(implementation_key(146)) void IArea::PutNewPageBefore ( VARIANT_BOOL pBool );
__declspec(implementation_key(147)) VARIANT_BOOL IArea::GetPrintAtBottomOfPage ( );
__declspec(implementation_key(148)) void IArea::PutPrintAtBottomOfPage ( VARIANT_BOOL pBool );
__declspec(implementation_key(149)) VARIANT_BOOL IArea::GetResetPageNumberAfter ( );
__declspec(implementation_key(150)) void IArea::PutResetPageNumberAfter ( VARIANT_BOOL pBool );
__declspec(implementation_key(151)) enum CRSortDirection IArea::GetSortDirection ( );
__declspec(implementation_key(152)) void IArea::PutSortDirection ( enum CRSortDirection pSortDirection );
__declspec(implementation_key(153)) VARIANT_BOOL IArea::GetRepeatGroupHeader ( );
__declspec(implementation_key(154)) void IArea::PutRepeatGroupHeader ( VARIANT_BOOL pBool );
__declspec(implementation_key(155)) VARIANT_BOOL IArea::GetKeepGroupTogether ( );
__declspec(implementation_key(156)) void IArea::PutKeepGroupTogether ( VARIANT_BOOL pBool );
__declspec(implementation_key(157)) enum CRGroupCondition IArea::GetGroupCondition ( );
__declspec(implementation_key(158)) void IArea::PutGroupCondition ( enum CRGroupCondition pGroupCondition );
__declspec(implementation_key(159)) IDispatchPtr IArea::GetGroupConditionField ( );
__declspec(implementation_key(160)) void IArea::PutGroupConditionField ( IDispatch * ppConditionField );
__declspec(implementation_key(161)) long IArea::GetDetailWidth ( );
__declspec(implementation_key(162)) long IArea::GetDetailHeight ( );
__declspec(implementation_key(163)) long IArea::GetHorizontalGap ( );
__declspec(implementation_key(164)) enum CRTopBottomNGroupSortOrder IArea::GetTopOrBottomNGroupSortOrder ( );
__declspec(implementation_key(165)) void IArea::PutTopOrBottomNGroupSortOrder ( enum CRTopBottomNGroupSortOrder pTopOrBottomNGroupSortOrder );
__declspec(implementation_key(166)) short IArea::GetNumberOfTopOrBottomNGroups ( );
__declspec(implementation_key(167)) void IArea::PutNumberOfTopOrBottomNGroups ( short pNumberOfTopOrBottomNGroups );
__declspec(implementation_key(168)) VARIANT_BOOL IArea::GetDiscardOtherGroups ( );
__declspec(implementation_key(169)) void IArea::PutDiscardOtherGroups ( VARIANT_BOOL pBool );
__declspec(implementation_key(170)) ISummaryFieldDefinitionPtr IArea::GetTopOrBottomNSortField ( );
__declspec(implementation_key(171)) void IArea::PutTopOrBottomNSortField ( struct ISummaryFieldDefinition * ppTopOrBottomNSortField );
__declspec(implementation_key(172)) VARIANT_BOOL IArea::GetEnableHierarchicalGroupSorting ( );
__declspec(implementation_key(173)) void IArea::PutEnableHierarchicalGroupSorting ( VARIANT_BOOL pBool );
__declspec(implementation_key(174)) IFieldDefinitionPtr IArea::GetParentIDField ( );
__declspec(implementation_key(175)) HRESULT IArea::SetParentIDField ( const _variant_t & ParentIDField );
__declspec(implementation_key(176)) IFieldDefinitionPtr IArea::GetInstanceIDField ( );
__declspec(implementation_key(177)) HRESULT IArea::SetInstanceIDField ( const _variant_t & InstanceIDField );
__declspec(implementation_key(178)) long IArea::GetGroupIndent ( );
__declspec(implementation_key(179)) void IArea::PutGroupIndent ( long pGroupIndent );
__declspec(implementation_key(180)) _variant_t IArea::GetSpecifiedGroups ( );
__declspec(implementation_key(181)) void IArea::PutSpecifiedGroups ( VARIANT * pSpecifedGroupArray );
__declspec(implementation_key(182)) _bstr_t IArea::GetConditionFormula ( const _variant_t & FormulaName );
__declspec(implementation_key(183)) void IArea::PutConditionFormula ( const _variant_t & FormulaName, _bstr_t pVal );
__declspec(implementation_key(184)) IUnknownPtr ISections::Get_NewEnum ( );
__declspec(implementation_key(185)) ISectionPtr ISections::GetItem ( const _variant_t & index );
__declspec(implementation_key(186)) long ISections::GetCount ( );
__declspec(implementation_key(187)) IDispatchPtr ISections::GetParent ( );
__declspec(implementation_key(188)) ISectionPtr ISections::Add ( const _variant_t & index );
__declspec(implementation_key(189)) HRESULT ISections::Delete ( const _variant_t & index );
__declspec(implementation_key(190)) _bstr_t ISection::GetName ( );
__declspec(implementation_key(191)) void ISection::PutName ( _bstr_t ppName );
__declspec(implementation_key(192)) long ISection::GetHeight ( );
__declspec(implementation_key(193)) void ISection::PutHeight ( long pHeight );
__declspec(implementation_key(194)) IReportObjectsPtr ISection::GetReportObjects ( );
__declspec(implementation_key(195)) long ISection::GetWidth ( );
__declspec(implementation_key(196)) OLE_COLOR ISection::GetBackColor ( );
__declspec(implementation_key(197)) void ISection::PutBackColor ( OLE_COLOR pBackColor );
__declspec(implementation_key(198)) VARIANT_BOOL ISection::GetSuppress ( );
__declspec(implementation_key(199)) void ISection::PutSuppress ( VARIANT_BOOL pBool );
__declspec(implementation_key(200)) IAreaPtr ISection::GetParent ( );
__declspec(implementation_key(201)) short ISection::GetNumber ( );
__declspec(implementation_key(202)) VARIANT_BOOL ISection::GetNewPageBefore ( );
__declspec(implementation_key(203)) void ISection::PutNewPageBefore ( VARIANT_BOOL pBool );
__declspec(implementation_key(204)) VARIANT_BOOL ISection::GetNewPageAfter ( );
__declspec(implementation_key(205)) void ISection::PutNewPageAfter ( VARIANT_BOOL pBool );
__declspec(implementation_key(206)) VARIANT_BOOL ISection::GetKeepTogether ( );
__declspec(implementation_key(207)) void ISection::PutKeepTogether ( VARIANT_BOOL pBool );
__declspec(implementation_key(208)) VARIANT_BOOL ISection::GetResetPageNumberAfter ( );
__declspec(implementation_key(209)) void ISection::PutResetPageNumberAfter ( VARIANT_BOOL pBool );
__declspec(implementation_key(210)) VARIANT_BOOL ISection::GetPrintAtBottomOfPage ( );
__declspec(implementation_key(211)) void ISection::PutPrintAtBottomOfPage ( VARIANT_BOOL pBool );
__declspec(implementation_key(212)) VARIANT_BOOL ISection::GetUnderlaySection ( );
__declspec(implementation_key(213)) void ISection::PutUnderlaySection ( VARIANT_BOOL pBool );
__declspec(implementation_key(214)) VARIANT_BOOL ISection::GetSuppressIfBlank ( );
__declspec(implementation_key(215)) void ISection::PutSuppressIfBlank ( VARIANT_BOOL pBool );
__declspec(implementation_key(216)) long ISection::GetMinimumHeight ( );
__declspec(implementation_key(217)) IFieldObjectPtr ISection::AddFieldObject ( const _variant_t & Field, long Left, long Top );
__declspec(implementation_key(218)) ITextObjectPtr ISection::AddTextObject ( _bstr_t pText, long Left, long Top, const _variant_t & formatText );
__declspec(implementation_key(219)) IBlobFieldObjectPtr ISection::AddBlobFieldObject ( const _variant_t & Field, long Left, long Top );
__declspec(implementation_key(220)) IFieldObjectPtr ISection::AddSpecialVarFieldObject ( enum CRSpecialVarType specialVarType, long Left, long Top );
__declspec(implementation_key(221)) ISubreportObjectPtr ISection::AddSubreportObject ( _bstr_t pSubreportName, long Left, long Top );
__declspec(implementation_key(222)) ISubreportObjectPtr ISection::ImportSubreport ( _bstr_t subreportFileName, long Left, long Top );
__declspec(implementation_key(223)) HRESULT ISection::DeleteObject ( const _variant_t & reportObject );
__declspec(implementation_key(224)) ILineObjectPtr ISection::AddLineObject ( long Left, long Top, long Right, long Bottom, const _variant_t & pEndSection );
__declspec(implementation_key(225)) IBoxObjectPtr ISection::AddBoxObject ( long Left, long Top, long Right, long Bottom, const _variant_t & pEndSection );
__declspec(implementation_key(226)) ICrossTabObjectPtr ISection::AddCrossTabObject ( long Left, long Top );
__declspec(implementation_key(227)) ICROleObjectPtr ISection::AddPictureObject ( _bstr_t pImageFilePath, long Left, long Top );
__declspec(implementation_key(228)) IGraphObjectPtr ISection::AddGraphObject ( enum CRGraphDataType graphDataType, long Left, long Top, const _variant_t & pCrossTabObject );
__declspec(implementation_key(229)) IFieldObjectPtr ISection::AddSummaryFieldObject ( const _variant_t & Field, enum CRSummaryType SummaryType, long Left, long Top, const _variant_t & secondSummaryFieldOrFactor );
__declspec(implementation_key(230)) IFieldObjectPtr ISection::AddUnboundFieldObject ( CRFieldValueType ValueType, long Left, long Top );
__declspec(implementation_key(231)) _bstr_t ISection::GetConditionFormula ( const _variant_t & FormulaName );
__declspec(implementation_key(232)) void ISection::PutConditionFormula ( const _variant_t & FormulaName, _bstr_t pVal );
__declspec(implementation_key(233)) _bstr_t ISection::GetCssClass ( );
__declspec(implementation_key(234)) void ISection::PutCssClass ( _bstr_t ppCssClass );
__declspec(implementation_key(235)) IUnknownPtr IReportObjects::Get_NewEnum ( );
__declspec(implementation_key(236)) IDispatchPtr IReportObjects::GetItem ( const _variant_t & index );
__declspec(implementation_key(237)) long IReportObjects::GetCount ( );
__declspec(implementation_key(238)) ISectionPtr IReportObjects::GetParent ( );
__declspec(implementation_key(239)) _bstr_t IFieldObject::GetName ( );
__declspec(implementation_key(240)) void IFieldObject::PutName ( _bstr_t ppName );
__declspec(implementation_key(241)) enum CRObjectKind IFieldObject::GetKind ( );
__declspec(implementation_key(242)) long IFieldObject::GetLeft ( );
__declspec(implementation_key(243)) void IFieldObject::PutLeft ( long pLeft );
__declspec(implementation_key(244)) long IFieldObject::GetTop ( );
__declspec(implementation_key(245)) void IFieldObject::PutTop ( long pTop );
__declspec(implementation_key(246)) long IFieldObject::GetWidth ( );
__declspec(implementation_key(247)) void IFieldObject::PutWidth ( long pWidth );
__declspec(implementation_key(248)) long IFieldObject::GetHeight ( );
__declspec(implementation_key(249)) void IFieldObject::PutHeight ( long pHeight );
__declspec(implementation_key(250)) enum CRLineStyle IFieldObject::GetLeftLineStyle ( );
__declspec(implementation_key(251)) void IFieldObject::PutLeftLineStyle ( enum CRLineStyle pLeftLineStyle );
__declspec(implementation_key(252)) enum CRLineStyle IFieldObject::GetRightLineStyle ( );
__declspec(implementation_key(253)) void IFieldObject::PutRightLineStyle ( enum CRLineStyle pRightLineStyle );
__declspec(implementation_key(254)) enum CRLineStyle IFieldObject::GetTopLineStyle ( );
__declspec(implementation_key(255)) void IFieldObject::PutTopLineStyle ( enum CRLineStyle pTopLineStyle );
__declspec(implementation_key(256)) enum CRLineStyle IFieldObject::GetBottomLineStyle ( );
__declspec(implementation_key(257)) void IFieldObject::PutBottomLineStyle ( enum CRLineStyle pBottomLineStyle );
__declspec(implementation_key(258)) VARIANT_BOOL IFieldObject::GetEnableTightHorizontal ( );
__declspec(implementation_key(259)) void IFieldObject::PutEnableTightHorizontal ( VARIANT_BOOL pBool );
__declspec(implementation_key(260)) VARIANT_BOOL IFieldObject::GetHasDropShadow ( );
__declspec(implementation_key(261)) void IFieldObject::PutHasDropShadow ( VARIANT_BOOL pBool );
__declspec(implementation_key(262)) OLE_COLOR IFieldObject::GetBackColor ( );
__declspec(implementation_key(263)) void IFieldObject::PutBackColor ( OLE_COLOR pBackColor );
__declspec(implementation_key(264)) OLE_COLOR IFieldObject::GetBorderColor ( );
__declspec(implementation_key(265)) void IFieldObject::PutBorderColor ( OLE_COLOR pBorderColor );
__declspec(implementation_key(266)) ISectionPtr IFieldObject::GetParent ( );
__declspec(implementation_key(267)) VARIANT_BOOL IFieldObject::GetSuppress ( );
__declspec(implementation_key(268)) void IFieldObject::PutSuppress ( VARIANT_BOOL pBool );
__declspec(implementation_key(269)) VARIANT_BOOL IFieldObject::GetCloseAtPageBreak ( );
__declspec(implementation_key(270)) void IFieldObject::PutCloseAtPageBreak ( VARIANT_BOOL pBool );
__declspec(implementation_key(271)) VARIANT_BOOL IFieldObject::GetKeepTogether ( );
__declspec(implementation_key(272)) void IFieldObject::PutKeepTogether ( VARIANT_BOOL pBool );
__declspec(implementation_key(273)) OLE_COLOR IFieldObject::GetTextColor ( );
__declspec(implementation_key(274)) void IFieldObject::PutTextColor ( OLE_COLOR pTextColor );
__declspec(implementation_key(275)) IFontDisp * IFieldObject::GetFont ( );
__declspec(implementation_key(276)) void IFieldObject::PutRefFont ( IFontDisp * ppFont );
__declspec(implementation_key(277)) IDispatchPtr IFieldObject::GetField ( );
__declspec(implementation_key(278)) enum CRAlignment IFieldObject::GetHorAlignment ( );
__declspec(implementation_key(279)) void IFieldObject::PutHorAlignment ( enum CRAlignment pHorAlignment );
__declspec(implementation_key(280)) _variant_t IFieldObject::GetValue ( );
__declspec(implementation_key(281)) VARIANT_BOOL IFieldObject::GetCanGrow ( );
__declspec(implementation_key(282)) void IFieldObject::PutCanGrow ( VARIANT_BOOL pBool );
__declspec(implementation_key(283)) VARIANT_BOOL IFieldObject::GetSuppressIfDuplicated ( );
__declspec(implementation_key(284)) void IFieldObject::PutSuppressIfDuplicated ( VARIANT_BOOL pBool );
__declspec(implementation_key(285)) VARIANT_BOOL IFieldObject::GetUseSystemDefaults ( );
__declspec(implementation_key(286)) void IFieldObject::PutUseSystemDefaults ( VARIANT_BOOL pBool );
__declspec(implementation_key(287)) VARIANT_BOOL IFieldObject::GetSuppressIfZero ( );
__declspec(implementation_key(288)) void IFieldObject::PutSuppressIfZero ( VARIANT_BOOL pBool );
__declspec(implementation_key(289)) enum CRNegativeType IFieldObject::GetNegativeType ( );
__declspec(implementation_key(290)) void IFieldObject::PutNegativeType ( enum CRNegativeType pNegativeType );
__declspec(implementation_key(291)) VARIANT_BOOL IFieldObject::GetThousandsSeparators ( );
__declspec(implementation_key(292)) void IFieldObject::PutThousandsSeparators ( VARIANT_BOOL pBool );
__declspec(implementation_key(293)) VARIANT_BOOL IFieldObject::GetUseLeadingZero ( );
__declspec(implementation_key(294)) void IFieldObject::PutUseLeadingZero ( VARIANT_BOOL pBool );
__declspec(implementation_key(295)) short IFieldObject::GetDecimalPlaces ( );
__declspec(implementation_key(296)) void IFieldObject::PutDecimalPlaces ( short pDecimalPlaces );
__declspec(implementation_key(297)) enum CRRoundingType IFieldObject::GetRoundingType ( );
__declspec(implementation_key(298)) void IFieldObject::PutRoundingType ( enum CRRoundingType pRoundingType );
__declspec(implementation_key(299)) _bstr_t IFieldObject::GetThousandSymbol ( );
__declspec(implementation_key(300)) void IFieldObject::PutThousandSymbol ( _bstr_t ppThousandSymbol );
__declspec(implementation_key(301)) _bstr_t IFieldObject::GetDecimalSymbol ( );
__declspec(implementation_key(302)) void IFieldObject::PutDecimalSymbol ( _bstr_t ppDecimalSymbol );
__declspec(implementation_key(303)) enum CRCurrencySymbolType IFieldObject::GetCurrencySymbolType ( );
__declspec(implementation_key(304)) void IFieldObject::PutCurrencySymbolType ( enum CRCurrencySymbolType pCurrencySymbolType );
__declspec(implementation_key(305)) VARIANT_BOOL IFieldObject::GetUseOneSymbolPerPage ( );
__declspec(implementation_key(306)) void IFieldObject::PutUseOneSymbolPerPage ( VARIANT_BOOL pBool );
__declspec(implementation_key(307)) enum CRCurrencyPositionType IFieldObject::GetCurrencyPositionType ( );
__declspec(implementation_key(308)) void IFieldObject::PutCurrencyPositionType ( enum CRCurrencyPositionType pCurrencyPositionType );
__declspec(implementation_key(309)) _bstr_t IFieldObject::GetCurrencySymbol ( );
__declspec(implementation_key(310)) void IFieldObject::PutCurrencySymbol ( _bstr_t ppCurrencySymbol );
__declspec(implementation_key(311)) enum CRBooleanOutputType IFieldObject::GetBooleanOutputType ( );
__declspec(implementation_key(312)) void IFieldObject::PutBooleanOutputType ( enum CRBooleanOutputType pBooleanOutputType );
__declspec(implementation_key(313)) enum CRDateWindowsDefaultType IFieldObject::GetDateWindowsDefaultType ( );
__declspec(implementation_key(314)) void IFieldObject::PutDateWindowsDefaultType ( enum CRDateWindowsDefaultType pDateWindowsDefaultType );
__declspec(implementation_key(315)) enum CRDateOrder IFieldObject::GetDateOrder ( );
__declspec(implementation_key(316)) void IFieldObject::PutDateOrder ( enum CRDateOrder pDateOrder );
__declspec(implementation_key(317)) enum CRYearType IFieldObject::GetYearType ( );
__declspec(implementation_key(318)) void IFieldObject::PutYearType ( enum CRYearType pYearType );
__declspec(implementation_key(319)) enum CRMonthType IFieldObject::GetMonthType ( );
__declspec(implementation_key(320)) void IFieldObject::PutMonthType ( enum CRMonthType pMonthType );
__declspec(implementation_key(321)) enum CRDayType IFieldObject::GetDayType ( );
__declspec(implementation_key(322)) void IFieldObject::PutDayType ( enum CRDayType pDayType );
__declspec(implementation_key(323)) enum CRLeadingDayType IFieldObject::GetLeadingDayType ( );
__declspec(implementation_key(324)) void IFieldObject::PutLeadingDayType ( enum CRLeadingDayType pLeadingDayType );
__declspec(implementation_key(325)) _bstr_t IFieldObject::GetLeadingDaySeparator ( );
__declspec(implementation_key(326)) void IFieldObject::PutLeadingDaySeparator ( _bstr_t ppLeadingDaySeparator );
__declspec(implementation_key(327)) _bstr_t IFieldObject::GetDateFirstSeparator ( );
__declspec(implementation_key(328)) void IFieldObject::PutDateFirstSeparator ( _bstr_t ppDateFirstSeparator );
__declspec(implementation_key(329)) _bstr_t IFieldObject::GetDateSecondSeparator ( );
__declspec(implementation_key(330)) void IFieldObject::PutDateSecondSeparator ( _bstr_t ppDateSecondSeparator );
__declspec(implementation_key(331)) enum CRTimeBase IFieldObject::GetTimeBase ( );
__declspec(implementation_key(332)) void IFieldObject::PutTimeBase ( enum CRTimeBase pTimeBase );
__declspec(implementation_key(333)) enum CRAmPmType IFieldObject::GetAmPmType ( );
__declspec(implementation_key(334)) void IFieldObject::PutAmPmType ( enum CRAmPmType pAmPmType );
__declspec(implementation_key(335)) enum CRHourType IFieldObject::GetHourType ( );
__declspec(implementation_key(336)) void IFieldObject::PutHourType ( enum CRHourType pHourType );
__declspec(implementation_key(337)) enum CRMinuteType IFieldObject::GetMinuteType ( );
__declspec(implementation_key(338)) void IFieldObject::PutMinuteType ( enum CRMinuteType pMinuteType );
__declspec(implementation_key(339)) enum CRSecondType IFieldObject::GetSecondType ( );
__declspec(implementation_key(340)) void IFieldObject::PutSecondType ( enum CRSecondType pSecondType );
__declspec(implementation_key(341)) _bstr_t IFieldObject::GetPmString ( );
__declspec(implementation_key(342)) void IFieldObject::PutPmString ( _bstr_t ppPmString );
__declspec(implementation_key(343)) _bstr_t IFieldObject::GetAmString ( );
__declspec(implementation_key(344)) void IFieldObject::PutAmString ( _bstr_t ppAmString );
__declspec(implementation_key(345)) _bstr_t IFieldObject::GetMinuteSecondSeparator ( );
__declspec(implementation_key(346)) void IFieldObject::PutMinuteSecondSeparator ( _bstr_t ppMinuteSecondSeparator );
__declspec(implementation_key(347)) _bstr_t IFieldObject::GetHourMinuteSeparator ( );
__declspec(implementation_key(348)) void IFieldObject::PutHourMinuteSeparator ( _bstr_t ppHourMinuteSeparator );
__declspec(implementation_key(349)) short IFieldObject::GetMaxNumberOfLines ( );
__declspec(implementation_key(350)) void IFieldObject::PutMaxNumberOfLines ( short pMaxNumberOfLines );
__declspec(implementation_key(351)) _variant_t IFieldObject::GetPreviousValue ( );
__declspec(implementation_key(352)) _variant_t IFieldObject::GetNextValue ( );
__declspec(implementation_key(353)) enum CRLeadingDayPosition IFieldObject::GetLeadingDayPosition ( );
__declspec(implementation_key(354)) void IFieldObject::PutLeadingDayPosition ( enum CRLeadingDayPosition pLeadingDayPosition );
__declspec(implementation_key(355)) enum CRDateEraType IFieldObject::GetDateEraType ( );
__declspec(implementation_key(356)) void IFieldObject::PutDateEraType ( enum CRDateEraType pDateEraType );
__declspec(implementation_key(357)) enum CRDateCalendarType IFieldObject::GetDateCalendarType ( );
__declspec(implementation_key(358)) void IFieldObject::PutDateCalendarType ( enum CRDateCalendarType pDateCalendarType );
__declspec(implementation_key(359)) _bstr_t IFieldObject::GetDatePrefixSeparator ( );
__declspec(implementation_key(360)) void IFieldObject::PutDatePrefixSeparator ( _bstr_t ppDatePrefixSeparator );
__declspec(implementation_key(361)) _bstr_t IFieldObject::GetDateSuffixSeparator ( );
__declspec(implementation_key(362)) void IFieldObject::PutDateSuffixSeparator ( _bstr_t ppDateSuffixSeparator );
__declspec(implementation_key(363)) HRESULT IFieldObject::SetUnboundFieldSource ( _bstr_t pUnboundFieldSource );
__declspec(implementation_key(364)) VARIANT_BOOL IFieldObject::GetDisplayReverseSign ( );
__declspec(implementation_key(365)) void IFieldObject::PutDisplayReverseSign ( VARIANT_BOOL pBool );
__declspec(implementation_key(366)) _bstr_t IFieldObject::GetZeroValueString ( );
__declspec(implementation_key(367)) void IFieldObject::PutZeroValueString ( _bstr_t ppZeroValue );
__declspec(implementation_key(368)) long IFieldObject::GetCharacterSpacing ( );
__declspec(implementation_key(369)) void IFieldObject::PutCharacterSpacing ( long pCharacterSpacing );
__declspec(implementation_key(370)) double IFieldObject::GetLineSpacing ( );
__declspec(implementation_key(371)) enum CRLineSpacingType IFieldObject::GetLineSpacingType ( );
__declspec(implementation_key(372)) HRESULT IFieldObject::SetLineSpacing ( double LineSpacing, enum CRLineSpacingType LineSpacingType );
__declspec(implementation_key(373)) enum CRRotationAngle IFieldObject::GetTextRotationAngle ( );
__declspec(implementation_key(374)) void IFieldObject::PutTextRotationAngle ( enum CRRotationAngle pRotationAngle );
__declspec(implementation_key(375)) long IFieldObject::GetFirstLineIndent ( );
__declspec(implementation_key(376)) void IFieldObject::PutFirstLineIndent ( long pFirstLineIndent );
__declspec(implementation_key(377)) long IFieldObject::GetLeftIndent ( );
__declspec(implementation_key(378)) void IFieldObject::PutLeftIndent ( long pLeftIndent );
__declspec(implementation_key(379)) long IFieldObject::GetRightIndent ( );
__declspec(implementation_key(380)) void IFieldObject::PutRightIndent ( long pRightIndent );
__declspec(implementation_key(381)) enum CRTextFormat IFieldObject::GetTextFormat ( );
__declspec(implementation_key(382)) void IFieldObject::PutTextFormat ( enum CRTextFormat pTextFormat );
__declspec(implementation_key(383)) _bstr_t IFieldObject::GetConditionFormula ( const _variant_t & FormulaType );
__declspec(implementation_key(384)) void IFieldObject::PutConditionFormula ( const _variant_t & FormulaType, _bstr_t pVal );
__declspec(implementation_key(385)) _bstr_t IFieldObject::GetCssClass ( );
__declspec(implementation_key(386)) void IFieldObject::PutCssClass ( _bstr_t ppCssClass );
__declspec(implementation_key(387)) enum CRHyperlinkType IFieldObject::GetHyperlinkType ( );
__declspec(implementation_key(388)) void IFieldObject::PutHyperlinkType ( enum CRHyperlinkType pType );
__declspec(implementation_key(389)) _bstr_t IFieldObject::GetHyperlinkText ( );
__declspec(implementation_key(390)) void IFieldObject::PutHyperlinkText ( _bstr_t pText );
__declspec(implementation_key(391)) _bstr_t ITextObject::GetName ( );
__declspec(implementation_key(392)) void ITextObject::PutName ( _bstr_t ppName );
__declspec(implementation_key(393)) enum CRObjectKind ITextObject::GetKind ( );
__declspec(implementation_key(394)) long ITextObject::GetLeft ( );
__declspec(implementation_key(395)) void ITextObject::PutLeft ( long pLeft );
__declspec(implementation_key(396)) long ITextObject::GetTop ( );
__declspec(implementation_key(397)) void ITextObject::PutTop ( long pTop );
__declspec(implementation_key(398)) long ITextObject::GetWidth ( );
__declspec(implementation_key(399)) void ITextObject::PutWidth ( long pWidth );
__declspec(implementation_key(400)) long ITextObject::GetHeight ( );
__declspec(implementation_key(401)) void ITextObject::PutHeight ( long pHeight );
__declspec(implementation_key(402)) enum CRLineStyle ITextObject::GetLeftLineStyle ( );
__declspec(implementation_key(403)) void ITextObject::PutLeftLineStyle ( enum CRLineStyle pLeftLineStyle );
__declspec(implementation_key(404)) enum CRLineStyle ITextObject::GetRightLineStyle ( );
__declspec(implementation_key(405)) void ITextObject::PutRightLineStyle ( enum CRLineStyle pRightLineStyle );
__declspec(implementation_key(406)) enum CRLineStyle ITextObject::GetTopLineStyle ( );
__declspec(implementation_key(407)) void ITextObject::PutTopLineStyle ( enum CRLineStyle pTopLineStyle );
__declspec(implementation_key(408)) enum CRLineStyle ITextObject::GetBottomLineStyle ( );
__declspec(implementation_key(409)) void ITextObject::PutBottomLineStyle ( enum CRLineStyle pBottomLineStyle );
__declspec(implementation_key(410)) VARIANT_BOOL ITextObject::GetHasDropShadow ( );
__declspec(implementation_key(411)) void ITextObject::PutHasDropShadow ( VARIANT_BOOL pBool );
__declspec(implementation_key(412)) OLE_COLOR ITextObject::GetBackColor ( );
__declspec(implementation_key(413)) void ITextObject::PutBackColor ( OLE_COLOR pBackColor );
__declspec(implementation_key(414)) OLE_COLOR ITextObject::GetBorderColor ( );
__declspec(implementation_key(415)) void ITextObject::PutBorderColor ( OLE_COLOR pBorderColor );
__declspec(implementation_key(416)) ISectionPtr ITextObject::GetParent ( );
__declspec(implementation_key(417)) VARIANT_BOOL ITextObject::GetSuppress ( );
__declspec(implementation_key(418)) void ITextObject::PutSuppress ( VARIANT_BOOL pBool );
__declspec(implementation_key(419)) VARIANT_BOOL ITextObject::GetCloseAtPageBreak ( );
__declspec(implementation_key(420)) void ITextObject::PutCloseAtPageBreak ( VARIANT_BOOL pBool );
__declspec(implementation_key(421)) VARIANT_BOOL ITextObject::GetKeepTogether ( );
__declspec(implementation_key(422)) void ITextObject::PutKeepTogether ( VARIANT_BOOL pBool );
__declspec(implementation_key(423)) OLE_COLOR ITextObject::GetTextColor ( );
__declspec(implementation_key(424)) void ITextObject::PutTextColor ( OLE_COLOR pTextColor );
__declspec(implementation_key(425)) IFontDisp * ITextObject::GetFont ( );
__declspec(implementation_key(426)) void ITextObject::PutRefFont ( IFontDisp * ppFont );
__declspec(implementation_key(427)) _bstr_t ITextObject::GetText ( );
__declspec(implementation_key(428)) enum CRAlignment ITextObject::GetHorAlignment ( );
__declspec(implementation_key(429)) void ITextObject::PutHorAlignment ( enum CRAlignment pHorAlignment );
__declspec(implementation_key(430)) VARIANT_BOOL ITextObject::GetSuppressIfDuplicated ( );
__declspec(implementation_key(431)) void ITextObject::PutSuppressIfDuplicated ( VARIANT_BOOL pBool );
__declspec(implementation_key(432)) short ITextObject::GetMaxNumberOfLines ( );
__declspec(implementation_key(433)) void ITextObject::PutMaxNumberOfLines ( short pMaxNumberOfLines );
__declspec(implementation_key(434)) VARIANT_BOOL ITextObject::GetCanGrow ( );
__declspec(implementation_key(435)) void ITextObject::PutCanGrow ( VARIANT_BOOL pBool );
__declspec(implementation_key(436)) HRESULT ITextObject::SetText ( _bstr_t pText );
__declspec(implementation_key(437)) long ITextObject::GetCharacterSpacing ( );
__declspec(implementation_key(438)) void ITextObject::PutCharacterSpacing ( long pCharacterSpacing );
__declspec(implementation_key(439)) double ITextObject::GetLineSpacing ( );
__declspec(implementation_key(440)) enum CRLineSpacingType ITextObject::GetLineSpacingType ( );
__declspec(implementation_key(441)) HRESULT ITextObject::SetLineSpacing ( double LineSpacing, enum CRLineSpacingType LineSpacingType );
__declspec(implementation_key(442)) enum CRRotationAngle ITextObject::GetTextRotationAngle ( );
__declspec(implementation_key(443)) void ITextObject::PutTextRotationAngle ( enum CRRotationAngle pRotationAngle );
__declspec(implementation_key(444)) long ITextObject::GetFirstLineIndent ( );
__declspec(implementation_key(445)) void ITextObject::PutFirstLineIndent ( long pFirstLineIndent );
__declspec(implementation_key(446)) long ITextObject::GetLeftIndent ( );
__declspec(implementation_key(447)) void ITextObject::PutLeftIndent ( long pLeftIndent );
__declspec(implementation_key(448)) long ITextObject::GetRightIndent ( );
__declspec(implementation_key(449)) void ITextObject::PutRightIndent ( long pRightIndent );
__declspec(implementation_key(450)) _bstr_t ITextObject::GetConditionFormula ( const _variant_t & FormulaType );
__declspec(implementation_key(451)) void ITextObject::PutConditionFormula ( const _variant_t & FormulaType, _bstr_t pVal );
__declspec(implementation_key(452)) IFieldElementsPtr ITextObject::GetFieldElements ( );
__declspec(implementation_key(453)) _bstr_t ITextObject::GetCssClass ( );
__declspec(implementation_key(454)) void ITextObject::PutCssClass ( _bstr_t ppCssClass );
__declspec(implementation_key(455)) enum CRHyperlinkType ITextObject::GetHyperlinkType ( );
__declspec(implementation_key(456)) void ITextObject::PutHyperlinkType ( enum CRHyperlinkType pType );
__declspec(implementation_key(457)) _bstr_t ITextObject::GetHyperlinkText ( );
__declspec(implementation_key(458)) void ITextObject::PutHyperlinkText ( _bstr_t pText );
__declspec(implementation_key(459)) IUnknownPtr IFieldElements::Get_NewEnum ( );
__declspec(implementation_key(460)) IFieldElementPtr IFieldElements::GetItem ( long index );
__declspec(implementation_key(461)) long IFieldElements::GetCount ( );
__declspec(implementation_key(462)) ITextObjectPtr IFieldElements::GetParent ( );
__declspec(implementation_key(463)) HRESULT IFieldElements::Add ( long position, const _variant_t & Field );
__declspec(implementation_key(464)) HRESULT IFieldElements::Delete ( long index );
__declspec(implementation_key(465)) IFontDisp * IFieldElement::GetFont ( );
__declspec(implementation_key(466)) void IFieldElement::PutRefFont ( IFontDisp * ppFont );
__declspec(implementation_key(467)) OLE_COLOR IFieldElement::GetColor ( );
__declspec(implementation_key(468)) void IFieldElement::PutColor ( OLE_COLOR pTextColor );
__declspec(implementation_key(469)) IFieldDefinitionPtr IFieldElement::GetFieldDefinition ( );
__declspec(implementation_key(470)) void IFieldElement::PutFieldDefinition ( struct IFieldDefinition * ppFieldDefinition );
__declspec(implementation_key(471)) ITextObjectPtr IFieldElement::GetParent ( );
__declspec(implementation_key(472)) VARIANT_BOOL IFieldElement::GetSuppressIfDuplicated ( );
__declspec(implementation_key(473)) void IFieldElement::PutSuppressIfDuplicated ( VARIANT_BOOL pBool );
__declspec(implementation_key(474)) VARIANT_BOOL IFieldElement::GetUseSystemDefaults ( );
__declspec(implementation_key(475)) void IFieldElement::PutUseSystemDefaults ( VARIANT_BOOL pBool );
__declspec(implementation_key(476)) VARIANT_BOOL IFieldElement::GetSuppressIfZero ( );
__declspec(implementation_key(477)) void IFieldElement::PutSuppressIfZero ( VARIANT_BOOL pBool );
__declspec(implementation_key(478)) enum CRNegativeType IFieldElement::GetNegativeType ( );
__declspec(implementation_key(479)) void IFieldElement::PutNegativeType ( enum CRNegativeType pNegativeType );
__declspec(implementation_key(480)) VARIANT_BOOL IFieldElement::GetThousandsSeparators ( );
__declspec(implementation_key(481)) void IFieldElement::PutThousandsSeparators ( VARIANT_BOOL pBool );
__declspec(implementation_key(482)) VARIANT_BOOL IFieldElement::GetUseLeadingZero ( );
__declspec(implementation_key(483)) void IFieldElement::PutUseLeadingZero ( VARIANT_BOOL pBool );
__declspec(implementation_key(484)) short IFieldElement::GetDecimalPlaces ( );
__declspec(implementation_key(485)) void IFieldElement::PutDecimalPlaces ( short pDecimalPlaces );
__declspec(implementation_key(486)) enum CRRoundingType IFieldElement::GetRoundingType ( );
__declspec(implementation_key(487)) void IFieldElement::PutRoundingType ( enum CRRoundingType pRoundingType );
__declspec(implementation_key(488)) _bstr_t IFieldElement::GetThousandSymbol ( );
__declspec(implementation_key(489)) void IFieldElement::PutThousandSymbol ( _bstr_t ppThousandSymbol );
__declspec(implementation_key(490)) _bstr_t IFieldElement::GetDecimalSymbol ( );
__declspec(implementation_key(491)) void IFieldElement::PutDecimalSymbol ( _bstr_t ppDecimalSymbol );
__declspec(implementation_key(492)) enum CRCurrencySymbolType IFieldElement::GetCurrencySymbolType ( );
__declspec(implementation_key(493)) void IFieldElement::PutCurrencySymbolType ( enum CRCurrencySymbolType pCurrencySymbolType );
__declspec(implementation_key(494)) VARIANT_BOOL IFieldElement::GetUseOneSymbolPerPage ( );
__declspec(implementation_key(495)) void IFieldElement::PutUseOneSymbolPerPage ( VARIANT_BOOL pBool );
__declspec(implementation_key(496)) enum CRCurrencyPositionType IFieldElement::GetCurrencyPositionType ( );
__declspec(implementation_key(497)) void IFieldElement::PutCurrencyPositionType ( enum CRCurrencyPositionType pCurrencyPositionType );
__declspec(implementation_key(498)) _bstr_t IFieldElement::GetCurrencySymbol ( );
__declspec(implementation_key(499)) void IFieldElement::PutCurrencySymbol ( _bstr_t ppCurrencySymbol );
__declspec(implementation_key(500)) enum CRBooleanOutputType IFieldElement::GetBooleanOutputType ( );
__declspec(implementation_key(501)) void IFieldElement::PutBooleanOutputType ( enum CRBooleanOutputType pBooleanOutputType );
__declspec(implementation_key(502)) enum CRDateWindowsDefaultType IFieldElement::GetDateWindowsDefaultType ( );
__declspec(implementation_key(503)) void IFieldElement::PutDateWindowsDefaultType ( enum CRDateWindowsDefaultType pDateWindowsDefaultType );
__declspec(implementation_key(504)) enum CRDateOrder IFieldElement::GetDateOrder ( );
__declspec(implementation_key(505)) void IFieldElement::PutDateOrder ( enum CRDateOrder pDateOrder );
__declspec(implementation_key(506)) enum CRYearType IFieldElement::GetYearType ( );
__declspec(implementation_key(507)) void IFieldElement::PutYearType ( enum CRYearType pYearType );
__declspec(implementation_key(508)) enum CRMonthType IFieldElement::GetMonthType ( );
__declspec(implementation_key(509)) void IFieldElement::PutMonthType ( enum CRMonthType pMonthType );
__declspec(implementation_key(510)) enum CRDayType IFieldElement::GetDayType ( );
__declspec(implementation_key(511)) void IFieldElement::PutDayType ( enum CRDayType pDayType );
__declspec(implementation_key(512)) enum CRLeadingDayType IFieldElement::GetLeadingDayType ( );
__declspec(implementation_key(513)) void IFieldElement::PutLeadingDayType ( enum CRLeadingDayType pLeadingDayType );
__declspec(implementation_key(514)) _bstr_t IFieldElement::GetLeadingDaySeparator ( );
__declspec(implementation_key(515)) void IFieldElement::PutLeadingDaySeparator ( _bstr_t ppLeadingDaySeparator );
__declspec(implementation_key(516)) _bstr_t IFieldElement::GetDateFirstSeparator ( );
__declspec(implementation_key(517)) void IFieldElement::PutDateFirstSeparator ( _bstr_t ppDateFirstSeparator );
__declspec(implementation_key(518)) _bstr_t IFieldElement::GetDateSecondSeparator ( );
__declspec(implementation_key(519)) void IFieldElement::PutDateSecondSeparator ( _bstr_t ppDateSecondSeparator );
__declspec(implementation_key(520)) enum CRTimeBase IFieldElement::GetTimeBase ( );
__declspec(implementation_key(521)) void IFieldElement::PutTimeBase ( enum CRTimeBase pTimeBase );
__declspec(implementation_key(522)) enum CRAmPmType IFieldElement::GetAmPmType ( );
__declspec(implementation_key(523)) void IFieldElement::PutAmPmType ( enum CRAmPmType pAmPmType );
__declspec(implementation_key(524)) enum CRHourType IFieldElement::GetHourType ( );
__declspec(implementation_key(525)) void IFieldElement::PutHourType ( enum CRHourType pHourType );
__declspec(implementation_key(526)) enum CRMinuteType IFieldElement::GetMinuteType ( );
__declspec(implementation_key(527)) void IFieldElement::PutMinuteType ( enum CRMinuteType pMinuteType );
__declspec(implementation_key(528)) enum CRSecondType IFieldElement::GetSecondType ( );
__declspec(implementation_key(529)) void IFieldElement::PutSecondType ( enum CRSecondType pSecondType );
__declspec(implementation_key(530)) _bstr_t IFieldElement::GetPmString ( );
__declspec(implementation_key(531)) void IFieldElement::PutPmString ( _bstr_t ppPmString );
__declspec(implementation_key(532)) _bstr_t IFieldElement::GetAmString ( );
__declspec(implementation_key(533)) void IFieldElement::PutAmString ( _bstr_t ppAmString );
__declspec(implementation_key(534)) _bstr_t IFieldElement::GetMinuteSecondSeparator ( );
__declspec(implementation_key(535)) void IFieldElement::PutMinuteSecondSeparator ( _bstr_t ppMinuteSecondSeparator );
__declspec(implementation_key(536)) _bstr_t IFieldElement::GetHourMinuteSeparator ( );
__declspec(implementation_key(537)) void IFieldElement::PutHourMinuteSeparator ( _bstr_t ppHourMinuteSeparator );
__declspec(implementation_key(538)) short IFieldElement::GetMaxNumberOfLines ( );
__declspec(implementation_key(539)) void IFieldElement::PutMaxNumberOfLines ( short pMaxNumberOfLines );
__declspec(implementation_key(540)) enum CRLeadingDayPosition IFieldElement::GetLeadingDayPosition ( );
__declspec(implementation_key(541)) void IFieldElement::PutLeadingDayPosition ( enum CRLeadingDayPosition pLeadingDayPosition );
__declspec(implementation_key(542)) enum CRDateEraType IFieldElement::GetDateEraType ( );
__declspec(implementation_key(543)) void IFieldElement::PutDateEraType ( enum CRDateEraType pDateEraType );
__declspec(implementation_key(544)) enum CRDateCalendarType IFieldElement::GetDateCalendarType ( );
__declspec(implementation_key(545)) void IFieldElement::PutDateCalendarType ( enum CRDateCalendarType pDateCalendarType );
__declspec(implementation_key(546)) _bstr_t IFieldElement::GetDatePrefixSeparator ( );
__declspec(implementation_key(547)) void IFieldElement::PutDatePrefixSeparator ( _bstr_t ppDatePrefixSeparator );
__declspec(implementation_key(548)) _bstr_t IFieldElement::GetDateSuffixSeparator ( );
__declspec(implementation_key(549)) void IFieldElement::PutDateSuffixSeparator ( _bstr_t ppDateSuffixSeparator );
__declspec(implementation_key(550)) VARIANT_BOOL IFieldElement::GetDisplayReverseSign ( );
__declspec(implementation_key(551)) void IFieldElement::PutDisplayReverseSign ( VARIANT_BOOL pBool );
__declspec(implementation_key(552)) _bstr_t IFieldElement::GetZeroValueString ( );
__declspec(implementation_key(553)) void IFieldElement::PutZeroValueString ( _bstr_t ppZeroValue );
__declspec(implementation_key(554)) long IFieldElement::GetCharacterSpacing ( );
__declspec(implementation_key(555)) void IFieldElement::PutCharacterSpacing ( long pCharacterSpacing );
__declspec(implementation_key(556)) double IFieldElement::GetLineSpacing ( );
__declspec(implementation_key(557)) enum CRLineSpacingType IFieldElement::GetLineSpacingType ( );
__declspec(implementation_key(558)) HRESULT IFieldElement::SetLineSpacing ( double LineSpacing, enum CRLineSpacingType LineSpacingType );
__declspec(implementation_key(559)) long IFieldElement::GetFirstLineIndent ( );
__declspec(implementation_key(560)) void IFieldElement::PutFirstLineIndent ( long pFirstLineIndent );
__declspec(implementation_key(561)) long IFieldElement::GetLeftIndent ( );
__declspec(implementation_key(562)) void IFieldElement::PutLeftIndent ( long pLeftIndent );
__declspec(implementation_key(563)) long IFieldElement::GetRightIndent ( );
__declspec(implementation_key(564)) void IFieldElement::PutRightIndent ( long pRightIndent );
__declspec(implementation_key(565)) enum CRTextFormat IFieldElement::GetTextFormat ( );
__declspec(implementation_key(566)) void IFieldElement::PutTextFormat ( enum CRTextFormat pTextFormat );
__declspec(implementation_key(567)) _bstr_t IFieldElement::GetConditionFormula ( const _variant_t & FormulaType );
__declspec(implementation_key(568)) void IFieldElement::PutConditionFormula ( const _variant_t & FormulaType, _bstr_t pVal );
__declspec(implementation_key(569)) long IFieldElement::GetBeginPosition ( );
__declspec(implementation_key(570)) long IFieldElement::GetEndPosition ( );
__declspec(implementation_key(571)) enum CRFieldKind IFieldDefinition::GetKind ( );
__declspec(implementation_key(572)) CRFieldValueType IFieldDefinition::GetValueType ( );
__declspec(implementation_key(573)) short IFieldDefinition::GetNumberOfBytes ( );
__declspec(implementation_key(574)) _bstr_t IFieldDefinition::GetName ( );
__declspec(implementation_key(575)) _variant_t IFieldDefinition::GetValue ( );
__declspec(implementation_key(576)) IReportPtr IFieldDefinition::GetParent ( );
__declspec(implementation_key(577)) _variant_t IFieldDefinition::GetPreviousValue ( );
__declspec(implementation_key(578)) _variant_t IFieldDefinition::GetNextValue ( );
__declspec(implementation_key(579)) long IFieldDefinition::GetUseCount ( );
__declspec(implementation_key(580)) _bstr_t IBlobFieldObject::GetName ( );
__declspec(implementation_key(581)) void IBlobFieldObject::PutName ( _bstr_t ppName );
__declspec(implementation_key(582)) enum CRObjectKind IBlobFieldObject::GetKind ( );
__declspec(implementation_key(583)) long IBlobFieldObject::GetLeft ( );
__declspec(implementation_key(584)) void IBlobFieldObject::PutLeft ( long pLeft );
__declspec(implementation_key(585)) long IBlobFieldObject::GetTop ( );
__declspec(implementation_key(586)) void IBlobFieldObject::PutTop ( long pTop );
__declspec(implementation_key(587)) long IBlobFieldObject::GetWidth ( );
__declspec(implementation_key(588)) void IBlobFieldObject::PutWidth ( long pWidth );
__declspec(implementation_key(589)) long IBlobFieldObject::GetHeight ( );
__declspec(implementation_key(590)) void IBlobFieldObject::PutHeight ( long pHeight );
__declspec(implementation_key(591)) enum CRLineStyle IBlobFieldObject::GetLeftLineStyle ( );
__declspec(implementation_key(592)) void IBlobFieldObject::PutLeftLineStyle ( enum CRLineStyle pLeftLineStyle );
__declspec(implementation_key(593)) enum CRLineStyle IBlobFieldObject::GetRightLineStyle ( );
__declspec(implementation_key(594)) void IBlobFieldObject::PutRightLineStyle ( enum CRLineStyle pRightLineStyle );
__declspec(implementation_key(595)) enum CRLineStyle IBlobFieldObject::GetTopLineStyle ( );
__declspec(implementation_key(596)) void IBlobFieldObject::PutTopLineStyle ( enum CRLineStyle pTopLineStyle );
__declspec(implementation_key(597)) enum CRLineStyle IBlobFieldObject::GetBottomLineStyle ( );
__declspec(implementation_key(598)) void IBlobFieldObject::PutBottomLineStyle ( enum CRLineStyle pBottomLineStyle );
__declspec(implementation_key(599)) VARIANT_BOOL IBlobFieldObject::GetHasDropShadow ( );
__declspec(implementation_key(600)) void IBlobFieldObject::PutHasDropShadow ( VARIANT_BOOL pBool );
__declspec(implementation_key(601)) OLE_COLOR IBlobFieldObject::GetBackColor ( );
__declspec(implementation_key(602)) void IBlobFieldObject::PutBackColor ( OLE_COLOR pBackColor );
__declspec(implementation_key(603)) OLE_COLOR IBlobFieldObject::GetBorderColor ( );
__declspec(implementation_key(604)) void IBlobFieldObject::PutBorderColor ( OLE_COLOR pBorderColor );
__declspec(implementation_key(605)) ISectionPtr IBlobFieldObject::GetParent ( );
__declspec(implementation_key(606)) VARIANT_BOOL IBlobFieldObject::GetSuppress ( );
__declspec(implementation_key(607)) void IBlobFieldObject::PutSuppress ( VARIANT_BOOL pBool );
__declspec(implementation_key(608)) VARIANT_BOOL IBlobFieldObject::GetCloseAtPageBreak ( );
__declspec(implementation_key(609)) void IBlobFieldObject::PutCloseAtPageBreak ( VARIANT_BOOL pBool );
__declspec(implementation_key(610)) VARIANT_BOOL IBlobFieldObject::GetKeepTogether ( );
__declspec(implementation_key(611)) void IBlobFieldObject::PutKeepTogether ( VARIANT_BOOL pBool );
__declspec(implementation_key(612)) long IBlobFieldObject::GetLeftCropping ( );
__declspec(implementation_key(613)) void IBlobFieldObject::PutLeftCropping ( long pLeftCropping );
__declspec(implementation_key(614)) long IBlobFieldObject::GetRightCropping ( );
__declspec(implementation_key(615)) void IBlobFieldObject::PutRightCropping ( long pRightCropping );
__declspec(implementation_key(616)) long IBlobFieldObject::GetTopCropping ( );
__declspec(implementation_key(617)) void IBlobFieldObject::PutTopCropping ( long pTopCropping );
__declspec(implementation_key(618)) long IBlobFieldObject::GetBottomCropping ( );
__declspec(implementation_key(619)) void IBlobFieldObject::PutBottomCropping ( long pBottomCropping );
__declspec(implementation_key(620)) double IBlobFieldObject::GetXScaling ( );
__declspec(implementation_key(621)) void IBlobFieldObject::PutXScaling ( double pXScaling );
__declspec(implementation_key(622)) double IBlobFieldObject::GetYScaling ( );
__declspec(implementation_key(623)) void IBlobFieldObject::PutYScaling ( double pYScaling );
__declspec(implementation_key(624)) IDatabaseFieldDefinitionPtr IBlobFieldObject::GetField ( );
__declspec(implementation_key(625)) _bstr_t IBlobFieldObject::GetConditionFormula ( const _variant_t & FormulaType );
__declspec(implementation_key(626)) void IBlobFieldObject::PutConditionFormula ( const _variant_t & FormulaType, _bstr_t pVal );
__declspec(implementation_key(627)) _bstr_t IBlobFieldObject::GetCssClass ( );
__declspec(implementation_key(628)) void IBlobFieldObject::PutCssClass ( _bstr_t ppCssClass );
__declspec(implementation_key(629)) enum CRHyperlinkType IBlobFieldObject::GetHyperlinkType ( );
__declspec(implementation_key(630)) void IBlobFieldObject::PutHyperlinkType ( enum CRHyperlinkType pType );
__declspec(implementation_key(631)) _bstr_t IBlobFieldObject::GetHyperlinkText ( );
__declspec(implementation_key(632)) void IBlobFieldObject::PutHyperlinkText ( _bstr_t pText );
__declspec(implementation_key(633)) enum CRFieldKind IDatabaseFieldDefinition::GetKind ( );
__declspec(implementation_key(634)) CRFieldValueType IDatabaseFieldDefinition::GetValueType ( );
__declspec(implementation_key(635)) short IDatabaseFieldDefinition::GetNumberOfBytes ( );
__declspec(implementation_key(636)) _bstr_t IDatabaseFieldDefinition::GetName ( );
__declspec(implementation_key(637)) _variant_t IDatabaseFieldDefinition::GetValue ( );
__declspec(implementation_key(638)) _bstr_t IDatabaseFieldDefinition::GetDatabaseFieldName ( );
__declspec(implementation_key(639)) IReportPtr IDatabaseFieldDefinition::GetParent ( );
__declspec(implementation_key(640)) _variant_t IDatabaseFieldDefinition::GetPreviousValue ( );
__declspec(implementation_key(641)) _variant_t IDatabaseFieldDefinition::GetNextValue ( );
__declspec(implementation_key(642)) _bstr_t IDatabaseFieldDefinition::GetTableAliasName ( );
__declspec(implementation_key(643)) _bstr_t IDatabaseFieldDefinition::GetDatabaseFieldDisplayName ( );
__declspec(implementation_key(644)) _bstr_t ISubreportObject::GetName ( );
__declspec(implementation_key(645)) void ISubreportObject::PutName ( _bstr_t ppName );
__declspec(implementation_key(646)) enum CRObjectKind ISubreportObject::GetKind ( );
__declspec(implementation_key(647)) long ISubreportObject::GetLeft ( );
__declspec(implementation_key(648)) void ISubreportObject::PutLeft ( long pLeft );
__declspec(implementation_key(649)) long ISubreportObject::GetTop ( );
__declspec(implementation_key(650)) void ISubreportObject::PutTop ( long pTop );
__declspec(implementation_key(651)) long ISubreportObject::GetWidth ( );
__declspec(implementation_key(652)) void ISubreportObject::PutWidth ( long pWidth );
__declspec(implementation_key(653)) long ISubreportObject::GetHeight ( );
__declspec(implementation_key(654)) void ISubreportObject::PutHeight ( long pHeight );
__declspec(implementation_key(655)) enum CRLineStyle ISubreportObject::GetLeftLineStyle ( );
__declspec(implementation_key(656)) void ISubreportObject::PutLeftLineStyle ( enum CRLineStyle pLeftLineStyle );
__declspec(implementation_key(657)) enum CRLineStyle ISubreportObject::GetRightLineStyle ( );
__declspec(implementation_key(658)) void ISubreportObject::PutRightLineStyle ( enum CRLineStyle pRightLineStyle );
__declspec(implementation_key(659)) enum CRLineStyle ISubreportObject::GetTopLineStyle ( );
__declspec(implementation_key(660)) void ISubreportObject::PutTopLineStyle ( enum CRLineStyle pTopLineStyle );
__declspec(implementation_key(661)) enum CRLineStyle ISubreportObject::GetBottomLineStyle ( );
__declspec(implementation_key(662)) void ISubreportObject::PutBottomLineStyle ( enum CRLineStyle pBottomLineStyle );
__declspec(implementation_key(663)) VARIANT_BOOL ISubreportObject::GetHasDropShadow ( );
__declspec(implementation_key(664)) void ISubreportObject::PutHasDropShadow ( VARIANT_BOOL pBool );
__declspec(implementation_key(665)) OLE_COLOR ISubreportObject::GetBackColor ( );
__declspec(implementation_key(666)) void ISubreportObject::PutBackColor ( OLE_COLOR pBackColor );
__declspec(implementation_key(667)) OLE_COLOR ISubreportObject::GetBorderColor ( );
__declspec(implementation_key(668)) void ISubreportObject::PutBorderColor ( OLE_COLOR pBorderColor );
__declspec(implementation_key(669)) ISectionPtr ISubreportObject::GetParent ( );
__declspec(implementation_key(670)) VARIANT_BOOL ISubreportObject::GetSuppress ( );
__declspec(implementation_key(671)) void ISubreportObject::PutSuppress ( VARIANT_BOOL pBool );
__declspec(implementation_key(672)) VARIANT_BOOL ISubreportObject::GetCloseAtPageBreak ( );
__declspec(implementation_key(673)) void ISubreportObject::PutCloseAtPageBreak ( VARIANT_BOOL pBool );
__declspec(implementation_key(674)) VARIANT_BOOL ISubreportObject::GetKeepTogether ( );
__declspec(implementation_key(675)) void ISubreportObject::PutKeepTogether ( VARIANT_BOOL pBool );
__declspec(implementation_key(676)) _bstr_t ISubreportObject::GetSubreportName ( );
__declspec(implementation_key(677)) void ISubreportObject::PutSubreportName ( _bstr_t ppSubreportName );
__declspec(implementation_key(678)) IReportPtr ISubreportObject::OpenSubreport ( );
__declspec(implementation_key(679)) VARIANT_BOOL ISubreportObject::GetCanGrow ( );
__declspec(implementation_key(680)) void ISubreportObject::PutCanGrow ( VARIANT_BOOL pBool );
__declspec(implementation_key(681)) VARIANT_BOOL ISubreportObject::GetEnableOnDemand ( );
__declspec(implementation_key(682)) ISubreportLinksPtr ISubreportObject::GetLinks ( );
__declspec(implementation_key(683)) HRESULT ISubreportObject::ReimportSubreport ( VARIANT_BOOL * pReimported );
__declspec(implementation_key(684)) _bstr_t ISubreportObject::GetConditionFormula ( const _variant_t & FormulaType );
__declspec(implementation_key(685)) void ISubreportObject::PutConditionFormula ( const _variant_t & FormulaType, _bstr_t pVal );
__declspec(implementation_key(686)) _bstr_t ISubreportObject::GetCssClass ( );
__declspec(implementation_key(687)) void ISubreportObject::PutCssClass ( _bstr_t ppCssClass );
__declspec(implementation_key(688)) IUnknownPtr ISubreportLinks::Get_NewEnum ( );
__declspec(implementation_key(689)) ISubreportLinkPtr ISubreportLinks::GetItem ( long index );
__declspec(implementation_key(690)) long ISubreportLinks::GetCount ( );
__declspec(implementation_key(691)) ISubreportObjectPtr ISubreportLinks::GetParent ( );
__declspec(implementation_key(692)) ISubreportLinkPtr ISubreportLinks::Add ( const _variant_t & MainReportField, const _variant_t & SubreportField );
__declspec(implementation_key(693)) HRESULT ISubreportLinks::Delete ( long index );
__declspec(implementation_key(694)) ISubreportObjectPtr ISubreportLink::GetParent ( );
__declspec(implementation_key(695)) IFieldDefinitionPtr ISubreportLink::GetMainReportField ( );
__declspec(implementation_key(696)) IFieldDefinitionPtr ISubreportLink::GetSubreportField ( );
__declspec(implementation_key(697)) _bstr_t ILineObject::GetName ( );
__declspec(implementation_key(698)) void ILineObject::PutName ( _bstr_t ppName );
__declspec(implementation_key(699)) enum CRObjectKind ILineObject::GetKind ( );
__declspec(implementation_key(700)) long ILineObject::GetLeft ( );
__declspec(implementation_key(701)) void ILineObject::PutLeft ( long pLeft );
__declspec(implementation_key(702)) long ILineObject::GetTop ( );
__declspec(implementation_key(703)) void ILineObject::PutTop ( long pTop );
__declspec(implementation_key(704)) ISectionPtr ILineObject::GetParent ( );
__declspec(implementation_key(705)) VARIANT_BOOL ILineObject::GetSuppress ( );
__declspec(implementation_key(706)) void ILineObject::PutSuppress ( VARIANT_BOOL pBool );
__declspec(implementation_key(707)) OLE_COLOR ILineObject::GetLineColor ( );
__declspec(implementation_key(708)) void ILineObject::PutLineColor ( OLE_COLOR pLineColor );
__declspec(implementation_key(709)) long ILineObject::GetRight ( );
__declspec(implementation_key(710)) void ILineObject::PutRight ( long pRight );
__declspec(implementation_key(711)) long ILineObject::GetBottom ( );
__declspec(implementation_key(712)) void ILineObject::PutBottom ( long pBottom );
__declspec(implementation_key(713)) long ILineObject::GetLineThickness ( );
__declspec(implementation_key(714)) void ILineObject::PutLineThickness ( long pLineThickness );
__declspec(implementation_key(715)) VARIANT_BOOL ILineObject::GetExtendToBottomOfSection ( );
__declspec(implementation_key(716)) void ILineObject::PutExtendToBottomOfSection ( VARIANT_BOOL pBool );
__declspec(implementation_key(717)) enum CRLineStyle ILineObject::GetLineStyle ( );
__declspec(implementation_key(718)) void ILineObject::PutLineStyle ( enum CRLineStyle pLineStyle );
__declspec(implementation_key(719)) ISectionPtr ILineObject::GetEndSection ( );
__declspec(implementation_key(720)) _bstr_t ILineObject::GetConditionFormula ( const _variant_t & FormulaType );
__declspec(implementation_key(721)) void ILineObject::PutConditionFormula ( const _variant_t & FormulaType, _bstr_t pVal );
__declspec(implementation_key(722)) _bstr_t ILineObject::GetCssClass ( );
__declspec(implementation_key(723)) void ILineObject::PutCssClass ( _bstr_t ppCssClass );
__declspec(implementation_key(724)) _bstr_t IBoxObject::GetName ( );
__declspec(implementation_key(725)) void IBoxObject::PutName ( _bstr_t ppName );
__declspec(implementation_key(726)) enum CRObjectKind IBoxObject::GetKind ( );
__declspec(implementation_key(727)) long IBoxObject::GetLeft ( );
__declspec(implementation_key(728)) void IBoxObject::PutLeft ( long pLeft );
__declspec(implementation_key(729)) long IBoxObject::GetTop ( );
__declspec(implementation_key(730)) void IBoxObject::PutTop ( long pTop );
__declspec(implementation_key(731)) long IBoxObject::GetRight ( );
__declspec(implementation_key(732)) void IBoxObject::PutRight ( long pRight );
__declspec(implementation_key(733)) long IBoxObject::GetBottom ( );
__declspec(implementation_key(734)) void IBoxObject::PutBottom ( long pBottom );
__declspec(implementation_key(735)) enum CRLineStyle IBoxObject::GetLineStyle ( );
__declspec(implementation_key(736)) void IBoxObject::PutLineStyle ( enum CRLineStyle pLineStyle );
__declspec(implementation_key(737)) VARIANT_BOOL IBoxObject::GetHasDropShadow ( );
__declspec(implementation_key(738)) void IBoxObject::PutHasDropShadow ( VARIANT_BOOL pBool );
__declspec(implementation_key(739)) OLE_COLOR IBoxObject::GetLineColor ( );
__declspec(implementation_key(740)) void IBoxObject::PutLineColor ( OLE_COLOR pLineColor );
__declspec(implementation_key(741)) OLE_COLOR IBoxObject::GetFillColor ( );
__declspec(implementation_key(742)) void IBoxObject::PutFillColor ( OLE_COLOR pFillColor );
__declspec(implementation_key(743)) ISectionPtr IBoxObject::GetParent ( );
__declspec(implementation_key(744)) VARIANT_BOOL IBoxObject::GetSuppress ( );
__declspec(implementation_key(745)) void IBoxObject::PutSuppress ( VARIANT_BOOL pBool );
__declspec(implementation_key(746)) VARIANT_BOOL IBoxObject::GetCloseAtPageBreak ( );
__declspec(implementation_key(747)) void IBoxObject::PutCloseAtPageBreak ( VARIANT_BOOL pBool );
__declspec(implementation_key(748)) ISectionPtr IBoxObject::GetBottomRightSection ( );
__declspec(implementation_key(749)) long IBoxObject::GetLineThickness ( );
__declspec(implementation_key(750)) void IBoxObject::PutLineThickness ( long pLineThickness );
__declspec(implementation_key(751)) VARIANT_BOOL IBoxObject::GetExtendToBottomOfSection ( );
__declspec(implementation_key(752)) void IBoxObject::PutExtendToBottomOfSection ( VARIANT_BOOL pBool );
__declspec(implementation_key(753)) long IBoxObject::GetCornerEllipseHeight ( );
__declspec(implementation_key(754)) void IBoxObject::PutCornerEllipseHeight ( long pCornerEllipseHeight );
__declspec(implementation_key(755)) long IBoxObject::GetCornerEllipseWidth ( );
__declspec(implementation_key(756)) void IBoxObject::PutCornerEllipseWidth ( long pCornerEllipseWidth );
__declspec(implementation_key(757)) _bstr_t IBoxObject::GetConditionFormula ( const _variant_t & FormulaType );
__declspec(implementation_key(758)) void IBoxObject::PutConditionFormula ( const _variant_t & FormulaType, _bstr_t pVal );
__declspec(implementation_key(759)) _bstr_t IBoxObject::GetCssClass ( );
__declspec(implementation_key(760)) void IBoxObject::PutCssClass ( _bstr_t ppCssClass );
__declspec(implementation_key(761)) _bstr_t ICrossTabObject::GetName ( );
__declspec(implementation_key(762)) void ICrossTabObject::PutName ( _bstr_t ppName );
__declspec(implementation_key(763)) enum CRObjectKind ICrossTabObject::GetKind ( );
__declspec(implementation_key(764)) long ICrossTabObject::GetLeft ( );
__declspec(implementation_key(765)) void ICrossTabObject::PutLeft ( long pLeft );
__declspec(implementation_key(766)) long ICrossTabObject::GetTop ( );
__declspec(implementation_key(767)) void ICrossTabObject::PutTop ( long pTop );
__declspec(implementation_key(768)) long ICrossTabObject::GetWidth ( );
__declspec(implementation_key(769)) long ICrossTabObject::GetHeight ( );
__declspec(implementation_key(770)) enum CRLineStyle ICrossTabObject::GetLeftLineStyle ( );
__declspec(implementation_key(771)) void ICrossTabObject::PutLeftLineStyle ( enum CRLineStyle pLeftLineStyle );
__declspec(implementation_key(772)) enum CRLineStyle ICrossTabObject::GetRightLineStyle ( );
__declspec(implementation_key(773)) void ICrossTabObject::PutRightLineStyle ( enum CRLineStyle pRightLineStyle );
__declspec(implementation_key(774)) enum CRLineStyle ICrossTabObject::GetTopLineStyle ( );
__declspec(implementation_key(775)) void ICrossTabObject::PutTopLineStyle ( enum CRLineStyle pTopLineStyle );
__declspec(implementation_key(776)) enum CRLineStyle ICrossTabObject::GetBottomLineStyle ( );
__declspec(implementation_key(777)) void ICrossTabObject::PutBottomLineStyle ( enum CRLineStyle pBottomLineStyle );
__declspec(implementation_key(778)) VARIANT_BOOL ICrossTabObject::GetHasDropShadow ( );
__declspec(implementation_key(779)) void ICrossTabObject::PutHasDropShadow ( VARIANT_BOOL pBool );
__declspec(implementation_key(780)) OLE_COLOR ICrossTabObject::GetBackColor ( );
__declspec(implementation_key(781)) void ICrossTabObject::PutBackColor ( OLE_COLOR pBackColor );
__declspec(implementation_key(782)) OLE_COLOR ICrossTabObject::GetBorderColor ( );
__declspec(implementation_key(783)) void ICrossTabObject::PutBorderColor ( OLE_COLOR pBorderColor );
__declspec(implementation_key(784)) ISectionPtr ICrossTabObject::GetParent ( );
__declspec(implementation_key(785)) VARIANT_BOOL ICrossTabObject::GetSuppress ( );
__declspec(implementation_key(786)) void ICrossTabObject::PutSuppress ( VARIANT_BOOL pBool );
__declspec(implementation_key(787)) VARIANT_BOOL ICrossTabObject::GetCloseAtPageBreak ( );
__declspec(implementation_key(788)) void ICrossTabObject::PutCloseAtPageBreak ( VARIANT_BOOL pBool );
__declspec(implementation_key(789)) VARIANT_BOOL ICrossTabObject::GetKeepTogether ( );
__declspec(implementation_key(790)) void ICrossTabObject::PutKeepTogether ( VARIANT_BOOL pBool );
__declspec(implementation_key(791)) IObjectSummaryFieldDefinitionsPtr ICrossTabObject::GetSummaryFields ( );
__declspec(implementation_key(792)) ICrossTabGroupsPtr ICrossTabObject::GetRowGroups ( );
__declspec(implementation_key(793)) ICrossTabGroupsPtr ICrossTabObject::GetColumnGroups ( );
__declspec(implementation_key(794)) VARIANT_BOOL ICrossTabObject::GetEnableShowGrid ( );
__declspec(implementation_key(795)) void ICrossTabObject::PutEnableShowGrid ( VARIANT_BOOL pBool );
__declspec(implementation_key(796)) VARIANT_BOOL ICrossTabObject::GetEnableShowCellMargins ( );
__declspec(implementation_key(797)) void ICrossTabObject::PutEnableShowCellMargins ( VARIANT_BOOL pBool );
__declspec(implementation_key(798)) VARIANT_BOOL ICrossTabObject::GetEnableSuppressEmptyRows ( );
__declspec(implementation_key(799)) void ICrossTabObject::PutEnableSuppressEmptyRows ( VARIANT_BOOL pBool );
__declspec(implementation_key(800)) VARIANT_BOOL ICrossTabObject::GetEnableSuppressEmptyColumns ( );
__declspec(implementation_key(801)) void ICrossTabObject::PutEnableSuppressEmptyColumns ( VARIANT_BOOL pBool );
__declspec(implementation_key(802)) VARIANT_BOOL ICrossTabObject::GetEnableKeepColumnsTogether ( );
__declspec(implementation_key(803)) void ICrossTabObject::PutEnableKeepColumnsTogether ( VARIANT_BOOL pBool );
__declspec(implementation_key(804)) VARIANT_BOOL ICrossTabObject::GetEnableSuppressRowGrandTotals ( );
__declspec(implementation_key(805)) void ICrossTabObject::PutEnableSuppressRowGrandTotals ( VARIANT_BOOL pBool );
__declspec(implementation_key(806)) VARIANT_BOOL ICrossTabObject::GetEnableSuppressColumnGrandTotals ( );
__declspec(implementation_key(807)) void ICrossTabObject::PutEnableSuppressColumnGrandTotals ( VARIANT_BOOL pBool );
__declspec(implementation_key(808)) OLE_COLOR ICrossTabObject::GetRowGrandTotalColor ( );
__declspec(implementation_key(809)) void ICrossTabObject::PutRowGrandTotalColor ( OLE_COLOR pColor );
__declspec(implementation_key(810)) OLE_COLOR ICrossTabObject::GetColumnGrandTotalColor ( );
__declspec(implementation_key(811)) void ICrossTabObject::PutColumnGrandTotalColor ( OLE_COLOR pColor );
__declspec(implementation_key(812)) VARIANT_BOOL ICrossTabObject::GetEnableRepeatRowLabels ( );
__declspec(implementation_key(813)) void ICrossTabObject::PutEnableRepeatRowLabels ( VARIANT_BOOL pBool );
__declspec(implementation_key(814)) _bstr_t ICrossTabObject::GetConditionFormula ( const _variant_t & FormulaType );
__declspec(implementation_key(815)) void ICrossTabObject::PutConditionFormula ( const _variant_t & FormulaType, _bstr_t pVal );
__declspec(implementation_key(816)) _bstr_t ICrossTabObject::GetCssClass ( );
__declspec(implementation_key(817)) void ICrossTabObject::PutCssClass ( _bstr_t ppCssClass );
__declspec(implementation_key(818)) enum CRHyperlinkType ICrossTabObject::GetHyperlinkType ( );
__declspec(implementation_key(819)) void ICrossTabObject::PutHyperlinkType ( enum CRHyperlinkType pType );
__declspec(implementation_key(820)) _bstr_t ICrossTabObject::GetHyperlinkText ( );
__declspec(implementation_key(821)) void ICrossTabObject::PutHyperlinkText ( _bstr_t pText );
__declspec(implementation_key(822)) IUnknownPtr IObjectSummaryFieldDefinitions::Get_NewEnum ( );
__declspec(implementation_key(823)) ISummaryFieldDefinitionPtr IObjectSummaryFieldDefinitions::GetItem ( long index );
__declspec(implementation_key(824)) long IObjectSummaryFieldDefinitions::GetCount ( );
__declspec(implementation_key(825)) IReportObjectPtr IObjectSummaryFieldDefinitions::GetParent ( );
__declspec(implementation_key(826)) HRESULT IObjectSummaryFieldDefinitions::Add ( const _variant_t & summaryField );
__declspec(implementation_key(827)) HRESULT IObjectSummaryFieldDefinitions::Delete ( long index );
__declspec(implementation_key(828)) enum CRFieldKind ISummaryFieldDefinition::GetKind ( );
__declspec(implementation_key(829)) CRFieldValueType ISummaryFieldDefinition::GetValueType ( );
__declspec(implementation_key(830)) short ISummaryFieldDefinition::GetNumberOfBytes ( );
__declspec(implementation_key(831)) _bstr_t ISummaryFieldDefinition::GetName ( );
__declspec(implementation_key(832)) _variant_t ISummaryFieldDefinition::GetValue ( );
__declspec(implementation_key(833)) enum CRSummaryType ISummaryFieldDefinition::GetSummaryType ( );
__declspec(implementation_key(834)) IReportPtr ISummaryFieldDefinition::GetParent ( );
__declspec(implementation_key(835)) _variant_t ISummaryFieldDefinition::GetPreviousValue ( );
__declspec(implementation_key(836)) _variant_t ISummaryFieldDefinition::GetNextValue ( );
__declspec(implementation_key(837)) IAreaPtr ISummaryFieldDefinition::GetHeaderArea ( );
__declspec(implementation_key(838)) IAreaPtr ISummaryFieldDefinition::GetFooterArea ( );
__declspec(implementation_key(839)) IDispatchPtr ISummaryFieldDefinition::GetSummarizedField ( );
__declspec(implementation_key(840)) HRESULT ISummaryFieldDefinition::SetSummarizedField ( const _variant_t & SummarizedField );
__declspec(implementation_key(841)) IDispatchPtr ISummaryFieldDefinition::GetSecondarySummarizedField ( );
__declspec(implementation_key(842)) HRESULT ISummaryFieldDefinition::SetSecondarySummarizedField ( const _variant_t & secondarySummariedField );
__declspec(implementation_key(843)) long ISummaryFieldDefinition::GetSummaryOperationParameter ( );
__declspec(implementation_key(844)) void ISummaryFieldDefinition::PutSummaryOperationParameter ( long pOperationParameter );
__declspec(implementation_key(845)) void ISummaryFieldDefinition::PutSummaryType ( enum CRSummaryType pSummaryType );
__declspec(implementation_key(846)) VARIANT_BOOL ISummaryFieldDefinition::GetForCrossTab ( );
__declspec(implementation_key(847)) enum CRHierarchicalSummaryType ISummaryFieldDefinition::GetHierarchicalSummaryType ( );
__declspec(implementation_key(848)) void ISummaryFieldDefinition::PutHierarchicalSummaryType ( enum CRHierarchicalSummaryType pHierarchicalType );
__declspec(implementation_key(849)) _bstr_t IReportObject::GetName ( );
__declspec(implementation_key(850)) void IReportObject::PutName ( _bstr_t ppName );
__declspec(implementation_key(851)) enum CRObjectKind IReportObject::GetKind ( );
__declspec(implementation_key(852)) long IReportObject::GetLeft ( );
__declspec(implementation_key(853)) void IReportObject::PutLeft ( long pLeft );
__declspec(implementation_key(854)) long IReportObject::GetTop ( );
__declspec(implementation_key(855)) void IReportObject::PutTop ( long pTop );
__declspec(implementation_key(856)) long IReportObject::GetWidth ( );
__declspec(implementation_key(857)) void IReportObject::PutWidth ( long pWidth );
__declspec(implementation_key(858)) long IReportObject::GetHeight ( );
__declspec(implementation_key(859)) void IReportObject::PutHeight ( long pHeight );
__declspec(implementation_key(860)) enum CRLineStyle IReportObject::GetLeftLineStyle ( );
__declspec(implementation_key(861)) void IReportObject::PutLeftLineStyle ( enum CRLineStyle pLeftLineStyle );
__declspec(implementation_key(862)) enum CRLineStyle IReportObject::GetRightLineStyle ( );
__declspec(implementation_key(863)) void IReportObject::PutRightLineStyle ( enum CRLineStyle pRightLineStyle );
__declspec(implementation_key(864)) enum CRLineStyle IReportObject::GetTopLineStyle ( );
__declspec(implementation_key(865)) void IReportObject::PutTopLineStyle ( enum CRLineStyle pTopLineStyle );
__declspec(implementation_key(866)) enum CRLineStyle IReportObject::GetBottomLineStyle ( );
__declspec(implementation_key(867)) void IReportObject::PutBottomLineStyle ( enum CRLineStyle pBottomLineStyle );
__declspec(implementation_key(868)) VARIANT_BOOL IReportObject::GetEnableTightHorizontal ( );
__declspec(implementation_key(869)) void IReportObject::PutEnableTightHorizontal ( VARIANT_BOOL pBool );
__declspec(implementation_key(870)) VARIANT_BOOL IReportObject::GetHasDropShadow ( );
__declspec(implementation_key(871)) void IReportObject::PutHasDropShadow ( VARIANT_BOOL pBool );
__declspec(implementation_key(872)) OLE_COLOR IReportObject::GetBackColor ( );
__declspec(implementation_key(873)) void IReportObject::PutBackColor ( OLE_COLOR pBackColor );
__declspec(implementation_key(874)) OLE_COLOR IReportObject::GetBorderColor ( );
__declspec(implementation_key(875)) void IReportObject::PutBorderColor ( OLE_COLOR pBorderColor );
__declspec(implementation_key(876)) ISectionPtr IReportObject::GetParent ( );
__declspec(implementation_key(877)) VARIANT_BOOL IReportObject::GetSuppress ( );
__declspec(implementation_key(878)) void IReportObject::PutSuppress ( VARIANT_BOOL pBool );
__declspec(implementation_key(879)) VARIANT_BOOL IReportObject::GetCloseAtPageBreak ( );
__declspec(implementation_key(880)) void IReportObject::PutCloseAtPageBreak ( VARIANT_BOOL pBool );
__declspec(implementation_key(881)) VARIANT_BOOL IReportObject::GetKeepTogether ( );
__declspec(implementation_key(882)) void IReportObject::PutKeepTogether ( VARIANT_BOOL pBool );
__declspec(implementation_key(883)) _bstr_t IReportObject::GetConditionFormula ( const _variant_t & FormulaType );
__declspec(implementation_key(884)) void IReportObject::PutConditionFormula ( const _variant_t & FormulaType, _bstr_t pVal );
__declspec(implementation_key(885)) _bstr_t IReportObject::GetCssClass ( );
__declspec(implementation_key(886)) void IReportObject::PutCssClass ( _bstr_t ppCssClass );
__declspec(implementation_key(887)) enum CRHyperlinkType IReportObject::GetHyperlinkType ( );
__declspec(implementation_key(888)) void IReportObject::PutHyperlinkType ( enum CRHyperlinkType pType );
__declspec(implementation_key(889)) _bstr_t IReportObject::GetHyperlinkText ( );
__declspec(implementation_key(890)) void IReportObject::PutHyperlinkText ( _bstr_t pText );
__declspec(implementation_key(891)) IUnknownPtr ICrossTabGroups::Get_NewEnum ( );
__declspec(implementation_key(892)) ICrossTabObjectPtr ICrossTabGroups::GetParent ( );
__declspec(implementation_key(893)) long ICrossTabGroups::GetCount ( );
__declspec(implementation_key(894)) ICrossTabGroupPtr ICrossTabGroups::GetItem ( long index );
__declspec(implementation_key(895)) ICrossTabGroupPtr ICrossTabGroups::Add ( const _variant_t & Field );
__declspec(implementation_key(896)) HRESULT ICrossTabGroups::Delete ( long index );
__declspec(implementation_key(897)) ICrossTabObjectPtr ICrossTabGroup::GetParent ( );
__declspec(implementation_key(898)) IFieldDefinitionPtr ICrossTabGroup::GetField ( );
__declspec(implementation_key(899)) void ICrossTabGroup::PutField ( const _variant_t & ppField );
__declspec(implementation_key(900)) enum CRGroupCondition ICrossTabGroup::GetCondition ( );
__declspec(implementation_key(901)) void ICrossTabGroup::PutCondition ( enum CRGroupCondition pGroupCondition );
__declspec(implementation_key(902)) enum CRSortDirection ICrossTabGroup::GetSortDirection ( );
__declspec(implementation_key(903)) void ICrossTabGroup::PutSortDirection ( enum CRSortDirection pSortDirection );
__declspec(implementation_key(904)) OLE_COLOR ICrossTabGroup::GetBackColor ( );
__declspec(implementation_key(905)) void ICrossTabGroup::PutBackColor ( OLE_COLOR pBackColor );
__declspec(implementation_key(906)) VARIANT_BOOL ICrossTabGroup::GetEnableSuppressSubtotal ( );
__declspec(implementation_key(907)) void ICrossTabGroup::PutEnableSuppressSubtotal ( VARIANT_BOOL pBool );
__declspec(implementation_key(908)) VARIANT_BOOL ICrossTabGroup::GetEnableSuppressLabel ( );
__declspec(implementation_key(909)) void ICrossTabGroup::PutEnableSuppressLabel ( VARIANT_BOOL pBool );
__declspec(implementation_key(910)) _variant_t ICrossTabGroup::GetSpecifiedGroups ( );
__declspec(implementation_key(911)) void ICrossTabGroup::PutSpecifiedGroups ( VARIANT * pSpecifedGroupArray );
__declspec(implementation_key(912)) _bstr_t ICROleObject::GetName ( );
__declspec(implementation_key(913)) void ICROleObject::PutName ( _bstr_t ppName );
__declspec(implementation_key(914)) enum CRObjectKind ICROleObject::GetKind ( );
__declspec(implementation_key(915)) long ICROleObject::GetLeft ( );
__declspec(implementation_key(916)) void ICROleObject::PutLeft ( long pLeft );
__declspec(implementation_key(917)) long ICROleObject::GetTop ( );
__declspec(implementation_key(918)) void ICROleObject::PutTop ( long pTop );
__declspec(implementation_key(919)) long ICROleObject::GetWidth ( );
__declspec(implementation_key(920)) void ICROleObject::PutWidth ( long pWidth );
__declspec(implementation_key(921)) long ICROleObject::GetHeight ( );
__declspec(implementation_key(922)) void ICROleObject::PutHeight ( long pHeight );
__declspec(implementation_key(923)) enum CRLineStyle ICROleObject::GetLeftLineStyle ( );
__declspec(implementation_key(924)) void ICROleObject::PutLeftLineStyle ( enum CRLineStyle pLeftLineStyle );
__declspec(implementation_key(925)) enum CRLineStyle ICROleObject::GetRightLineStyle ( );
__declspec(implementation_key(926)) void ICROleObject::PutRightLineStyle ( enum CRLineStyle pRightLineStyle );
__declspec(implementation_key(927)) enum CRLineStyle ICROleObject::GetTopLineStyle ( );
__declspec(implementation_key(928)) void ICROleObject::PutTopLineStyle ( enum CRLineStyle pTopLineStyle );
__declspec(implementation_key(929)) enum CRLineStyle ICROleObject::GetBottomLineStyle ( );
__declspec(implementation_key(930)) void ICROleObject::PutBottomLineStyle ( enum CRLineStyle pBottomLineStyle );
__declspec(implementation_key(931)) VARIANT_BOOL ICROleObject::GetHasDropShadow ( );
__declspec(implementation_key(932)) void ICROleObject::PutHasDropShadow ( VARIANT_BOOL pBool );
__declspec(implementation_key(933)) OLE_COLOR ICROleObject::GetBackColor ( );
__declspec(implementation_key(934)) void ICROleObject::PutBackColor ( OLE_COLOR pBackColor );
__declspec(implementation_key(935)) OLE_COLOR ICROleObject::GetBorderColor ( );
__declspec(implementation_key(936)) void ICROleObject::PutBorderColor ( OLE_COLOR pBorderColor );
__declspec(implementation_key(937)) ISectionPtr ICROleObject::GetParent ( );
__declspec(implementation_key(938)) VARIANT_BOOL ICROleObject::GetSuppress ( );
__declspec(implementation_key(939)) void ICROleObject::PutSuppress ( VARIANT_BOOL pBool );
__declspec(implementation_key(940)) VARIANT_BOOL ICROleObject::GetCloseAtPageBreak ( );
__declspec(implementation_key(941)) void ICROleObject::PutCloseAtPageBreak ( VARIANT_BOOL pBool );
__declspec(implementation_key(942)) VARIANT_BOOL ICROleObject::GetKeepTogether ( );
__declspec(implementation_key(943)) void ICROleObject::PutKeepTogether ( VARIANT_BOOL pBool );
__declspec(implementation_key(944)) long ICROleObject::GetLeftCropping ( );
__declspec(implementation_key(945)) void ICROleObject::PutLeftCropping ( long pLeftCropping );
__declspec(implementation_key(946)) long ICROleObject::GetRightCropping ( );
__declspec(implementation_key(947)) void ICROleObject::PutRightCropping ( long pRightCropping );
__declspec(implementation_key(948)) long ICROleObject::GetTopCropping ( );
__declspec(implementation_key(949)) void ICROleObject::PutTopCropping ( long pTopCropping );
__declspec(implementation_key(950)) long ICROleObject::GetBottomCropping ( );
__declspec(implementation_key(951)) void ICROleObject::PutBottomCropping ( long pBottomCropping );
__declspec(implementation_key(952)) double ICROleObject::GetXScaling ( );
__declspec(implementation_key(953)) void ICROleObject::PutXScaling ( double pXScaling );
__declspec(implementation_key(954)) double ICROleObject::GetYScaling ( );
__declspec(implementation_key(955)) void ICROleObject::PutYScaling ( double pYScaling );
__declspec(implementation_key(956)) IPictureDisp * ICROleObject::GetFormattedPicture ( );
__declspec(implementation_key(957)) void ICROleObject::PutRefFormattedPicture ( IPictureDisp * ppPicture );
__declspec(implementation_key(958)) HRESULT ICROleObject::SetOleLocation ( _bstr_t pLocation );
__declspec(implementation_key(959)) _bstr_t ICROleObject::GetConditionFormula ( const _variant_t & FormulaType );
__declspec(implementation_key(960)) void ICROleObject::PutConditionFormula ( const _variant_t & FormulaType, _bstr_t pVal );
__declspec(implementation_key(961)) _bstr_t ICROleObject::GetLinkSource ( );
__declspec(implementation_key(962)) _bstr_t ICROleObject::GetCssClass ( );
__declspec(implementation_key(963)) void ICROleObject::PutCssClass ( _bstr_t ppCssClass );
__declspec(implementation_key(964)) enum CRHyperlinkType ICROleObject::GetHyperlinkType ( );
__declspec(implementation_key(965)) void ICROleObject::PutHyperlinkType ( enum CRHyperlinkType pType );
__declspec(implementation_key(966)) _bstr_t ICROleObject::GetHyperlinkText ( );
__declspec(implementation_key(967)) void ICROleObject::PutHyperlinkText ( _bstr_t pText );
__declspec(implementation_key(968)) _bstr_t IGraphObject::GetName ( );
__declspec(implementation_key(969)) void IGraphObject::PutName ( _bstr_t ppName );
__declspec(implementation_key(970)) enum CRObjectKind IGraphObject::GetKind ( );
__declspec(implementation_key(971)) long IGraphObject::GetLeft ( );
__declspec(implementation_key(972)) void IGraphObject::PutLeft ( long pLeft );
__declspec(implementation_key(973)) long IGraphObject::GetTop ( );
__declspec(implementation_key(974)) void IGraphObject::PutTop ( long pTop );
__declspec(implementation_key(975)) long IGraphObject::GetWidth ( );
__declspec(implementation_key(976)) void IGraphObject::PutWidth ( long pWidth );
__declspec(implementation_key(977)) long IGraphObject::GetHeight ( );
__declspec(implementation_key(978)) void IGraphObject::PutHeight ( long pHeight );
__declspec(implementation_key(979)) enum CRLineStyle IGraphObject::GetLeftLineStyle ( );
__declspec(implementation_key(980)) void IGraphObject::PutLeftLineStyle ( enum CRLineStyle pLeftLineStyle );
__declspec(implementation_key(981)) enum CRLineStyle IGraphObject::GetRightLineStyle ( );
__declspec(implementation_key(982)) void IGraphObject::PutRightLineStyle ( enum CRLineStyle pRightLineStyle );
__declspec(implementation_key(983)) enum CRLineStyle IGraphObject::GetTopLineStyle ( );
__declspec(implementation_key(984)) void IGraphObject::PutTopLineStyle ( enum CRLineStyle pTopLineStyle );
__declspec(implementation_key(985)) enum CRLineStyle IGraphObject::GetBottomLineStyle ( );
__declspec(implementation_key(986)) void IGraphObject::PutBottomLineStyle ( enum CRLineStyle pBottomLineStyle );
__declspec(implementation_key(987)) VARIANT_BOOL IGraphObject::GetHasDropShadow ( );
__declspec(implementation_key(988)) void IGraphObject::PutHasDropShadow ( VARIANT_BOOL pBool );
__declspec(implementation_key(989)) OLE_COLOR IGraphObject::GetBackColor ( );
__declspec(implementation_key(990)) void IGraphObject::PutBackColor ( OLE_COLOR pBackColor );
__declspec(implementation_key(991)) OLE_COLOR IGraphObject::GetBorderColor ( );
__declspec(implementation_key(992)) void IGraphObject::PutBorderColor ( OLE_COLOR pBorderColor );
__declspec(implementation_key(993)) ISectionPtr IGraphObject::GetParent ( );
__declspec(implementation_key(994)) VARIANT_BOOL IGraphObject::GetSuppress ( );
__declspec(implementation_key(995)) void IGraphObject::PutSuppress ( VARIANT_BOOL pBool );
__declspec(implementation_key(996)) VARIANT_BOOL IGraphObject::GetCloseAtPageBreak ( );
__declspec(implementation_key(997)) void IGraphObject::PutCloseAtPageBreak ( VARIANT_BOOL pBool );
__declspec(implementation_key(998)) VARIANT_BOOL IGraphObject::GetKeepTogether ( );
__declspec(implementation_key(999)) void IGraphObject::PutKeepTogether ( VARIANT_BOOL pBool );
__declspec(implementation_key(1000)) enum CRGraphDataType IGraphObject::GetDataType ( );
__declspec(implementation_key(1001)) enum CRGraphType IGraphObject::GetGraphType ( );
__declspec(implementation_key(1002)) void IGraphObject::PutGraphType ( enum CRGraphType pGraphType );
__declspec(implementation_key(1003)) _bstr_t IGraphObject::GetTitle ( );
__declspec(implementation_key(1004)) void IGraphObject::PutTitle ( _bstr_t ppTitle );
__declspec(implementation_key(1005)) _bstr_t IGraphObject::GetSubTitle ( );
__declspec(implementation_key(1006)) void IGraphObject::PutSubTitle ( _bstr_t ppSubTitle );
__declspec(implementation_key(1007)) _bstr_t IGraphObject::GetFootNote ( );
__declspec(implementation_key(1008)) void IGraphObject::PutFootNote ( _bstr_t ppFootNote );
__declspec(implementation_key(1009)) _bstr_t IGraphObject::GetGroupsTitle ( );
__declspec(implementation_key(1010)) void IGraphObject::PutGroupsTitle ( _bstr_t ppGroupsTitle );
__declspec(implementation_key(1011)) _bstr_t IGraphObject::GetSeriesTitle ( );
__declspec(implementation_key(1012)) void IGraphObject::PutSeriesTitle ( _bstr_t ppSeriesTitle );
__declspec(implementation_key(1013)) _bstr_t IGraphObject::GetXAxisTitle ( );
__declspec(implementation_key(1014)) void IGraphObject::PutXAxisTitle ( _bstr_t ppXAxisTitle );
__declspec(implementation_key(1015)) _bstr_t IGraphObject::GetYAxisTitle ( );
__declspec(implementation_key(1016)) void IGraphObject::PutYAxisTitle ( _bstr_t ppYAxisTitle );
__declspec(implementation_key(1017)) _bstr_t IGraphObject::GetY2AxisTitle ( );
__declspec(implementation_key(1018)) void IGraphObject::PutY2AxisTitle ( _bstr_t ppY2AxisTitle );
__declspec(implementation_key(1019)) double IGraphObject::GetMaxDataAxisValue ( );
__declspec(implementation_key(1020)) void IGraphObject::PutMaxDataAxisValue ( double pMaxDataAxisValue );
__declspec(implementation_key(1021)) double IGraphObject::GetMinDataAxisValue ( );
__declspec(implementation_key(1022)) void IGraphObject::PutMinDataAxisValue ( double pMinDataAxisValue );
__declspec(implementation_key(1023)) double IGraphObject::GetMaxData2AxisValue ( );
__declspec(implementation_key(1024)) void IGraphObject::PutMaxData2AxisValue ( double pMaxData2AxisValue );
__declspec(implementation_key(1025)) double IGraphObject::GetMinData2AxisValue ( );
__declspec(implementation_key(1026)) void IGraphObject::PutMinData2AxisValue ( double pMinData2AxisValue );
__declspec(implementation_key(1027)) double IGraphObject::GetMaxSeriesAxisValue ( );
__declspec(implementation_key(1028)) void IGraphObject::PutMaxSeriesAxisValue ( double pMaxSeriesAxisValue );
__declspec(implementation_key(1029)) double IGraphObject::GetMinSeriesAxisValue ( );
__declspec(implementation_key(1030)) void IGraphObject::PutMinSeriesAxisValue ( double pMinSeriesAxisValue );
__declspec(implementation_key(1031)) enum CRGraphDataPoint IGraphObject::GetDataPoint ( );
__declspec(implementation_key(1032)) void IGraphObject::PutDataPoint ( enum CRGraphDataPoint pDataPoint );
__declspec(implementation_key(1033)) enum CRGridlineType IGraphObject::GetGroupAxisGridline ( );
__declspec(implementation_key(1034)) void IGraphObject::PutGroupAxisGridline ( enum CRGridlineType pGroupAxisGridline );
__declspec(implementation_key(1035)) enum CRGridlineType IGraphObject::GetSeriesAxisGridline ( );
__declspec(implementation_key(1036)) void IGraphObject::PutSeriesAxisGridline ( enum CRGridlineType pSeriesAxisGridline );
__declspec(implementation_key(1037)) enum CRGridlineType IGraphObject::GetDataAxisGridline ( );
__declspec(implementation_key(1038)) void IGraphObject::PutDataAxisGridline ( enum CRGridlineType pDataAxisGridline );
__declspec(implementation_key(1039)) enum CRGridlineType IGraphObject::GetData2AxisGridline ( );
__declspec(implementation_key(1040)) void IGraphObject::PutData2AxisGridline ( enum CRGridlineType pData2AxisGridline );
__declspec(implementation_key(1041)) VARIANT_BOOL IGraphObject::GetEnableShowLegend ( );
__declspec(implementation_key(1042)) void IGraphObject::PutEnableShowLegend ( VARIANT_BOOL pEnableShowLegend );
__declspec(implementation_key(1043)) enum CRLegendPosition IGraphObject::GetLegendPosition ( );
__declspec(implementation_key(1044)) void IGraphObject::PutLegendPosition ( enum CRLegendPosition pLegendPosition );
__declspec(implementation_key(1045)) enum CRGraphDirection IGraphObject::GetGraphDirection ( );
__declspec(implementation_key(1046)) void IGraphObject::PutGraphDirection ( enum CRGraphDirection pDirection );
__declspec(implementation_key(1047)) enum CRPieSize IGraphObject::GetPieSize ( );
__declspec(implementation_key(1048)) void IGraphObject::PutPieSize ( enum CRPieSize pPieSize );
__declspec(implementation_key(1049)) enum CRSliceDetachment IGraphObject::GetSliceDetachment ( );
__declspec(implementation_key(1050)) void IGraphObject::PutSliceDetachment ( enum CRSliceDetachment pSliceDetachment );
__declspec(implementation_key(1051)) enum CRBarSize IGraphObject::GetBarSize ( );
__declspec(implementation_key(1052)) void IGraphObject::PutBarSize ( enum CRBarSize pBarSize );
__declspec(implementation_key(1053)) enum CRMarkerSize IGraphObject::GetMarkerSize ( );
__declspec(implementation_key(1054)) void IGraphObject::PutMarkerSize ( enum CRMarkerSize pMarkerSize );
__declspec(implementation_key(1055)) enum CRMarkerShape IGraphObject::GetMarkerShape ( );
__declspec(implementation_key(1056)) void IGraphObject::PutMarkerShape ( enum CRMarkerShape pMarkerShape );
__declspec(implementation_key(1057)) enum CRNumberFormat IGraphObject::GetDataAxisNumberFormat ( );
__declspec(implementation_key(1058)) void IGraphObject::PutDataAxisNumberFormat ( enum CRNumberFormat pDataAxisNumberFormat );
__declspec(implementation_key(1059)) enum CRNumberFormat IGraphObject::GetData2AxisNumberFormat ( );
__declspec(implementation_key(1060)) void IGraphObject::PutData2AxisNumberFormat ( enum CRNumberFormat pData2AxisNumberFormat );
__declspec(implementation_key(1061)) enum CRNumberFormat IGraphObject::GetSeriesAxisNumberFormat ( );
__declspec(implementation_key(1062)) void IGraphObject::PutSeriesAxisNumberFormat ( enum CRNumberFormat pSeriesAxisNumberFormat );
__declspec(implementation_key(1063)) VARIANT_BOOL IGraphObject::GetAutoRangeDataAxis ( );
__declspec(implementation_key(1064)) void IGraphObject::PutAutoRangeDataAxis ( VARIANT_BOOL pAutoRangeDataAxis );
__declspec(implementation_key(1065)) VARIANT_BOOL IGraphObject::GetAutoRangeData2Axis ( );
__declspec(implementation_key(1066)) void IGraphObject::PutAutoRangeData2Axis ( VARIANT_BOOL pAutoRangeData2Axis );
__declspec(implementation_key(1067)) VARIANT_BOOL IGraphObject::GetAutoRangeSeriesAxis ( );
__declspec(implementation_key(1068)) void IGraphObject::PutAutoRangeSeriesAxis ( VARIANT_BOOL pAutoRangeSeriesAxis );
__declspec(implementation_key(1069)) enum CRDivisionMethod IGraphObject::GetDataAxisDivisionMethod ( );
__declspec(implementation_key(1070)) void IGraphObject::PutDataAxisDivisionMethod ( enum CRDivisionMethod pDataAxisDivisionMethod );
__declspec(implementation_key(1071)) enum CRDivisionMethod IGraphObject::GetData2AxisDivisionMethod ( );
__declspec(implementation_key(1072)) void IGraphObject::PutData2AxisDivisionMethod ( enum CRDivisionMethod pData2AxisDivisionMethod );
__declspec(implementation_key(1073)) enum CRDivisionMethod IGraphObject::GetSeriesAxisDivisionMethod ( );
__declspec(implementation_key(1074)) void IGraphObject::PutSeriesAxisDivisionMethod ( enum CRDivisionMethod pSeriesAxisDivisionMethod );
__declspec(implementation_key(1075)) long IGraphObject::GetDataAxisDivisionNumber ( );
__declspec(implementation_key(1076)) void IGraphObject::PutDataAxisDivisionNumber ( long pDataAxisDivisionNumber );
__declspec(implementation_key(1077)) long IGraphObject::GetData2AxisDivisionNumber ( );
__declspec(implementation_key(1078)) void IGraphObject::PutData2AxisDivisionNumber ( long pData2AxisDivisionNumber );
__declspec(implementation_key(1079)) long IGraphObject::GetSeriesAxisDivisionNumber ( );
__declspec(implementation_key(1080)) void IGraphObject::PutSeriesAxisDivisionNumber ( long pSeriesAxisDivisionNumber );
__declspec(implementation_key(1081)) enum CRGraphColor IGraphObject::GetGraphColor ( );
__declspec(implementation_key(1082)) void IGraphObject::PutGraphColor ( enum CRGraphColor pGraphColor );
__declspec(implementation_key(1083)) enum CRNumberFormat IGraphObject::GetDataValueNumberFormat ( );
__declspec(implementation_key(1084)) void IGraphObject::PutDataValueNumberFormat ( enum CRNumberFormat pDataValueNumberFormat );
__declspec(implementation_key(1085)) enum CRViewingAngle IGraphObject::GetViewingAngle ( );
__declspec(implementation_key(1086)) void IGraphObject::PutViewingAngle ( enum CRViewingAngle pViewingAngle );
__declspec(implementation_key(1087)) _bstr_t IGraphObject::GetZAxisTitle ( );
__declspec(implementation_key(1088)) void IGraphObject::PutZAxisTitle ( _bstr_t ppZAxisTitle );
__declspec(implementation_key(1089)) IFieldDefinitionsPtr IGraphObject::GetConditionFields ( );
__declspec(implementation_key(1090)) IObjectSummaryFieldDefinitionsPtr IGraphObject::GetSummaryFields ( );
__declspec(implementation_key(1091)) VARIANT_BOOL IGraphObject::GetEnableForEachRecord ( );
__declspec(implementation_key(1092)) void IGraphObject::PutEnableForEachRecord ( VARIANT_BOOL pBool );
__declspec(implementation_key(1093)) VARIANT_BOOL IGraphObject::GetEnableSummarizeValues ( );
__declspec(implementation_key(1094)) void IGraphObject::PutEnableSummarizeValues ( VARIANT_BOOL pBool );
__declspec(implementation_key(1095)) ICrossTabObjectPtr IGraphObject::GetCrossTabObject ( );
__declspec(implementation_key(1096)) IFontDisp * IGraphObject::GetTitleFont ( );
__declspec(implementation_key(1097)) void IGraphObject::PutRefTitleFont ( IFontDisp * ppFont );
__declspec(implementation_key(1098)) IFontDisp * IGraphObject::GetSubTitleFont ( );
__declspec(implementation_key(1099)) void IGraphObject::PutRefSubTitleFont ( IFontDisp * ppFont );
__declspec(implementation_key(1100)) IFontDisp * IGraphObject::GetFootnoteFont ( );
__declspec(implementation_key(1101)) void IGraphObject::PutRefFootnoteFont ( IFontDisp * ppFont );
__declspec(implementation_key(1102)) IFontDisp * IGraphObject::GetGroupTitleFont ( );
__declspec(implementation_key(1103)) void IGraphObject::PutRefGroupTitleFont ( IFontDisp * ppFont );
__declspec(implementation_key(1104)) IFontDisp * IGraphObject::GetDataTitleFont ( );
__declspec(implementation_key(1105)) void IGraphObject::PutRefDataTitleFont ( IFontDisp * ppFont );
__declspec(implementation_key(1106)) IFontDisp * IGraphObject::GetSeriesTitleFont ( );
__declspec(implementation_key(1107)) void IGraphObject::PutRefSeriesTitleFont ( IFontDisp * ppFont );
__declspec(implementation_key(1108)) IFontDisp * IGraphObject::GetLegendFont ( );
__declspec(implementation_key(1109)) void IGraphObject::PutRefLegendFont ( IFontDisp * ppFont );
__declspec(implementation_key(1110)) IFontDisp * IGraphObject::GetGroupLabelFont ( );
__declspec(implementation_key(1111)) void IGraphObject::PutRefGroupLabelFont ( IFontDisp * ppFont );
__declspec(implementation_key(1112)) IFontDisp * IGraphObject::GetDataLabelFont ( );
__declspec(implementation_key(1113)) void IGraphObject::PutRefDataLabelFont ( IFontDisp * ppFont );
__declspec(implementation_key(1114)) IFontDisp * IGraphObject::GetSeriesLabelFont ( );
__declspec(implementation_key(1115)) void IGraphObject::PutRefSeriesLabelFont ( IFontDisp * ppFont );
__declspec(implementation_key(1116)) VARIANT_BOOL IGraphObject::GetIsTitleByDefault ( );
__declspec(implementation_key(1117)) void IGraphObject::PutIsTitleByDefault ( VARIANT_BOOL pBool );
__declspec(implementation_key(1118)) VARIANT_BOOL IGraphObject::GetIsSubTitleByDefault ( );
__declspec(implementation_key(1119)) void IGraphObject::PutIsSubTitleByDefault ( VARIANT_BOOL pBool );
__declspec(implementation_key(1120)) VARIANT_BOOL IGraphObject::GetIsFootnoteByDefault ( );
__declspec(implementation_key(1121)) void IGraphObject::PutIsFootnoteByDefault ( VARIANT_BOOL pBool );
__declspec(implementation_key(1122)) VARIANT_BOOL IGraphObject::GetIsXAxisTitleByDefault ( );
__declspec(implementation_key(1123)) void IGraphObject::PutIsXAxisTitleByDefault ( VARIANT_BOOL pBool );
__declspec(implementation_key(1124)) VARIANT_BOOL IGraphObject::GetIsYAxisTitleByDefault ( );
__declspec(implementation_key(1125)) void IGraphObject::PutIsYAxisTitleByDefault ( VARIANT_BOOL pBool );
__declspec(implementation_key(1126)) VARIANT_BOOL IGraphObject::GetIsZAxisTitleByDefault ( );
__declspec(implementation_key(1127)) void IGraphObject::PutIsZAxisTitleByDefault ( VARIANT_BOOL pBool );
__declspec(implementation_key(1128)) VARIANT_BOOL IGraphObject::GetEnableAutoScaleDataAxis ( );
__declspec(implementation_key(1129)) void IGraphObject::PutEnableAutoScaleDataAxis ( VARIANT_BOOL pBool );
__declspec(implementation_key(1130)) VARIANT_BOOL IGraphObject::GetEnableAutoScaleData2Axis ( );
__declspec(implementation_key(1131)) void IGraphObject::PutEnableAutoScaleData2Axis ( VARIANT_BOOL pBool );
__declspec(implementation_key(1132)) VARIANT_BOOL IGraphObject::GetEnableAutoScaleSeriesAxis ( );
__declspec(implementation_key(1133)) void IGraphObject::PutEnableAutoScaleSeriesAxis ( VARIANT_BOOL pBool );
__declspec(implementation_key(1134)) enum CRPieLegendLayout IGraphObject::GetLegendLayout ( );
__declspec(implementation_key(1135)) void IGraphObject::PutLegendLayout ( enum CRPieLegendLayout pLegendLayout );
__declspec(implementation_key(1136)) enum CRSortDirection IGraphObject::GetConditionFieldSortOrder ( int index );
__declspec(implementation_key(1137)) void IGraphObject::PutConditionFieldSortOrder ( int index, enum CRSortDirection pSortOrder );
__declspec(implementation_key(1138)) _variant_t IGraphObject::GetSpecifiedGroups ( int index );
__declspec(implementation_key(1139)) void IGraphObject::PutSpecifiedGroups ( int index, const _variant_t & pSpecifedGroupArray );
__declspec(implementation_key(1140)) _bstr_t IGraphObject::GetDataTitle ( );
__declspec(implementation_key(1141)) void IGraphObject::PutDataTitle ( _bstr_t ppDataTitle );
__declspec(implementation_key(1142)) _bstr_t IGraphObject::GetData2Title ( );
__declspec(implementation_key(1143)) void IGraphObject::PutData2Title ( _bstr_t ppData2Title );
__declspec(implementation_key(1144)) VARIANT_BOOL IGraphObject::GetIsGroupsTitleByDefault ( );
__declspec(implementation_key(1145)) void IGraphObject::PutIsGroupsTitleByDefault ( VARIANT_BOOL pBool );
__declspec(implementation_key(1146)) VARIANT_BOOL IGraphObject::GetIsSeriesTitleByDefault ( );
__declspec(implementation_key(1147)) void IGraphObject::PutIsSeriesTitleByDefault ( VARIANT_BOOL pBool );
__declspec(implementation_key(1148)) VARIANT_BOOL IGraphObject::GetIsDataTitleByDefault ( );
__declspec(implementation_key(1149)) void IGraphObject::PutIsDataTitleByDefault ( VARIANT_BOOL pBool );
__declspec(implementation_key(1150)) VARIANT_BOOL IGraphObject::GetIsData2TitleByDefault ( );
__declspec(implementation_key(1151)) void IGraphObject::PutIsData2TitleByDefault ( VARIANT_BOOL pBool );
__declspec(implementation_key(1152)) IFontDisp * IGraphObject::GetData2TitleFont ( );
__declspec(implementation_key(1153)) void IGraphObject::PutRefData2TitleFont ( IFontDisp * ppFont );
__declspec(implementation_key(1154)) IFontDisp * IGraphObject::GetData2LabelFont ( );
__declspec(implementation_key(1155)) void IGraphObject::PutRefData2LabelFont ( IFontDisp * ppFont );
__declspec(implementation_key(1156)) _bstr_t IGraphObject::GetConditionFormula ( const _variant_t & FormulaType );
__declspec(implementation_key(1157)) void IGraphObject::PutConditionFormula ( const _variant_t & FormulaType, _bstr_t pVal );
__declspec(implementation_key(1158)) _bstr_t IGraphObject::GetCssClass ( );
__declspec(implementation_key(1159)) void IGraphObject::PutCssClass ( _bstr_t ppCssClass );
__declspec(implementation_key(1160)) enum CRHyperlinkType IGraphObject::GetHyperlinkType ( );
__declspec(implementation_key(1161)) void IGraphObject::PutHyperlinkType ( enum CRHyperlinkType pType );
__declspec(implementation_key(1162)) _bstr_t IGraphObject::GetHyperlinkText ( );
__declspec(implementation_key(1163)) void IGraphObject::PutHyperlinkText ( _bstr_t pText );
__declspec(implementation_key(1164)) IUnknownPtr IFieldDefinitions::Get_NewEnum ( );
__declspec(implementation_key(1165)) IFieldDefinitionPtr IFieldDefinitions::GetItem ( long index );
__declspec(implementation_key(1166)) long IFieldDefinitions::GetCount ( );
__declspec(implementation_key(1167)) IReportObjectPtr IFieldDefinitions::GetParent ( );
__declspec(implementation_key(1168)) HRESULT IFieldDefinitions::Add ( const _variant_t & Field );
__declspec(implementation_key(1169)) HRESULT IFieldDefinitions::Delete ( const _variant_t & Field );
__declspec(implementation_key(1170)) IDatabaseTablesPtr IDatabase::GetTables ( );
__declspec(implementation_key(1171)) IReportPtr IDatabase::GetParent ( );
__declspec(implementation_key(1172)) HRESULT IDatabase::LogOnServer ( _bstr_t pDllName, _bstr_t pServerName, const _variant_t & pDatabaseName, const _variant_t & pUserID, const _variant_t & pPassword );
__declspec(implementation_key(1173)) HRESULT IDatabase::LogOffServer ( _bstr_t pDllName, _bstr_t pServerName, const _variant_t & pDatabaseName, const _variant_t & pUserID, const _variant_t & pPassword );
__declspec(implementation_key(1174)) HRESULT IDatabase::SetDataSource ( const _variant_t & data, const _variant_t & dataTag, const _variant_t & tableNumber );
__declspec(implementation_key(1175)) HRESULT IDatabase::Verify ( );
__declspec(implementation_key(1176)) ITableLinksPtr IDatabase::GetLinks ( );
__declspec(implementation_key(1177)) HRESULT IDatabase::AddOLEDBSource ( _bstr_t pConnectionString, _bstr_t pTableName );
__declspec(implementation_key(1178)) HRESULT IDatabase::AddADOCommand ( const _variant_t & pConnection, const _variant_t & pCommand );
__declspec(implementation_key(1179)) HRESULT IDatabase::LogOnServerEx ( _bstr_t pDllName, _bstr_t pServerName, const _variant_t & pDatabaseName, const _variant_t & pUserID, const _variant_t & pPassword, const _variant_t & pServerType, const _variant_t & pConnectionString );
__declspec(implementation_key(1180)) _bstr_t IDatabase::GetDictionaryLocation ( );
__declspec(implementation_key(1181)) void IDatabase::PutDictionaryLocation ( _bstr_t ppLocation );
__declspec(implementation_key(1182)) HRESULT IDatabase::LogOnServerWithPrivateInfo ( _bstr_t pDllName, const _variant_t & privateInfo );
__declspec(implementation_key(1183)) HRESULT IDatabase::ConvertDatabaseDriver ( _bstr_t pDllName, VARIANT_BOOL blDoImmediateConvert );
__declspec(implementation_key(1184)) IUnknownPtr IDatabaseTables::Get_NewEnum ( );
__declspec(implementation_key(1185)) IDatabaseTablePtr IDatabaseTables::GetItem ( long index );
__declspec(implementation_key(1186)) long IDatabaseTables::GetCount ( );
__declspec(implementation_key(1187)) IDatabasePtr IDatabaseTables::GetParent ( );
__declspec(implementation_key(1188)) HRESULT IDatabaseTables::Add ( _bstr_t pLocation, const _variant_t & pSubLocation, const _variant_t & pConnectInfo, const _variant_t & tableType, const _variant_t & pDllName, const _variant_t & pServerName, const _variant_t & pServerType, const _variant_t & pDatabaseName, const _variant_t & pUserID, const _variant_t & pPassword );
__declspec(implementation_key(1189)) HRESULT IDatabaseTables::Delete ( long index );
__declspec(implementation_key(1190)) HRESULT IDatabaseTables::AddStoredProcedure ( _bstr_t pLocation, const _variant_t & pSubLocation, const _variant_t & pConnectInfo, const _variant_t & tableType, const _variant_t & pDllName, const _variant_t & pServerName, const _variant_t & pServerType, const _variant_t & pDatabaseName, const _variant_t & pUserID, const _variant_t & pPassword, const _variant_t & paramValueInfos );
__declspec(implementation_key(1191)) _bstr_t IDatabaseTable::GetName ( );
__declspec(implementation_key(1192)) void IDatabaseTable::PutName ( _bstr_t ppName );
__declspec(implementation_key(1193)) _bstr_t IDatabaseTable::GetLocation ( );
__declspec(implementation_key(1194)) void IDatabaseTable::PutLocation ( _bstr_t ppLocation );
__declspec(implementation_key(1195)) IDatabaseFieldDefinitionsPtr IDatabaseTable::GetFields ( );
__declspec(implementation_key(1196)) HRESULT IDatabaseTable::SetPrivateData ( long dataTag, const _variant_t & data );
__declspec(implementation_key(1197)) IDatabasePtr IDatabaseTable::GetParent ( );
__declspec(implementation_key(1198)) HRESULT IDatabaseTable::SetDataSource ( const _variant_t & data, const _variant_t & dataTag );
__declspec(implementation_key(1199)) _bstr_t IDatabaseTable::GetDllName ( );
__declspec(implementation_key(1200)) _bstr_t IDatabaseTable::GetDecriptiveName ( );
__declspec(implementation_key(1201)) _bstr_t IDatabaseTable::GetLogOnServerName ( );
__declspec(implementation_key(1202)) _bstr_t IDatabaseTable::GetLogOnDatabaseName ( );
__declspec(implementation_key(1203)) _bstr_t IDatabaseTable::GetLogOnUserID ( );
__declspec(implementation_key(1204)) _bstr_t IDatabaseTable::GetSessionUserID ( );
__declspec(implementation_key(1205)) VARIANT_BOOL IDatabaseTable::TestConnectivity ( );
__declspec(implementation_key(1206)) HRESULT IDatabaseTable::SetLogOnInfo ( _bstr_t pServerName, const _variant_t & pDatabaseName, const _variant_t & pUserID, const _variant_t & pPassword );
__declspec(implementation_key(1207)) HRESULT IDatabaseTable::SetSessionInfo ( _bstr_t pSessionUserID, _bstr_t pSessionPassword );
__declspec(implementation_key(1208)) enum CRDatabaseType IDatabaseTable::GetDatabaseType ( );
__declspec(implementation_key(1209)) HRESULT IDatabaseTable::CheckDifferences ( long * pDifferences, VARIANT * reserved );
__declspec(implementation_key(1210)) _bstr_t IDatabaseTable::GetSubLocation ( );
__declspec(implementation_key(1211)) HRESULT IDatabaseTable::SetTableLocation ( _bstr_t pLocation, _bstr_t pSubLocation, _bstr_t pConnectBufferSting );
__declspec(implementation_key(1212)) _bstr_t IDatabaseTable::GetConnectBufferString ( );
__declspec(implementation_key(1213)) void IDatabaseTable::PutConnectBufferString ( _bstr_t ppConnectBufferString );
__declspec(implementation_key(1214)) void IDatabaseTable::PutDllName ( _bstr_t ppDllName );
__declspec(implementation_key(1215)) INameValuePairsPtr IDatabaseTable::GetConnectionProperties ( );
__declspec(implementation_key(1216)) IUnknownPtr IDatabaseFieldDefinitions::Get_NewEnum ( );
__declspec(implementation_key(1217)) IDatabaseFieldDefinitionPtr IDatabaseFieldDefinitions::GetItem ( long index );
__declspec(implementation_key(1218)) long IDatabaseFieldDefinitions::GetCount ( );
__declspec(implementation_key(1219)) IDatabaseTablePtr IDatabaseFieldDefinitions::GetParent ( );
__declspec(implementation_key(1220)) IDatabaseFieldDefinitionPtr IDatabaseFieldDefinitions::GetItemByName ( _bstr_t Name );
__declspec(implementation_key(1221)) IUnknownPtr INameValuePairs::Get_NewEnum ( );
__declspec(implementation_key(1222)) _variant_t INameValuePairs::GetItem ( _bstr_t Name );
__declspec(implementation_key(1223)) long INameValuePairs::GetCount ( );
__declspec(implementation_key(1224)) HRESULT INameValuePairs::Add ( _bstr_t Name, const _variant_t & Value );
__declspec(implementation_key(1225)) HRESULT INameValuePairs::Delete ( const _variant_t & index );
__declspec(implementation_key(1226)) HRESULT INameValuePairs::DeleteAll ( );
__declspec(implementation_key(1227)) _variant_t INameValuePairs::GetNameIDs ( );
__declspec(implementation_key(1228)) IUnknownPtr ITableLinks::Get_NewEnum ( );
__declspec(implementation_key(1229)) long ITableLinks::GetCount ( );
__declspec(implementation_key(1230)) ITableLinkPtr ITableLinks::GetItem ( long index );
__declspec(implementation_key(1231)) IDatabasePtr ITableLinks::GetParent ( );
__declspec(implementation_key(1232)) ITableLinkPtr ITableLinks::Add ( struct IDatabaseTable * psrcTable, struct IDatabaseTable * pDestTable, const _variant_t & srcFields, const _variant_t & destFields, enum CRLinkJoinType JoinType, enum CRLinkLookUpType LookupType, VARIANT_BOOL PartialMatchEnabled, short indexInUse );
__declspec(implementation_key(1233)) HRESULT ITableLinks::Delete ( long index );
__declspec(implementation_key(1234)) IDatabasePtr ITableLink::GetParent ( );
__declspec(implementation_key(1235)) IDatabaseTablePtr ITableLink::GetSourceTable ( );
__declspec(implementation_key(1236)) IDatabaseTablePtr ITableLink::GetDestinationTable ( );
__declspec(implementation_key(1237)) enum CRLinkJoinType ITableLink::GetJoinType ( );
__declspec(implementation_key(1238)) enum CRLinkLookUpType ITableLink::GetLookupType ( );
__declspec(implementation_key(1239)) VARIANT_BOOL ITableLink::GetPartialMatchEnabled ( );
__declspec(implementation_key(1240)) short ITableLink::GetIndexUsed ( );
__declspec(implementation_key(1241)) IDatabaseFieldDefinitionsPtr ITableLink::GetSourceFields ( );
__declspec(implementation_key(1242)) IDatabaseFieldDefinitionsPtr ITableLink::GetDestinationFields ( );
__declspec(implementation_key(1243)) IUnknownPtr IFormulaFieldDefinitions::Get_NewEnum ( );
__declspec(implementation_key(1244)) IFormulaFieldDefinitionPtr IFormulaFieldDefinitions::GetItem ( long index );
__declspec(implementation_key(1245)) long IFormulaFieldDefinitions::GetCount ( );
__declspec(implementation_key(1246)) IReportPtr IFormulaFieldDefinitions::GetParent ( );
__declspec(implementation_key(1247)) IFormulaFieldDefinitionPtr IFormulaFieldDefinitions::Add ( _bstr_t FormulaName, _bstr_t Text );
__declspec(implementation_key(1248)) HRESULT IFormulaFieldDefinitions::Delete ( const _variant_t & index );
__declspec(implementation_key(1249)) IFormulaFieldDefinitionPtr IFormulaFieldDefinitions::GetItemByName ( _bstr_t Name );
__declspec(implementation_key(1250)) enum CRFieldKind IFormulaFieldDefinition::GetKind ( );
__declspec(implementation_key(1251)) CRFieldValueType IFormulaFieldDefinition::GetValueType ( );
__declspec(implementation_key(1252)) short IFormulaFieldDefinition::GetNumberOfBytes ( );
__declspec(implementation_key(1253)) _bstr_t IFormulaFieldDefinition::GetName ( );
__declspec(implementation_key(1254)) _variant_t IFormulaFieldDefinition::GetValue ( );
__declspec(implementation_key(1255)) _bstr_t IFormulaFieldDefinition::GetFormulaFieldName ( );
__declspec(implementation_key(1256)) _bstr_t IFormulaFieldDefinition::GetText ( );
__declspec(implementation_key(1257)) void IFormulaFieldDefinition::PutText ( _bstr_t ppText );
__declspec(implementation_key(1258)) IReportPtr IFormulaFieldDefinition::GetParent ( );
__declspec(implementation_key(1259)) _variant_t IFormulaFieldDefinition::GetPreviousValue ( );
__declspec(implementation_key(1260)) _variant_t IFormulaFieldDefinition::GetNextValue ( );
__declspec(implementation_key(1261)) HRESULT IFormulaFieldDefinition::Check ( VARIANT_BOOL * pBool, BSTR * ppErrorString );
__declspec(implementation_key(1262)) IUnknownPtr IParameterFieldDefinitions::Get_NewEnum ( );
__declspec(implementation_key(1263)) IParameterFieldDefinitionPtr IParameterFieldDefinitions::GetItem ( long index );
__declspec(implementation_key(1264)) long IParameterFieldDefinitions::GetCount ( );
__declspec(implementation_key(1265)) IReportPtr IParameterFieldDefinitions::GetParent ( );
__declspec(implementation_key(1266)) IParameterFieldDefinitionPtr IParameterFieldDefinitions::Add ( _bstr_t parameterName, CRFieldValueType ValueType );
__declspec(implementation_key(1267)) HRESULT IParameterFieldDefinitions::Delete ( const _variant_t & index );
__declspec(implementation_key(1268)) IParameterFieldDefinitionPtr IParameterFieldDefinitions::GetItemByName ( _bstr_t Name, const _variant_t & SubreportName );
__declspec(implementation_key(1269)) enum CRFieldKind IParameterFieldDefinition::GetKind ( );
__declspec(implementation_key(1270)) CRFieldValueType IParameterFieldDefinition::GetValueType ( );
__declspec(implementation_key(1271)) short IParameterFieldDefinition::GetNumberOfBytes ( );
__declspec(implementation_key(1272)) _bstr_t IParameterFieldDefinition::GetName ( );
__declspec(implementation_key(1273)) _variant_t IParameterFieldDefinition::GetValue ( );
__declspec(implementation_key(1274)) _bstr_t IParameterFieldDefinition::GetParameterFieldName ( );
__declspec(implementation_key(1275)) IReportPtr IParameterFieldDefinition::GetParent ( );
__declspec(implementation_key(1276)) _variant_t IParameterFieldDefinition::GetPreviousValue ( );
__declspec(implementation_key(1277)) _variant_t IParameterFieldDefinition::GetNextValue ( );
__declspec(implementation_key(1278)) _bstr_t IParameterFieldDefinition::GetPrompt ( );
__declspec(implementation_key(1279)) void IParameterFieldDefinition::PutPrompt ( _bstr_t ppPrompt );
__declspec(implementation_key(1280)) VARIANT_BOOL IParameterFieldDefinition::GetIsDefaultValueSet ( );
__declspec(implementation_key(1281)) _bstr_t IParameterFieldDefinition::GetReportName ( );
__declspec(implementation_key(1282)) VARIANT_BOOL IParameterFieldDefinition::GetNeedsCurrentValue ( );
__declspec(implementation_key(1283)) VARIANT_BOOL IParameterFieldDefinition::GetIsCurrentValueSet ( );
__declspec(implementation_key(1284)) _variant_t IParameterFieldDefinition::GetCurrentValue ( );
__declspec(implementation_key(1285)) _variant_t IParameterFieldDefinition::GetDefaultValue ( );
__declspec(implementation_key(1286)) HRESULT IParameterFieldDefinition::SetCurrentValue ( const _variant_t & CurrentValue, const _variant_t & ValueType );
__declspec(implementation_key(1287)) HRESULT IParameterFieldDefinition::SetDefaultValue ( const _variant_t & DefaultValue, const _variant_t & ValueType );
__declspec(implementation_key(1288)) VARIANT_BOOL IParameterFieldDefinition::GetEnableRangeLimit ( );
__declspec(implementation_key(1289)) void IParameterFieldDefinition::PutEnableRangeLimit ( VARIANT_BOOL pBool );
__declspec(implementation_key(1290)) _variant_t IParameterFieldDefinition::GetMinimumValue ( );
__declspec(implementation_key(1291)) void IParameterFieldDefinition::PutMinimumValue ( const _variant_t & pMinimumValue );
__declspec(implementation_key(1292)) _variant_t IParameterFieldDefinition::GetMaximumValue ( );
__declspec(implementation_key(1293)) void IParameterFieldDefinition::PutMaximumValue ( const _variant_t & pMaximumValue );
__declspec(implementation_key(1294)) _bstr_t IParameterFieldDefinition::GetEditMask ( );
__declspec(implementation_key(1295)) void IParameterFieldDefinition::PutEditMask ( _bstr_t ppEditMask );
__declspec(implementation_key(1296)) enum CRParameterFieldType IParameterFieldDefinition::GetParameterType ( );
__declspec(implementation_key(1297)) VARIANT_BOOL IParameterFieldDefinition::GetDisallowEditing ( );
__declspec(implementation_key(1298)) void IParameterFieldDefinition::PutDisallowEditing ( VARIANT_BOOL pBool );
__declspec(implementation_key(1299)) short IParameterFieldDefinition::GetNumberOfDefaultValues ( );
__declspec(implementation_key(1300)) _variant_t IParameterFieldDefinition::GetNthDefaultValue ( short index );
__declspec(implementation_key(1301)) HRESULT IParameterFieldDefinition::SetNthDefaultValue ( short index, const _variant_t & nthDefaultValue );
__declspec(implementation_key(1302)) HRESULT IParameterFieldDefinition::AddDefaultValue ( const _variant_t & DefaultValue );
__declspec(implementation_key(1303)) HRESULT IParameterFieldDefinition::DeleteNthDefaultValue ( short index );
__declspec(implementation_key(1304)) VARIANT_BOOL IParameterFieldDefinition::GetEnableNullValue ( );
__declspec(implementation_key(1305)) void IParameterFieldDefinition::PutEnableNullValue ( VARIANT_BOOL pBool );
__declspec(implementation_key(1306)) VARIANT_BOOL IParameterFieldDefinition::GetEnableMultipleValues ( );
__declspec(implementation_key(1307)) void IParameterFieldDefinition::PutEnableMultipleValues ( VARIANT_BOOL pBool );
__declspec(implementation_key(1308)) enum CRDiscreteOrRangeKind IParameterFieldDefinition::GetDiscreteOrRangeKind ( );
__declspec(implementation_key(1309)) void IParameterFieldDefinition::PutDiscreteOrRangeKind ( enum CRDiscreteOrRangeKind pDiscreteOrRangeKind );
__declspec(implementation_key(1310)) VARIANT_BOOL IParameterFieldDefinition::GetPlaceInGroup ( );
__declspec(implementation_key(1311)) void IParameterFieldDefinition::PutPlaceInGroup ( VARIANT_BOOL pBool );
__declspec(implementation_key(1312)) short IParameterFieldDefinition::GetGroupNumber ( );
__declspec(implementation_key(1313)) void IParameterFieldDefinition::PutGroupNumber ( short pGroupNumber );
__declspec(implementation_key(1314)) VARIANT_BOOL IParameterFieldDefinition::GetEnableExclusiveGroup ( );
__declspec(implementation_key(1315)) void IParameterFieldDefinition::PutEnableExclusiveGroup ( VARIANT_BOOL pBool );
__declspec(implementation_key(1316)) short IParameterFieldDefinition::GetNumberOfCurrentValues ( );
__declspec(implementation_key(1317)) short IParameterFieldDefinition::GetNumberOfCurrentRanges ( );
__declspec(implementation_key(1318)) _variant_t IParameterFieldDefinition::GetNthCurrentValue ( short index );
__declspec(implementation_key(1319)) HRESULT IParameterFieldDefinition::AddCurrentValue ( const _variant_t & CurrentValue );
__declspec(implementation_key(1320)) HRESULT IParameterFieldDefinition::GetNthCurrentRange ( short index, VARIANT * pStart, VARIANT * pEnd, enum CRRangeInfo * pRangeInfo );
__declspec(implementation_key(1321)) HRESULT IParameterFieldDefinition::AddCurrentRange ( const _variant_t & start, const _variant_t & end, enum CRRangeInfo rangeInfo );
__declspec(implementation_key(1322)) HRESULT IParameterFieldDefinition::ClearCurrentValueAndRange ( );
__declspec(implementation_key(1323)) _bstr_t IParameterFieldDefinition::GetNthValueDescription ( short index );
__declspec(implementation_key(1324)) void IParameterFieldDefinition::PutNthValueDescription ( short index, _bstr_t pValueDescription );
__declspec(implementation_key(1325)) VARIANT_BOOL IParameterFieldDefinition::GetEnableShowDescriptionOnly ( );
__declspec(implementation_key(1326)) void IParameterFieldDefinition::PutEnableShowDescriptionOnly ( VARIANT_BOOL pBool );
__declspec(implementation_key(1327)) enum CRParameterPicklistSortMethod IParameterFieldDefinition::GetPicklistSortMethod ( );
__declspec(implementation_key(1328)) void IParameterFieldDefinition::PutPicklistSortMethod ( enum CRParameterPicklistSortMethod pMethod );
__declspec(implementation_key(1329)) VARIANT_BOOL IParameterFieldDefinition::GetEnableSortBasedOnDesc ( );
__declspec(implementation_key(1330)) void IParameterFieldDefinition::PutEnableSortBasedOnDesc ( VARIANT_BOOL pBool );
__declspec(implementation_key(1331)) IUnknownPtr IGroupNameFieldDefinitions::Get_NewEnum ( );
__declspec(implementation_key(1332)) IGroupNameFieldDefinitionPtr IGroupNameFieldDefinitions::GetItem ( long index );
__declspec(implementation_key(1333)) long IGroupNameFieldDefinitions::GetCount ( );
__declspec(implementation_key(1334)) IReportPtr IGroupNameFieldDefinitions::GetParent ( );
__declspec(implementation_key(1335)) enum CRFieldKind IGroupNameFieldDefinition::GetKind ( );
__declspec(implementation_key(1336)) CRFieldValueType IGroupNameFieldDefinition::GetValueType ( );
__declspec(implementation_key(1337)) short IGroupNameFieldDefinition::GetNumberOfBytes ( );
__declspec(implementation_key(1338)) _bstr_t IGroupNameFieldDefinition::GetName ( );
__declspec(implementation_key(1339)) _variant_t IGroupNameFieldDefinition::GetValue ( );
__declspec(implementation_key(1340)) _bstr_t IGroupNameFieldDefinition::GetGroupNameFieldName ( );
__declspec(implementation_key(1341)) IReportPtr IGroupNameFieldDefinition::GetParent ( );
__declspec(implementation_key(1342)) _variant_t IGroupNameFieldDefinition::GetPreviousValue ( );
__declspec(implementation_key(1343)) _variant_t IGroupNameFieldDefinition::GetNextValue ( );
__declspec(implementation_key(1344)) short IGroupNameFieldDefinition::GetGroupNumber ( );
__declspec(implementation_key(1345)) _bstr_t IGroupNameFieldDefinition::GetGroupNameConditionFormula ( );
__declspec(implementation_key(1346)) void IGroupNameFieldDefinition::PutGroupNameConditionFormula ( _bstr_t pVal );
__declspec(implementation_key(1347)) IUnknownPtr ISummaryFieldDefinitions::Get_NewEnum ( );
__declspec(implementation_key(1348)) ISummaryFieldDefinitionPtr ISummaryFieldDefinitions::GetItem ( long index );
__declspec(implementation_key(1349)) long ISummaryFieldDefinitions::GetCount ( );
__declspec(implementation_key(1350)) IReportPtr ISummaryFieldDefinitions::GetParent ( );
__declspec(implementation_key(1351)) ISummaryFieldDefinitionPtr ISummaryFieldDefinitions::Add ( long groupLevel, const _variant_t & Field, enum CRSummaryType SummaryType, const _variant_t & secondSummaryFieldOrFactor );
__declspec(implementation_key(1352)) HRESULT ISummaryFieldDefinitions::Delete ( const _variant_t & index );
__declspec(implementation_key(1353)) enum CRImageType IPageEngine::GetImageOptions ( );
__declspec(implementation_key(1354)) void IPageEngine::PutImageOptions ( enum CRImageType pImageOptions );
__declspec(implementation_key(1355)) IPageGeneratorPtr IPageEngine::CreatePageGenerator ( const _variant_t & GroupPath, const _variant_t & DrillDownLevel );
__declspec(implementation_key(1356)) _variant_t IPageEngine::RenderTotallerETF ( const _variant_t & rootGroupPath, long startingChildNumber, short pastRootLevels, const _variant_t & maxNodeCount, enum CRRenderResultType resultType );
__declspec(implementation_key(1357)) _variant_t IPageEngine::RenderTotallerHTML ( const _variant_t & rootGroupPath, long startingChildNumber, short pastRootLevels, const _variant_t & maxNodeCount, const _variant_t & openGroupPath, VARIANT_BOOL includeDrillDownLinks, _bstr_t baseURL, enum CRRenderResultType resultType );
__declspec(implementation_key(1358)) IReportPtr IPageEngine::GetParent ( );
__declspec(implementation_key(1359)) enum CRPlaceHolderType IPageEngine::GetPlaceHolderOptions ( );
__declspec(implementation_key(1360)) void IPageEngine::PutPlaceHolderOptions ( enum CRPlaceHolderType pPlaceHolderType );
__declspec(implementation_key(1361)) enum CRValueFormatType IPageEngine::GetValueFormatOptions ( );
__declspec(implementation_key(1362)) void IPageEngine::PutValueFormatOptions ( enum CRValueFormatType pValueFormatType );
__declspec(implementation_key(1363)) IPageEnginePtr IPageGenerator::GetParent ( );
__declspec(implementation_key(1364)) IPagesPtr IPageGenerator::GetPages ( );
__declspec(implementation_key(1365)) short IPageGenerator::GetDrillDownLevel ( );
__declspec(implementation_key(1366)) _variant_t IPageGenerator::GetGroupPath ( );
__declspec(implementation_key(1367)) long IPageGenerator::GetPageNumberForGroup ( const _variant_t & GroupPath );
__declspec(implementation_key(1368)) IPageGeneratorPtr IPageGenerator::DrillOnGraph ( long PageNumber, long xOffset, long yOffset );
__declspec(implementation_key(1369)) HRESULT IPageGenerator::SearchForText ( _bstr_t Text, enum CRSearchDirection direction, long * pPageNumber );
__declspec(implementation_key(1370)) _bstr_t IPageGenerator::GetGroupName ( );
__declspec(implementation_key(1371)) _bstr_t IPageGenerator::GetReportName ( );
__declspec(implementation_key(1372)) long IPageGenerator::GetContainingPageNumber ( );
__declspec(implementation_key(1373)) _variant_t IPageGenerator::GetContainingGroupPath ( );
__declspec(implementation_key(1374)) _bstr_t IPageGenerator::GetContainingGroupName ( );
__declspec(implementation_key(1375)) long IPageGenerator::GetxOffset ( );
__declspec(implementation_key(1376)) long IPageGenerator::GetyOffset ( );
__declspec(implementation_key(1377)) _variant_t IPageGenerator::RenderTotallerETF ( const _variant_t & rootGroupPath, long startingChildNumber, short pastRootLevels, const _variant_t & maxNodeCount, enum CRRenderResultType resultType );
__declspec(implementation_key(1378)) _variant_t IPageGenerator::RenderTotallerHTML ( const _variant_t & rootGroupPath, long startingChildNumber, short pastRootLevels, const _variant_t & maxNodeCount, const _variant_t & openGroupPath, VARIANT_BOOL includeDrillDownLinks, _bstr_t baseURL, enum CRRenderResultType resultType );
__declspec(implementation_key(1379)) IPageGeneratorPtr IPageGenerator::DrillOnMap ( long PageNumber, long xOffset, long yOffset );
__declspec(implementation_key(1380)) IPageGeneratorPtr IPageGenerator::DrillOnSubreport ( long PageNumber, long xOffset, long yOffset );
__declspec(implementation_key(1381)) _variant_t IPageGenerator::Export ( enum CRRenderResultType resultType );
__declspec(implementation_key(1382)) IPageGeneratorPtr IPageGenerator::CreateSubreportPageGenerator ( const _variant_t & GroupPath, const _variant_t & DrillDownLevel );
__declspec(implementation_key(1383)) VARIANT_BOOL IPageGenerator::FindText ( _bstr_t Text, enum CRSearchDirection direction, VARIANT * pPageNumber );
__declspec(implementation_key(1384)) IUnknownPtr IPages::Get_NewEnum ( );
__declspec(implementation_key(1385)) IPagePtr IPages::GetItem ( long index );
__declspec(implementation_key(1386)) long IPages::GetCount ( );
__declspec(implementation_key(1387)) IPageGeneratorPtr IPages::GetParent ( );
__declspec(implementation_key(1388)) IPageGeneratorPtr IPage::GetParent ( );
__declspec(implementation_key(1389)) long IPage::GetPageNumber ( );
__declspec(implementation_key(1390)) VARIANT_BOOL IPage::GetIsLastPage ( );
__declspec(implementation_key(1391)) _variant_t IPage::RenderEPF ( enum CRRenderResultType resultType );
__declspec(implementation_key(1392)) _variant_t IPage::RenderHTML ( VARIANT_BOOL includeDrillDownLinks, enum CRHTMLPageStyle pageStyle, enum CRHTMLToolbarStyle toolbarStyle, _bstr_t baseURL, enum CRRenderResultType resultType );
__declspec(implementation_key(1393)) VARIANT_BOOL IPage::GetIsMissingTotalPageCount ( );
__declspec(implementation_key(1394)) IReportPtr IExportOptions::GetParent ( );
__declspec(implementation_key(1395)) enum CRExportFormatType IExportOptions::GetFormatType ( );
__declspec(implementation_key(1396)) void IExportOptions::PutFormatType ( enum CRExportFormatType pFormatType );
__declspec(implementation_key(1397)) enum CRExportDestinationType IExportOptions::GetDestinationType ( );
__declspec(implementation_key(1398)) void IExportOptions::PutDestinationType ( enum CRExportDestinationType pDestinationType );
__declspec(implementation_key(1399)) _bstr_t IExportOptions::GetExchangeProfile ( );
__declspec(implementation_key(1400)) void IExportOptions::PutExchangeProfile ( _bstr_t ppExchangeProfile );
__declspec(implementation_key(1401)) _bstr_t IExportOptions::GetDiskFileName ( );
__declspec(implementation_key(1402)) void IExportOptions::PutDiskFileName ( _bstr_t ppDiskFileName );
__declspec(implementation_key(1403)) VARIANT_BOOL IExportOptions::GetUseReportDateFormat ( );
__declspec(implementation_key(1404)) void IExportOptions::PutUseReportDateFormat ( VARIANT_BOOL pBool );
__declspec(implementation_key(1405)) VARIANT_BOOL IExportOptions::GetUseReportNumberFormat ( );
__declspec(implementation_key(1406)) void IExportOptions::PutUseReportNumberFormat ( VARIANT_BOOL pBool );
__declspec(implementation_key(1407)) _bstr_t IExportOptions::GetCharFieldDelimiter ( );
__declspec(implementation_key(1408)) void IExportOptions::PutCharFieldDelimiter ( _bstr_t ppCharFieldDelimiter );
__declspec(implementation_key(1409)) _bstr_t IExportOptions::GetCharStringDelimiter ( );
__declspec(implementation_key(1410)) void IExportOptions::PutCharStringDelimiter ( _bstr_t ppCharStringDelimiter );
__declspec(implementation_key(1411)) short IExportOptions::GetNumberOfLinesPerPage ( );
__declspec(implementation_key(1412)) void IExportOptions::PutNumberOfLinesPerPage ( short pNumberOfLinesPerPage );
__declspec(implementation_key(1413)) _bstr_t IExportOptions::GetODBCDataSourceName ( );
__declspec(implementation_key(1414)) void IExportOptions::PutODBCDataSourceName ( _bstr_t ppODBCDataSourceName );
__declspec(implementation_key(1415)) _bstr_t IExportOptions::GetODBCDataSourceUserID ( );
__declspec(implementation_key(1416)) void IExportOptions::PutODBCDataSourceUserID ( _bstr_t ppODBCDataSourceUserID );
__declspec(implementation_key(1417)) void IExportOptions::PutODBCDataSourcePassword ( _bstr_t _arg1 );
__declspec(implementation_key(1418)) _bstr_t IExportOptions::GetODBCExportTableName ( );
__declspec(implementation_key(1419)) void IExportOptions::PutODBCExportTableName ( _bstr_t ppODBCExportTableName );
__declspec(implementation_key(1420)) _bstr_t IExportOptions::GetHTMLFileName ( );
__declspec(implementation_key(1421)) void IExportOptions::PutHTMLFileName ( _bstr_t ppHTMLFileName );
__declspec(implementation_key(1422)) void IExportOptions::PutExchangePassword ( _bstr_t _arg1 );
__declspec(implementation_key(1423)) enum CRExchangeDestinationType IExportOptions::GetExchangeDestinationType ( );
__declspec(implementation_key(1424)) void IExportOptions::PutExchangeDestinationType ( enum CRExchangeDestinationType pExchangeDestinationType );
__declspec(implementation_key(1425)) _bstr_t IExportOptions::GetExchangeFolderPath ( );
__declspec(implementation_key(1426)) void IExportOptions::PutExchangeFolderPath ( _bstr_t ppExchangeFolderPath );
__declspec(implementation_key(1427)) _bstr_t IExportOptions::GetMailCcList ( );
__declspec(implementation_key(1428)) void IExportOptions::PutMailCcList ( _bstr_t ppMailCcList );
__declspec(implementation_key(1429)) _bstr_t IExportOptions::GetMailToList ( );
__declspec(implementation_key(1430)) void IExportOptions::PutMailToList ( _bstr_t ppMailToList );
__declspec(implementation_key(1431)) _bstr_t IExportOptions::GetMailSubject ( );
__declspec(implementation_key(1432)) void IExportOptions::PutMailSubject ( _bstr_t ppMailSubject );
__declspec(implementation_key(1433)) _bstr_t IExportOptions::GetMailMessage ( );
__declspec(implementation_key(1434)) void IExportOptions::PutMailMessage ( _bstr_t ppMailMessage );
__declspec(implementation_key(1435)) _bstr_t IExportOptions::GetMailBccList ( );
__declspec(implementation_key(1436)) void IExportOptions::PutMailBccList ( _bstr_t ppMailBccList );
__declspec(implementation_key(1437)) _bstr_t IExportOptions::GetFormatDllName ( );
__declspec(implementation_key(1438)) _bstr_t IExportOptions::GetDestinationDllName ( );
__declspec(implementation_key(1439)) VARIANT_BOOL IExportOptions::GetExchangeTabHasColumnHeadings ( );
__declspec(implementation_key(1440)) void IExportOptions::PutExchangeTabHasColumnHeadings ( VARIANT_BOOL pBool );
__declspec(implementation_key(1441)) HRESULT IExportOptions::Reset ( );
__declspec(implementation_key(1442)) HRESULT IExportOptions::PromptForExportOptions ( );
__declspec(implementation_key(1443)) VARIANT_BOOL IExportOptions::GetExcelTabHasColumnHeadings ( );
__declspec(implementation_key(1444)) void IExportOptions::PutExcelTabHasColumnHeadings ( VARIANT_BOOL pBool );
__declspec(implementation_key(1445)) VARIANT_BOOL IExportOptions::GetExcelUseWorksheetFunctions ( );
__declspec(implementation_key(1446)) void IExportOptions::PutExcelUseWorksheetFunctions ( VARIANT_BOOL pBool );
__declspec(implementation_key(1447)) VARIANT_BOOL IExportOptions::GetExcelUseConstantColumnWidth ( );
__declspec(implementation_key(1448)) void IExportOptions::PutExcelUseConstantColumnWidth ( VARIANT_BOOL pBool );
__declspec(implementation_key(1449)) double IExportOptions::GetExcelConstantColumnWidth ( );
__declspec(implementation_key(1450)) void IExportOptions::PutExcelConstantColumnWidth ( double pColWidth );
__declspec(implementation_key(1451)) enum CRAreaKind IExportOptions::GetExcelAreaType ( );
__declspec(implementation_key(1452)) void IExportOptions::PutExcelAreaType ( enum CRAreaKind pAreaKind );
__declspec(implementation_key(1453)) short IExportOptions::GetExcelAreaGroupNumber ( );
__declspec(implementation_key(1454)) void IExportOptions::PutExcelAreaGroupNumber ( short pGroupNumber );
__declspec(implementation_key(1455)) VARIANT_BOOL IExportOptions::GetExcelUseTabularFormat ( );
__declspec(implementation_key(1456)) void IExportOptions::PutExcelUseTabularFormat ( VARIANT_BOOL pBool );
__declspec(implementation_key(1457)) _bstr_t IExportOptions::GetApplicationFileName ( );
__declspec(implementation_key(1458)) void IExportOptions::PutApplicationFileName ( _bstr_t ppAppFileName );
__declspec(implementation_key(1459)) _bstr_t IExportOptions::GetLotusDominoDatabaseName ( );
__declspec(implementation_key(1460)) void IExportOptions::PutLotusDominoDatabaseName ( _bstr_t ppLotusDominoDatabaseName );
__declspec(implementation_key(1461)) _bstr_t IExportOptions::GetLotusDominoFormName ( );
__declspec(implementation_key(1462)) void IExportOptions::PutLotusDominoFormName ( _bstr_t ppLotusDominoFormName );
__declspec(implementation_key(1463)) _bstr_t IExportOptions::GetLotusDominoComments ( );
__declspec(implementation_key(1464)) void IExportOptions::PutLotusDominoComments ( _bstr_t ppLotusDominoComments );
__declspec(implementation_key(1465)) VARIANT_BOOL IExportOptions::GetHTMLEnableSeparatedPages ( );
__declspec(implementation_key(1466)) void IExportOptions::PutHTMLEnableSeparatedPages ( VARIANT_BOOL pBool );
__declspec(implementation_key(1467)) VARIANT_BOOL IExportOptions::GetHTMLHasPageNavigator ( );
__declspec(implementation_key(1468)) void IExportOptions::PutHTMLHasPageNavigator ( VARIANT_BOOL pBool );
__declspec(implementation_key(1469)) VARIANT_BOOL IExportOptions::GetPDFExportAllPages ( );
__declspec(implementation_key(1470)) void IExportOptions::PutPDFExportAllPages ( VARIANT_BOOL pBool );
__declspec(implementation_key(1471)) long IExportOptions::GetPDFFirstPageNumber ( );
__declspec(implementation_key(1472)) void IExportOptions::PutPDFFirstPageNumber ( long pFirstPageNumber );
__declspec(implementation_key(1473)) long IExportOptions::GetPDFLastPageNumber ( );
__declspec(implementation_key(1474)) void IExportOptions::PutPDFLastPageNumber ( long pLastPageNumber );
__declspec(implementation_key(1475)) VARIANT_BOOL IExportOptions::GetRTFExportAllPages ( );
__declspec(implementation_key(1476)) void IExportOptions::PutRTFExportAllPages ( VARIANT_BOOL pBool );
__declspec(implementation_key(1477)) long IExportOptions::GetRTFFirstPageNumber ( );
__declspec(implementation_key(1478)) void IExportOptions::PutRTFFirstPageNumber ( long pFirstPageNumber );
__declspec(implementation_key(1479)) long IExportOptions::GetRTFLastPageNumber ( );
__declspec(implementation_key(1480)) void IExportOptions::PutRTFLastPageNumber ( long pLastPageNumber );
__declspec(implementation_key(1481)) _bstr_t IExportOptions::GetXMLFileName ( );
__declspec(implementation_key(1482)) void IExportOptions::PutXMLFileName ( _bstr_t ppXMLFileName );
__declspec(implementation_key(1483)) VARIANT_BOOL IExportOptions::GetXMLAllowMultipleFiles ( );
__declspec(implementation_key(1484)) void IExportOptions::PutXMLAllowMultipleFiles ( VARIANT_BOOL pBool );
__declspec(implementation_key(1485)) VARIANT_BOOL IExportOptions::GetWORDWExportAllPages ( );
__declspec(implementation_key(1486)) void IExportOptions::PutWORDWExportAllPages ( VARIANT_BOOL pBool );
__declspec(implementation_key(1487)) long IExportOptions::GetWORDWFirstPageNumber ( );
__declspec(implementation_key(1488)) void IExportOptions::PutWORDWFirstPageNumber ( long pFirstPageNumber );
__declspec(implementation_key(1489)) long IExportOptions::GetWORDWLastPageNumber ( );
__declspec(implementation_key(1490)) void IExportOptions::PutWORDWLastPageNumber ( long pLastPageNumber );
__declspec(implementation_key(1491)) VARIANT_BOOL IExportOptions::GetUseDefaultCharactersPerInch ( );
__declspec(implementation_key(1492)) void IExportOptions::PutUseDefaultCharactersPerInch ( VARIANT_BOOL pBool );
__declspec(implementation_key(1493)) long IExportOptions::GetUserDefinedCharactersPerInch ( );
__declspec(implementation_key(1494)) void IExportOptions::PutUserDefinedCharactersPerInch ( long pUserDefinedCPI );
__declspec(implementation_key(1495)) void IExportOptions::PutExcelPageBreaks ( VARIANT_BOOL pBool );
__declspec(implementation_key(1496)) VARIANT_BOOL IExportOptions::GetExcelPageBreaks ( );
__declspec(implementation_key(1497)) void IExportOptions::PutExcelConvertDateToString ( VARIANT_BOOL pBool );
__declspec(implementation_key(1498)) VARIANT_BOOL IExportOptions::GetExcelConvertDateToString ( );
__declspec(implementation_key(1499)) VARIANT_BOOL IExportOptions::GetExcelExportAllPages ( );
__declspec(implementation_key(1500)) void IExportOptions::PutExcelExportAllPages ( VARIANT_BOOL pBool );
__declspec(implementation_key(1501)) long IExportOptions::GetExcelFirstPageNumber ( );
__declspec(implementation_key(1502)) void IExportOptions::PutExcelFirstPageNumber ( long pFirstPageNumber );
__declspec(implementation_key(1503)) long IExportOptions::GetExcelLastPageNumber ( );
__declspec(implementation_key(1504)) void IExportOptions::PutExcelLastPageNumber ( long pLastPageNumber );
__declspec(implementation_key(1505)) _bstr_t IExportOptions::GetMailUserName ( );
__declspec(implementation_key(1506)) void IExportOptions::PutMailUserName ( _bstr_t ppUserName );
__declspec(implementation_key(1507)) _bstr_t IExportOptions::GetMailPassword ( );
__declspec(implementation_key(1508)) void IExportOptions::PutMailPassword ( _bstr_t ppPassword );
__declspec(implementation_key(1509)) enum CRExcelExportPageAreaPair IExportOptions::GetExcelExportPageAreaPair ( );
__declspec(implementation_key(1510)) void IExportOptions::PutExcelExportPageAreaPair ( enum CRExcelExportPageAreaPair exportPageAreaPair );
__declspec(implementation_key(1511)) VARIANT_BOOL IExportOptions::GetExcelMaintainRelativeObjectPosition ( );
__declspec(implementation_key(1512)) void IExportOptions::PutExcelMaintainRelativeObjectPosition ( VARIANT_BOOL pBool );
__declspec(implementation_key(1513)) VARIANT_BOOL IExportOptions::GetExcelShowGridlines ( );
__declspec(implementation_key(1514)) void IExportOptions::PutExcelShowGridlines ( VARIANT_BOOL pBool );
__declspec(implementation_key(1515)) VARIANT_BOOL IExportOptions::GetExcelChopPageHeader ( );
__declspec(implementation_key(1516)) void IExportOptions::PutExcelChopPageHeader ( VARIANT_BOOL pBool );
__declspec(implementation_key(1517)) VARIANT_BOOL IExportOptions::GetExcelExportImagesInDataOnly ( );
__declspec(implementation_key(1518)) void IExportOptions::PutExcelExportImagesInDataOnly ( VARIANT_BOOL pBool );
__declspec(implementation_key(1519)) VARIANT_BOOL IExportOptions::GetExcelUseFormatInDataOnly ( );
__declspec(implementation_key(1520)) void IExportOptions::PutExcelUseFormatInDataOnly ( VARIANT_BOOL pBool );
__declspec(implementation_key(1521)) VARIANT_BOOL IExportOptions::GetExcelMaintainColumnAlignment ( );
__declspec(implementation_key(1522)) void IExportOptions::PutExcelMaintainColumnAlignment ( VARIANT_BOOL pBool );
__declspec(implementation_key(1523)) IReportPtr IApplication::OpenReport ( _bstr_t pFileName, const _variant_t & OpenMethod );
__declspec(implementation_key(1524)) VARIANT_BOOL IApplication::CanClose ( );
__declspec(implementation_key(1525)) HRESULT IApplication::LogOnServer ( _bstr_t pDllName, _bstr_t pServerName, const _variant_t & pDatabaseName, const _variant_t & pUserID, const _variant_t & pPassword );
__declspec(implementation_key(1526)) HRESULT IApplication::LogOffServer ( _bstr_t pDllName, _bstr_t pServerName, const _variant_t & pDatabaseName, const _variant_t & pUserID, const _variant_t & pPassword );
__declspec(implementation_key(1527)) HRESULT IApplication::SetMorePrintEngineErrorMessages ( VARIANT_BOOL bl );
__declspec(implementation_key(1528)) HRESULT IApplication::SetMatchLogOnInfo ( VARIANT_BOOL bl );
__declspec(implementation_key(1529)) IReportPtr IApplication::NewReport ( );
__declspec(implementation_key(1530)) short IApplication::GetVersion ( );
__declspec(implementation_key(1531)) HRESULT IApplication::LogOnServerEx ( _bstr_t pDllName, _bstr_t pServerName, const _variant_t & pDatabaseName, const _variant_t & pUserID, const _variant_t & pPassword, const _variant_t & pServerType, const _variant_t & pConnectionString );
__declspec(implementation_key(1532)) HRESULT IApplication::LogOnServerWithPrivateInfo ( _bstr_t pDllName, const _variant_t & privateInfo );
__declspec(implementation_key(1533)) VARIANT_BOOL IApplication::GetLicenseStatus ( VARIANT * pMaxLicenseNumber, VARIANT * pLicenseUsed );
__declspec(implementation_key(1534)) HRESULT IApplication::SetLicenseKeycode ( _bstr_t pKeycode );
__declspec(implementation_key(1535)) HRESULT IApplication::RunReportWizard ( struct IReport * pReport, const _variant_t & dataSource );
__declspec(implementation_key(1536)) IUnknownPtr ISortFields::Get_NewEnum ( );
__declspec(implementation_key(1537)) ISortFieldPtr ISortFields::GetItem ( long index );
__declspec(implementation_key(1538)) long ISortFields::GetCount ( );
__declspec(implementation_key(1539)) IReportPtr ISortFields::GetParent ( );
__declspec(implementation_key(1540)) HRESULT ISortFields::Add ( struct IFieldDefinition * pFieldDefinition, enum CRSortDirection SortDirection );
__declspec(implementation_key(1541)) HRESULT ISortFields::Delete ( long index );
__declspec(implementation_key(1542)) IReportPtr ISortField::GetParent ( );
__declspec(implementation_key(1543)) enum CRSortDirection ISortField::GetSortDirection ( );
__declspec(implementation_key(1544)) void ISortField::PutSortDirection ( enum CRSortDirection pSortDirection );
__declspec(implementation_key(1545)) IDispatchPtr ISortField::GetField ( );
__declspec(implementation_key(1546)) void ISortField::PutField ( IDispatch * ppField );
__declspec(implementation_key(1547)) IReportPtr IPrintingStatus::GetParent ( );
__declspec(implementation_key(1548)) long IPrintingStatus::GetNumberOfRecordRead ( );
__declspec(implementation_key(1549)) long IPrintingStatus::GetNumberOfRecordSelected ( );
__declspec(implementation_key(1550)) long IPrintingStatus::GetNumberOfRecordPrinted ( );
__declspec(implementation_key(1551)) enum CRPrintingProgress IPrintingStatus::GetProgress ( );
__declspec(implementation_key(1552)) long IPrintingStatus::GetNumberOfPages ( );
__declspec(implementation_key(1553)) IUnknownPtr IRunningTotalFieldDefinitions::Get_NewEnum ( );
__declspec(implementation_key(1554)) IRunningTotalFieldDefinitionPtr IRunningTotalFieldDefinitions::GetItem ( long index );
__declspec(implementation_key(1555)) long IRunningTotalFieldDefinitions::GetCount ( );
__declspec(implementation_key(1556)) IReportPtr IRunningTotalFieldDefinitions::GetParent ( );
__declspec(implementation_key(1557)) IRunningTotalFieldDefinitionPtr IRunningTotalFieldDefinitions::Add ( _bstr_t runningTotalName );
__declspec(implementation_key(1558)) HRESULT IRunningTotalFieldDefinitions::Delete ( const _variant_t & index );
__declspec(implementation_key(1559)) IRunningTotalFieldDefinitionPtr IRunningTotalFieldDefinitions::GetItemByName ( _bstr_t Name );
__declspec(implementation_key(1560)) enum CRFieldKind IRunningTotalFieldDefinition::GetKind ( );
__declspec(implementation_key(1561)) CRFieldValueType IRunningTotalFieldDefinition::GetValueType ( );
__declspec(implementation_key(1562)) short IRunningTotalFieldDefinition::GetNumberOfBytes ( );
__declspec(implementation_key(1563)) _bstr_t IRunningTotalFieldDefinition::GetName ( );
__declspec(implementation_key(1564)) _variant_t IRunningTotalFieldDefinition::GetValue ( );
__declspec(implementation_key(1565)) IReportPtr IRunningTotalFieldDefinition::GetParent ( );
__declspec(implementation_key(1566)) _variant_t IRunningTotalFieldDefinition::GetPreviousValue ( );
__declspec(implementation_key(1567)) _variant_t IRunningTotalFieldDefinition::GetNextValue ( );
__declspec(implementation_key(1568)) _bstr_t IRunningTotalFieldDefinition::GetRunningTotalFieldName ( );
__declspec(implementation_key(1569)) IDispatchPtr IRunningTotalFieldDefinition::GetSummarizedField ( );
__declspec(implementation_key(1570)) HRESULT IRunningTotalFieldDefinition::SetSummarizedField ( const _variant_t & SummarizedField );
__declspec(implementation_key(1571)) IDispatchPtr IRunningTotalFieldDefinition::GetSecondarySummarizedField ( );
__declspec(implementation_key(1572)) HRESULT IRunningTotalFieldDefinition::SetSecondarySummarizedField ( const _variant_t & secondarySummariedField );
__declspec(implementation_key(1573)) long IRunningTotalFieldDefinition::GetSummaryOperationParameter ( );
__declspec(implementation_key(1574)) void IRunningTotalFieldDefinition::PutSummaryOperationParameter ( long pOperationParameter );
__declspec(implementation_key(1575)) enum CRSummaryType IRunningTotalFieldDefinition::GetSummaryType ( );
__declspec(implementation_key(1576)) void IRunningTotalFieldDefinition::PutSummaryType ( enum CRSummaryType pSummaryType );
__declspec(implementation_key(1577)) enum CRRunningTotalCondition IRunningTotalFieldDefinition::GetEvaluateCondition ( );
__declspec(implementation_key(1578)) HRESULT IRunningTotalFieldDefinition::SetNoEvaluateCondition ( );
__declspec(implementation_key(1579)) enum CRRunningTotalCondition IRunningTotalFieldDefinition::GetResetCondition ( );
__declspec(implementation_key(1580)) HRESULT IRunningTotalFieldDefinition::SetNoResetCondition ( );
__declspec(implementation_key(1581)) short IRunningTotalFieldDefinition::GetEvaluateGroupNumber ( );
__declspec(implementation_key(1582)) void IRunningTotalFieldDefinition::PutEvaluateGroupNumber ( short pEvaluateGroupNumber );
__declspec(implementation_key(1583)) short IRunningTotalFieldDefinition::GetResetGroupNumber ( );
__declspec(implementation_key(1584)) void IRunningTotalFieldDefinition::PutResetGroupNumber ( short pResetGroupNumber );
__declspec(implementation_key(1585)) IDispatchPtr IRunningTotalFieldDefinition::GetEvaluateConditionField ( );
__declspec(implementation_key(1586)) HRESULT IRunningTotalFieldDefinition::SetEvaluateConditionField ( const _variant_t & pEvaluateConditionField );
__declspec(implementation_key(1587)) IDispatchPtr IRunningTotalFieldDefinition::GetResetConditionField ( );
__declspec(implementation_key(1588)) HRESULT IRunningTotalFieldDefinition::SetResetConditionField ( const _variant_t & pResetConditionField );
__declspec(implementation_key(1589)) _bstr_t IRunningTotalFieldDefinition::GetEvaluateConditionFormula ( );
__declspec(implementation_key(1590)) void IRunningTotalFieldDefinition::PutEvaluateConditionFormula ( _bstr_t ppText );
__declspec(implementation_key(1591)) _bstr_t IRunningTotalFieldDefinition::GetResetConditionFormula ( );
__declspec(implementation_key(1592)) void IRunningTotalFieldDefinition::PutResetConditionFormula ( _bstr_t ppText );
__declspec(implementation_key(1593)) enum CRHierarchicalSummaryType IRunningTotalFieldDefinition::GetHierarchicalSummaryType ( );
__declspec(implementation_key(1594)) void IRunningTotalFieldDefinition::PutHierarchicalSummaryType ( enum CRHierarchicalSummaryType pHierarchicalType );
__declspec(implementation_key(1595)) IUnknownPtr ISQLExpressionFieldDefinitions::Get_NewEnum ( );
__declspec(implementation_key(1596)) ISQLExpressionFieldDefinitionPtr ISQLExpressionFieldDefinitions::GetItem ( long index );
__declspec(implementation_key(1597)) long ISQLExpressionFieldDefinitions::GetCount ( );
__declspec(implementation_key(1598)) IReportPtr ISQLExpressionFieldDefinitions::GetParent ( );
__declspec(implementation_key(1599)) ISQLExpressionFieldDefinitionPtr ISQLExpressionFieldDefinitions::Add ( _bstr_t SQLExpressionName, _bstr_t Text );
__declspec(implementation_key(1600)) HRESULT ISQLExpressionFieldDefinitions::Delete ( const _variant_t & index );
__declspec(implementation_key(1601)) ISQLExpressionFieldDefinitionPtr ISQLExpressionFieldDefinitions::GetItemByName ( _bstr_t Name );
__declspec(implementation_key(1602)) enum CRFieldKind ISQLExpressionFieldDefinition::GetKind ( );
__declspec(implementation_key(1603)) CRFieldValueType ISQLExpressionFieldDefinition::GetValueType ( );
__declspec(implementation_key(1604)) short ISQLExpressionFieldDefinition::GetNumberOfBytes ( );
__declspec(implementation_key(1605)) _bstr_t ISQLExpressionFieldDefinition::GetName ( );
__declspec(implementation_key(1606)) _variant_t ISQLExpressionFieldDefinition::GetValue ( );
__declspec(implementation_key(1607)) IReportPtr ISQLExpressionFieldDefinition::GetParent ( );
__declspec(implementation_key(1608)) _variant_t ISQLExpressionFieldDefinition::GetPreviousValue ( );
__declspec(implementation_key(1609)) _variant_t ISQLExpressionFieldDefinition::GetNextValue ( );
__declspec(implementation_key(1610)) _bstr_t ISQLExpressionFieldDefinition::GetSQLExpressionFieldName ( );
__declspec(implementation_key(1611)) _bstr_t ISQLExpressionFieldDefinition::GetText ( );
__declspec(implementation_key(1612)) void ISQLExpressionFieldDefinition::PutText ( _bstr_t ppText );
__declspec(implementation_key(1613)) HRESULT ISQLExpressionFieldDefinition::Check ( VARIANT_BOOL * pBool, BSTR * ppErrorString );
__declspec(implementation_key(1614)) IUnknownPtr IReportAlerts::Get_NewEnum ( );
__declspec(implementation_key(1615)) IReportAlertPtr IReportAlerts::GetItem ( const _variant_t & index );
__declspec(implementation_key(1616)) long IReportAlerts::GetCount ( );
__declspec(implementation_key(1617)) IReportPtr IReportAlerts::GetParent ( );
__declspec(implementation_key(1618)) IReportAlertPtr IReportAlerts::Add ( _bstr_t Name, _bstr_t DefaultMessage, VARIANT_BOOL IsEnabled, _bstr_t ConditionFormula, _bstr_t MessageFormula );
__declspec(implementation_key(1619)) HRESULT IReportAlerts::Delete ( const _variant_t & index );
__declspec(implementation_key(1620)) IReportPtr IReportAlert::GetParent ( );
__declspec(implementation_key(1621)) _bstr_t IReportAlert::GetName ( );
__declspec(implementation_key(1622)) void IReportAlert::PutName ( _bstr_t ppName );
__declspec(implementation_key(1623)) _bstr_t IReportAlert::GetDefaultMessage ( );
__declspec(implementation_key(1624)) void IReportAlert::PutDefaultMessage ( _bstr_t ppMessage );
__declspec(implementation_key(1625)) VARIANT_BOOL IReportAlert::GetIsEnabled ( );
__declspec(implementation_key(1626)) void IReportAlert::PutIsEnabled ( VARIANT_BOOL pBool );
__declspec(implementation_key(1627)) _bstr_t IReportAlert::GetConditionFormula ( );
__declspec(implementation_key(1628)) void IReportAlert::PutConditionFormula ( _bstr_t ppText );
__declspec(implementation_key(1629)) _bstr_t IReportAlert::GetMessageFormula ( );
__declspec(implementation_key(1630)) void IReportAlert::PutMessageFormula ( _bstr_t ppText );
__declspec(implementation_key(1631)) IReportAlertInstancesPtr IReportAlert::GetAlertInstances ( );
__declspec(implementation_key(1632)) IUnknownPtr IReportAlertInstances::Get_NewEnum ( );
__declspec(implementation_key(1633)) IReportAlertInstancePtr IReportAlertInstances::GetItem ( long index );
__declspec(implementation_key(1634)) long IReportAlertInstances::GetCount ( );
__declspec(implementation_key(1635)) IReportAlertPtr IReportAlertInstances::GetParent ( );
__declspec(implementation_key(1636)) IReportAlertPtr IReportAlertInstance::GetParent ( );
__declspec(implementation_key(1637)) _bstr_t IReportAlertInstance::GetAlertMessage ( );
__declspec(implementation_key(1638)) HRESULT ICrystalReportSource::GetPage ( long lCookie, _bstr_t bstrBranch, _bstr_t bstrFormula, long lPageNumber, short DrillDownLevel );
__declspec(implementation_key(1639)) HRESULT ICrystalReportSource::GetTotaller ( long lCookie, _bstr_t bstrBranch, _bstr_t bstrFormula, _bstr_t bstrRootGroup, long lStartFrom, short nLevelsPastRoot, const _variant_t & vtMaxNodeCount );
__declspec(implementation_key(1640)) HRESULT ICrystalReportSource::GetLastPageNumber ( long lCookie, _bstr_t bstrBranch, _bstr_t bstrFormula, short DrillDownLevel );
__declspec(implementation_key(1641)) HRESULT ICrystalReportSource::FindGroup ( long lCookie, _bstr_t bstrBranch, _bstr_t bstrFormula, _bstr_t bstrGroupPath, short DrillDownLevel );
__declspec(implementation_key(1642)) HRESULT ICrystalReportSource::FindText ( long lCookie, _bstr_t bstrBranch, _bstr_t bstrFormula, long lFromPage, long lFromInstance, _bstr_t bstrText, enum CRSearchDirection nMode, short DrillDownLevel );
__declspec(implementation_key(1643)) HRESULT ICrystalReportSource::DrillGraph ( long lCookie, _bstr_t bstrBranch, _bstr_t bstrFormula, long lPageNumber, long xOffset, long yOffset, short DrillDownLevel );
__declspec(implementation_key(1644)) HRESULT ICrystalReportSource::Refresh ( long lCookie );
__declspec(implementation_key(1645)) HRESULT ICrystalReportSource::Cancel ( long lCookie );
__declspec(implementation_key(1646)) _bstr_t ICrystalReportProperties::GetTitle ( );
__declspec(implementation_key(1647)) enum CRImageType ICrystalReportSourceProperties::GetImageType ( );
__declspec(implementation_key(1648)) VARIANT_BOOL ICrystalReportSourceProperties::SupportsSelectionFormula ( );
__declspec(implementation_key(1649)) VARIANT_BOOL ICrystalReportSourceProperties2::SupportsExport ( );
__declspec(implementation_key(1650)) VARIANT_BOOL ICrystalReportSourceProperties2::SupportsSearchExpert ( );
__declspec(implementation_key(1651)) HRESULT ICrystalReportSourceProperties3::SetContainer ( IUnknown * newVal );
__declspec(implementation_key(1652)) VARIANT_BOOL ICrystalReportSourceProperties4::SupportsExportInDrilldownViews ( );
__declspec(implementation_key(1653)) HRESULT ICrystalReportSourceProperties4::RequestSmartImageHandling ( VARIANT_BOOL newVal );
__declspec(implementation_key(1654)) VARIANT_BOOL ICrystalReportSourceProperties4::SupportsExportPageRanges ( );
__declspec(implementation_key(1655)) HRESULT ICrystalReportPrinterPort::Print ( _bstr_t pBstrBranch, short DrillDownLevel );
__declspec(implementation_key(1656)) _bstr_t ICrystalReportPrinterPort::GetPrinterName ( );
__declspec(implementation_key(1657)) _bstr_t ICrystalReportPrinterPort::GetDriverName ( );
__declspec(implementation_key(1658)) _bstr_t ICrystalReportPrinterPort::GetPortName ( );
__declspec(implementation_key(1659)) enum CRPaperOrientation ICrystalReportPrinterPort::GetPaperOrientation ( );
__declspec(implementation_key(1660)) enum CRPaperSize ICrystalReportPrinterPort::GetPaperSize ( );
__declspec(implementation_key(1661)) HRESULT ICrystalReportPrinterPortEx::Print ( _bstr_t pBstrBranch, short DrillDownLevel, _bstr_t bstrSubreportContext );
__declspec(implementation_key(1662)) _bstr_t ICrystalReportPrinterPortEx::GetPrinterName ( );
__declspec(implementation_key(1663)) _bstr_t ICrystalReportPrinterPortEx::GetDriverName ( );
__declspec(implementation_key(1664)) _bstr_t ICrystalReportPrinterPortEx::GetPortName ( );
__declspec(implementation_key(1665)) enum CRPaperOrientation ICrystalReportPrinterPortEx::GetPaperOrientation ( );
__declspec(implementation_key(1666)) enum CRPaperSize ICrystalReportPrinterPortEx::GetPaperSize ( );
__declspec(implementation_key(1667)) HRESULT ICrystalReportSourceEvents::OnStartBinding ( long dwReserved );
__declspec(implementation_key(1668)) HRESULT ICrystalReportSourceEvents::OnStopBinding ( HRESULT hrStatus, _bstr_t bstrStatusText );
__declspec(implementation_key(1669)) HRESULT ICrystalReportSourceEvents::OnDataAvailable ( const _variant_t & vtDataDescription, const _variant_t & vtData, const _variant_t & vtParam );
__declspec(implementation_key(1670)) HRESULT ICrystalReportSourceEvents::OnProgress ( long ulProgress, long ulProgressMax, long ulStatusCode, _bstr_t szStatusText );
__declspec(implementation_key(1671)) HRESULT IReportEvent::NoData ( VARIANT_BOOL * pCancel );
__declspec(implementation_key(1672)) HRESULT IReportEvent::BeforeFormatPage ( long PageNumber );
__declspec(implementation_key(1673)) HRESULT IReportEvent::AfterFormatPage ( long PageNumber );
__declspec(implementation_key(1674)) HRESULT IReportEvent::FieldMapping ( VARIANT * reportFieldArray, const _variant_t & databaseFieldArray, VARIANT_BOOL * useDefault );
__declspec(implementation_key(1675)) HRESULT ICrystalReportExport::SetReportSource ( IUnknown * pNewVal );
__declspec(implementation_key(1676)) HRESULT ICrystalReportExport::Export ( unsigned int hWnd, _bstr_t pBstrBranch, _bstr_t bstrSubreportContext, _bstr_t pBstrFormula, const _variant_t & vtPromptingInfo );
__declspec(implementation_key(1677)) _bstr_t ICrystalReportExport::GetFileName ( );
__declspec(implementation_key(1678)) HRESULT ICrystalReportExport::SetFileName ( _bstr_t pNewVal );
__declspec(implementation_key(1679)) HRESULT ICrystalReportExport::GetExportType ( VARIANT * format, VARIANT * reserved );
__declspec(implementation_key(1680)) HRESULT ICrystalReportExport::SetExportType ( const _variant_t & format, const _variant_t & reserved );
__declspec(implementation_key(1681)) HRESULT ICrystalReportExportEvents::ExportCancelled ( );
__declspec(implementation_key(1682)) HRESULT ICrystalReportExportEvents::ExportFailed ( );
__declspec(implementation_key(1683)) HRESULT ICrystalReportExportEvents::ExportComplete ( _bstr_t pFileName, _bstr_t pFileType );
__declspec(implementation_key(1684)) HRESULT ISectionEvent::format ( IDispatch * pFormattingInfo );
__declspec(implementation_key(1685)) enum CRFieldKind ISpecialVarFieldDefinition::GetKind ( );
__declspec(implementation_key(1686)) CRFieldValueType ISpecialVarFieldDefinition::GetValueType ( );
__declspec(implementation_key(1687)) short ISpecialVarFieldDefinition::GetNumberOfBytes ( );
__declspec(implementation_key(1688)) _bstr_t ISpecialVarFieldDefinition::GetName ( );
__declspec(implementation_key(1689)) _variant_t ISpecialVarFieldDefinition::GetValue ( );
__declspec(implementation_key(1690)) enum CRSpecialVarType ISpecialVarFieldDefinition::GetspecialVarType ( );
__declspec(implementation_key(1691)) IReportPtr ISpecialVarFieldDefinition::GetParent ( );
__declspec(implementation_key(1692)) _variant_t ISpecialVarFieldDefinition::GetPreviousValue ( );
__declspec(implementation_key(1693)) _variant_t ISpecialVarFieldDefinition::GetNextValue ( );
__declspec(implementation_key(1694)) _bstr_t IMapObject::GetName ( );
__declspec(implementation_key(1695)) void IMapObject::PutName ( _bstr_t ppName );
__declspec(implementation_key(1696)) enum CRObjectKind IMapObject::GetKind ( );
__declspec(implementation_key(1697)) long IMapObject::GetLeft ( );
__declspec(implementation_key(1698)) void IMapObject::PutLeft ( long pLeft );
__declspec(implementation_key(1699)) long IMapObject::GetTop ( );
__declspec(implementation_key(1700)) void IMapObject::PutTop ( long pTop );
__declspec(implementation_key(1701)) long IMapObject::GetWidth ( );
__declspec(implementation_key(1702)) void IMapObject::PutWidth ( long pWidth );
__declspec(implementation_key(1703)) long IMapObject::GetHeight ( );
__declspec(implementation_key(1704)) void IMapObject::PutHeight ( long pHeight );
__declspec(implementation_key(1705)) enum CRLineStyle IMapObject::GetLeftLineStyle ( );
__declspec(implementation_key(1706)) void IMapObject::PutLeftLineStyle ( enum CRLineStyle pLeftLineStyle );
__declspec(implementation_key(1707)) enum CRLineStyle IMapObject::GetRightLineStyle ( );
__declspec(implementation_key(1708)) void IMapObject::PutRightLineStyle ( enum CRLineStyle pRightLineStyle );
__declspec(implementation_key(1709)) enum CRLineStyle IMapObject::GetTopLineStyle ( );
__declspec(implementation_key(1710)) void IMapObject::PutTopLineStyle ( enum CRLineStyle pTopLineStyle );
__declspec(implementation_key(1711)) enum CRLineStyle IMapObject::GetBottomLineStyle ( );
__declspec(implementation_key(1712)) void IMapObject::PutBottomLineStyle ( enum CRLineStyle pBottomLineStyle );
__declspec(implementation_key(1713)) VARIANT_BOOL IMapObject::GetHasDropShadow ( );
__declspec(implementation_key(1714)) void IMapObject::PutHasDropShadow ( VARIANT_BOOL pBool );
__declspec(implementation_key(1715)) OLE_COLOR IMapObject::GetBackColor ( );
__declspec(implementation_key(1716)) void IMapObject::PutBackColor ( OLE_COLOR pBackColor );
__declspec(implementation_key(1717)) OLE_COLOR IMapObject::GetBorderColor ( );
__declspec(implementation_key(1718)) void IMapObject::PutBorderColor ( OLE_COLOR pBorderColor );
__declspec(implementation_key(1719)) ISectionPtr IMapObject::GetParent ( );
__declspec(implementation_key(1720)) VARIANT_BOOL IMapObject::GetSuppress ( );
__declspec(implementation_key(1721)) void IMapObject::PutSuppress ( VARIANT_BOOL pBool );
__declspec(implementation_key(1722)) VARIANT_BOOL IMapObject::GetCloseAtPageBreak ( );
__declspec(implementation_key(1723)) void IMapObject::PutCloseAtPageBreak ( VARIANT_BOOL pBool );
__declspec(implementation_key(1724)) VARIANT_BOOL IMapObject::GetKeepTogether ( );
__declspec(implementation_key(1725)) void IMapObject::PutKeepTogether ( VARIANT_BOOL pBool );
__declspec(implementation_key(1726)) _bstr_t IMapObject::GetConditionFormula ( const _variant_t & FormulaType );
__declspec(implementation_key(1727)) void IMapObject::PutConditionFormula ( const _variant_t & FormulaType, _bstr_t pVal );
__declspec(implementation_key(1728)) _bstr_t IMapObject::GetCssClass ( );
__declspec(implementation_key(1729)) void IMapObject::PutCssClass ( _bstr_t ppCssClass );
__declspec(implementation_key(1730)) enum CRHyperlinkType IMapObject::GetHyperlinkType ( );
__declspec(implementation_key(1731)) void IMapObject::PutHyperlinkType ( enum CRHyperlinkType pType );
__declspec(implementation_key(1732)) _bstr_t IMapObject::GetHyperlinkText ( );
__declspec(implementation_key(1733)) void IMapObject::PutHyperlinkText ( _bstr_t pText );
__declspec(implementation_key(1734)) _bstr_t IOlapGridObject::GetName ( );
__declspec(implementation_key(1735)) void IOlapGridObject::PutName ( _bstr_t ppName );
__declspec(implementation_key(1736)) enum CRObjectKind IOlapGridObject::GetKind ( );
__declspec(implementation_key(1737)) long IOlapGridObject::GetLeft ( );
__declspec(implementation_key(1738)) void IOlapGridObject::PutLeft ( long pLeft );
__declspec(implementation_key(1739)) long IOlapGridObject::GetTop ( );
__declspec(implementation_key(1740)) void IOlapGridObject::PutTop ( long pTop );
__declspec(implementation_key(1741)) long IOlapGridObject::GetWidth ( );
__declspec(implementation_key(1742)) long IOlapGridObject::GetHeight ( );
__declspec(implementation_key(1743)) enum CRLineStyle IOlapGridObject::GetLeftLineStyle ( );
__declspec(implementation_key(1744)) void IOlapGridObject::PutLeftLineStyle ( enum CRLineStyle pLeftLineStyle );
__declspec(implementation_key(1745)) enum CRLineStyle IOlapGridObject::GetRightLineStyle ( );
__declspec(implementation_key(1746)) void IOlapGridObject::PutRightLineStyle ( enum CRLineStyle pRightLineStyle );
__declspec(implementation_key(1747)) enum CRLineStyle IOlapGridObject::GetTopLineStyle ( );
__declspec(implementation_key(1748)) void IOlapGridObject::PutTopLineStyle ( enum CRLineStyle pTopLineStyle );
__declspec(implementation_key(1749)) enum CRLineStyle IOlapGridObject::GetBottomLineStyle ( );
__declspec(implementation_key(1750)) void IOlapGridObject::PutBottomLineStyle ( enum CRLineStyle pBottomLineStyle );
__declspec(implementation_key(1751)) VARIANT_BOOL IOlapGridObject::GetHasDropShadow ( );
__declspec(implementation_key(1752)) void IOlapGridObject::PutHasDropShadow ( VARIANT_BOOL pBool );
__declspec(implementation_key(1753)) OLE_COLOR IOlapGridObject::GetBackColor ( );
__declspec(implementation_key(1754)) void IOlapGridObject::PutBackColor ( OLE_COLOR pBackColor );
__declspec(implementation_key(1755)) OLE_COLOR IOlapGridObject::GetBorderColor ( );
__declspec(implementation_key(1756)) void IOlapGridObject::PutBorderColor ( OLE_COLOR pBorderColor );
__declspec(implementation_key(1757)) ISectionPtr IOlapGridObject::GetParent ( );
__declspec(implementation_key(1758)) VARIANT_BOOL IOlapGridObject::GetSuppress ( );
__declspec(implementation_key(1759)) void IOlapGridObject::PutSuppress ( VARIANT_BOOL pBool );
__declspec(implementation_key(1760)) VARIANT_BOOL IOlapGridObject::GetCloseAtPageBreak ( );
__declspec(implementation_key(1761)) void IOlapGridObject::PutCloseAtPageBreak ( VARIANT_BOOL pBool );
__declspec(implementation_key(1762)) VARIANT_BOOL IOlapGridObject::GetKeepTogether ( );
__declspec(implementation_key(1763)) void IOlapGridObject::PutKeepTogether ( VARIANT_BOOL pBool );
__declspec(implementation_key(1764)) _bstr_t IOlapGridObject::GetConditionFormula ( const _variant_t & FormulaType );
__declspec(implementation_key(1765)) void IOlapGridObject::PutConditionFormula ( const _variant_t & FormulaType, _bstr_t pVal );
__declspec(implementation_key(1766)) VARIANT_BOOL IFormattingInfo::GetIsRepeatedGroupHeader ( );
__declspec(implementation_key(1767)) VARIANT_BOOL IFormattingInfo::GetIsStartOfGroup ( );
__declspec(implementation_key(1768)) VARIANT_BOOL IFormattingInfo::GetIsEndOfGroup ( );
__declspec(implementation_key(1769)) CRFieldValueType IFieldMappingData::GetValueType ( );
__declspec(implementation_key(1770)) void IFieldMappingData::PutValueType ( CRFieldValueType pValueType );
__declspec(implementation_key(1771)) _bstr_t IFieldMappingData::GetTableName ( );
__declspec(implementation_key(1772)) void IFieldMappingData::PutTableName ( _bstr_t pTableName );
__declspec(implementation_key(1773)) _bstr_t IFieldMappingData::GetFieldName ( );
__declspec(implementation_key(1774)) void IFieldMappingData::PutFieldName ( _bstr_t pFieldName );
__declspec(implementation_key(1775)) short IFieldMappingData::GetMappingToFieldIndex ( );
__declspec(implementation_key(1776)) void IFieldMappingData::PutMappingToFieldIndex ( short pMappingTo );
__declspec(implementation_key(1777)) _variant_t IParameterValue::GetStartValue ( );
__declspec(implementation_key(1778)) void IParameterValue::PutStartValue ( const _variant_t & StartValue );
__declspec(implementation_key(1779)) _variant_t IParameterValue::GetEndValue ( );
__declspec(implementation_key(1780)) void IParameterValue::PutEndValue ( const _variant_t & EndValue );
__declspec(implementation_key(1781)) VARIANT_BOOL IParameterValue::GetRangeValue ( );
__declspec(implementation_key(1782)) void IParameterValue::PutRangeValue ( VARIANT_BOOL pBool );
__declspec(implementation_key(1783)) enum CRRangeInfo IParameterValue::GetrangeInfo ( );
__declspec(implementation_key(1784)) void IParameterValue::PutrangeInfo ( enum CRRangeInfo rangeInfo );
__declspec(implementation_key(1785)) IUnknownPtr IParameterValues::Get_NewEnum ( );
__declspec(implementation_key(1786)) IParameterValuePtr IParameterValues::GetItem ( long index );
__declspec(implementation_key(1787)) long IParameterValues::GetCount ( );
__declspec(implementation_key(1788)) HRESULT IParameterValues::Add ( struct IParameterValue * pValue );
__declspec(implementation_key(1789)) HRESULT IParameterValues::Delete ( long index );
__declspec(implementation_key(1790)) IParameterValuesPtr IParameterValueInfo::GetParameterValues ( );
__declspec(implementation_key(1791)) void IParameterValueInfo::PutParameterValues ( struct IParameterValues * ppValues );
__declspec(implementation_key(1792)) _bstr_t IParameterValueInfo::GetparameterName ( );
__declspec(implementation_key(1793)) void IParameterValueInfo::PutparameterName ( _bstr_t pParameterName );
__declspec(implementation_key(1794)) IUnknownPtr IParameterValueInfos::Get_NewEnum ( );
__declspec(implementation_key(1795)) IParameterValueInfoPtr IParameterValueInfos::GetItem ( long index );
__declspec(implementation_key(1796)) long IParameterValueInfos::GetCount ( );
__declspec(implementation_key(1797)) HRESULT IParameterValueInfos::Add ( struct IParameterValueInfo * pValueInfo );
__declspec(implementation_key(1798)) HRESULT IParameterValueInfos::Delete ( long index );
__declspec(implementation_key(1799)) _bstr_t IConnectionProperty::GetName ( );
__declspec(implementation_key(1800)) void IConnectionProperty::PutName ( _bstr_t pName );
__declspec(implementation_key(1801)) _bstr_t IConnectionProperty::GetLocalizedName ( );
__declspec(implementation_key(1802)) void IConnectionProperty::PutLocalizedName ( _bstr_t pLocName );
__declspec(implementation_key(1803)) _bstr_t IConnectionProperty::GetDescription ( );
__declspec(implementation_key(1804)) void IConnectionProperty::PutDescription ( _bstr_t pDescription );
__declspec(implementation_key(1805)) _variant_t IConnectionProperty::GetValue ( );
__declspec(implementation_key(1806)) void IConnectionProperty::PutValue ( const _variant_t & pValue );
__declspec(implementation_key(1807)) INameValuePairsPtr IConnectionProperty::GetChildProperties ( );
__declspec(implementation_key(1808)) HRESULT ICrystalReportSourceEx::GetPage ( long lCookie, _bstr_t bstrViewContext, _bstr_t bstrSubreportContext, _bstr_t bstrFormula, const _variant_t & vtPromptingInfo, long lPageNumber, const _variant_t & vtReserved );
__declspec(implementation_key(1809)) HRESULT ICrystalReportSourceEx::GetTotaller ( long lCookie, _bstr_t bstrViewContext, _bstr_t bstrSubreportContext, _bstr_t bstrFormula, const _variant_t & vtPromptingInfo, long lStartFrom, short nLevelsPastRoot, const _variant_t & vtMaxNodeCount );
__declspec(implementation_key(1810)) HRESULT ICrystalReportSourceEx::GetLastPageNumber ( long lCookie, _bstr_t bstrViewContext, _bstr_t bstrSubreportContext, _bstr_t bstrFormula, const _variant_t & vtPromptingInfo, const _variant_t & vtReserved );
__declspec(implementation_key(1811)) HRESULT ICrystalReportSourceEx::FindGroup ( long lCookie, _bstr_t bstrViewContext, _bstr_t bstrSubreportContext, _bstr_t bstrFormula, const _variant_t & vtPromptingInfo, _bstr_t bstrGroupPath, const _variant_t & vtReserved );
__declspec(implementation_key(1812)) HRESULT ICrystalReportSourceEx::FindText ( long lCookie, _bstr_t bstrViewContext, _bstr_t bstrSubreportContext, _bstr_t bstrFormula, const _variant_t & vtPromptingInfo, long lFromPage, long lFromInstance, _bstr_t bstrText, enum CRSearchDirection nMode, const _variant_t & vtReserved );
__declspec(implementation_key(1813)) HRESULT ICrystalReportSourceEx::DrillGraph ( long lCookie, _bstr_t bstrViewContext, _bstr_t bstrSubreportContext, _bstr_t bstrFormula, const _variant_t & vtPromptingInfo, long lPageNumber, long xOffset, long yOffset, _bstr_t bstrReserved, const _variant_t & vtReserved, const _variant_t & vtReserved2 );
__declspec(implementation_key(1814)) HRESULT ICrystalReportSourceEx::DrillMap ( long lCookie, _bstr_t bstrViewContext, _bstr_t bstrSubreportContext, _bstr_t bstrFormula, const _variant_t & vtPromptingInfo, long lPageNumber, long xOffset, long yOffset, _bstr_t bstrReserved, const _variant_t & vtReserved, const _variant_t & vtReserved2 );
__declspec(implementation_key(1815)) HRESULT ICrystalReportSourceEx::Search ( long lCookie, _bstr_t bstrViewContext, _bstr_t bstrSubreportContext, _bstr_t bstrFormula, const _variant_t & vtPromptingInfo, long lPageN, long lSectionInstN, _bstr_t bstrSearchFormula, _bstr_t bstrReserved, const _variant_t & vtReserved );
__declspec(implementation_key(1816)) HRESULT ICrystalReportSourceEx::Export ( long lCookie, _bstr_t bstrViewContext, _bstr_t bstrSubreportContext, _bstr_t bstrFormula, const _variant_t & vtPromptingInfo, const _variant_t & exportFormat, const _variant_t & pageRange );
__declspec(implementation_key(1817)) HRESULT ICrystalReportSourceEx::GetExportFormats ( long lCookie );
__declspec(implementation_key(1818)) HRESULT ICrystalReportSourceEx::Refresh ( long lCookie, const _variant_t & vtPromptingInfo );
__declspec(implementation_key(1819)) HRESULT ICrystalReportSourceEx::Cancel ( long lCookie );
__declspec(implementation_key(1820)) HRESULT ICrystalReportSourceEx2::GetPage ( long lCookie, _bstr_t bstrViewContext, _bstr_t bstrSubreportContext, _bstr_t bstrFormula, const _variant_t & vtPromptingInfo, long lPageNumber, const _variant_t & vtReserved );
__declspec(implementation_key(1821)) HRESULT ICrystalReportSourceEx2::GetTotaller ( long lCookie, _bstr_t bstrViewContext, _bstr_t bstrSubreportContext, _bstr_t bstrFormula, const _variant_t & vtPromptingInfo, long lStartFrom, short nLevelsPastRoot, const _variant_t & vtMaxNodeCount );
__declspec(implementation_key(1822)) HRESULT ICrystalReportSourceEx2::GetLastPageNumber ( long lCookie, _bstr_t bstrViewContext, _bstr_t bstrSubreportContext, _bstr_t bstrFormula, const _variant_t & vtPromptingInfo, const _variant_t & vtReserved );
__declspec(implementation_key(1823)) HRESULT ICrystalReportSourceEx2::FindGroup ( long lCookie, _bstr_t bstrViewContext, _bstr_t bstrSubreportContext, _bstr_t bstrFormula, const _variant_t & vtPromptingInfo, _bstr_t bstrGroupPath, const _variant_t & vtReserved );
__declspec(implementation_key(1824)) HRESULT ICrystalReportSourceEx2::FindText ( long lCookie, _bstr_t bstrViewContext, _bstr_t bstrSubreportContext, _bstr_t bstrFormula, const _variant_t & vtPromptingInfo, long lFromPage, long lFromInstance, _bstr_t bstrText, enum CRSearchDirection nMode, const _variant_t & vtReserved );
__declspec(implementation_key(1825)) HRESULT ICrystalReportSourceEx2::DrillGraph ( long lCookie, _bstr_t bstrViewContext, _bstr_t bstrSubreportContext, _bstr_t bstrFormula, const _variant_t & vtPromptingInfo, long lPageNumber, long xOffset, long yOffset, _bstr_t bstrReserved, const _variant_t & vtReserved, const _variant_t & vtReserved2 );
__declspec(implementation_key(1826)) HRESULT ICrystalReportSourceEx2::DrillMap ( long lCookie, _bstr_t bstrViewContext, _bstr_t bstrSubreportContext, _bstr_t bstrFormula, const _variant_t & vtPromptingInfo, long lPageNumber, long xOffset, long yOffset, _bstr_t bstrReserved, const _variant_t & vtReserved, const _variant_t & vtReserved2 );
__declspec(implementation_key(1827)) HRESULT ICrystalReportSourceEx2::Search ( long lCookie, _bstr_t bstrViewContext, _bstr_t bstrSubreportContext, _bstr_t bstrFormula, const _variant_t & vtPromptingInfo, long lPageN, long lSectionInstN, _bstr_t bstrSearchFormula, _bstr_t bstrReserved, const _variant_t & vtReserved );
__declspec(implementation_key(1828)) HRESULT ICrystalReportSourceEx2::Export ( long lCookie, _bstr_t bstrViewContext, _bstr_t bstrSubreportContext, _bstr_t bstrFormula, const _variant_t & vtPromptingInfo, const _variant_t & exportFormat, const _variant_t & pageRange );
__declspec(implementation_key(1829)) HRESULT ICrystalReportSourceEx2::GetExportFormats ( long lCookie );
__declspec(implementation_key(1830)) HRESULT ICrystalReportSourceEx2::Refresh ( long lCookie, const _variant_t & vtPromptingInfo );
__declspec(implementation_key(1831)) HRESULT ICrystalReportSourceEx2::Cancel ( long lCookie );
__declspec(implementation_key(1832)) HRESULT ICrystalReportSourceEx2::Update ( long lCookie );
#pragma stop_map_region

#pragma pack(pop)
