// Created by Microsoft (R) C/C++ Compiler Version 12.00.8168.0 (ed5f1042).
//
// craxdrt.tli
//
// Wrapper implementations for Win32 type library craxdrt.dll
// compiler-generated file created 06/29/09 at 18:29:31 - DO NOT EDIT!


//
// interface IReport wrapper method implementations
//

#pragma implementation_key(1)
inline IAreasPtr IReport::GetAreas ( ) {
    struct IAreas * _result;
    HRESULT _hr = get_Areas(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAreasPtr(_result, false);
}

#pragma implementation_key(2)
inline ISectionsPtr IReport::GetSections ( ) {
    struct ISections * _result;
    HRESULT _hr = get_Sections(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISectionsPtr(_result, false);
}

#pragma implementation_key(3)
inline DATE IReport::GetPrintDate ( ) {
    DATE _result;
    HRESULT _hr = get_PrintDate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(4)
inline void IReport::PutPrintDate ( DATE pDate ) {
    HRESULT _hr = put_PrintDate(pDate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(5)
inline VARIANT_BOOL IReport::GetUseIndexForSpeed ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_UseIndexForSpeed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(6)
inline void IReport::PutUseIndexForSpeed ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_UseIndexForSpeed(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(7)
inline VARIANT_BOOL IReport::GetTranslateDosStrings ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_TranslateDosStrings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(8)
inline void IReport::PutTranslateDosStrings ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_TranslateDosStrings(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(9)
inline VARIANT_BOOL IReport::GetTranslateDosMemos ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_TranslateDosMemos(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(10)
inline void IReport::PutTranslateDosMemos ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_TranslateDosMemos(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(11)
inline enum CRConvertDateTimeType IReport::GetConvertDateTimeType ( ) {
    enum CRConvertDateTimeType _result;
    HRESULT _hr = get_ConvertDateTimeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(12)
inline void IReport::PutConvertDateTimeType ( enum CRConvertDateTimeType pDateTimeType ) {
    HRESULT _hr = put_ConvertDateTimeType(pDateTimeType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(13)
inline VARIANT_BOOL IReport::GetConvertNullFieldToDefault ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ConvertNullFieldToDefault(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(14)
inline void IReport::PutConvertNullFieldToDefault ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_ConvertNullFieldToDefault(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(15)
inline VARIANT_BOOL IReport::GetCaseInsensitiveSQLData ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_CaseInsensitiveSQLData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(16)
inline void IReport::PutCaseInsensitiveSQLData ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_CaseInsensitiveSQLData(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(17)
inline VARIANT_BOOL IReport::GetVerifyOnEveryPrint ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_VerifyOnEveryPrint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(18)
inline void IReport::PutVerifyOnEveryPrint ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_VerifyOnEveryPrint(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(19)
inline IDatabasePtr IReport::GetDatabase ( ) {
    struct IDatabase * _result;
    HRESULT _hr = get_Database(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDatabasePtr(_result, false);
}

#pragma implementation_key(20)
inline _bstr_t IReport::GetPrinterName ( ) {
    BSTR _result;
    HRESULT _hr = get_PrinterName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(21)
inline _bstr_t IReport::GetDriverName ( ) {
    BSTR _result;
    HRESULT _hr = get_DriverName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(22)
inline _bstr_t IReport::GetPortName ( ) {
    BSTR _result;
    HRESULT _hr = get_PortName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(23)
inline enum CRPaperOrientation IReport::GetPaperOrientation ( ) {
    enum CRPaperOrientation _result;
    HRESULT _hr = get_PaperOrientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(24)
inline void IReport::PutPaperOrientation ( enum CRPaperOrientation pPaperOrientation ) {
    HRESULT _hr = put_PaperOrientation(pPaperOrientation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(25)
inline enum CRPaperSize IReport::GetPaperSize ( ) {
    enum CRPaperSize _result;
    HRESULT _hr = get_PaperSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(26)
inline void IReport::PutPaperSize ( enum CRPaperSize pPaperSize ) {
    HRESULT _hr = put_PaperSize(pPaperSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(27)
inline HRESULT IReport::Save ( _bstr_t pReportFileName ) {
    HRESULT _hr = raw_Save(pReportFileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(28)
inline HRESULT IReport::PrintOut ( const _variant_t & promptUser, const _variant_t & numberOfCopy, const _variant_t & collated, const _variant_t & startPageN, const _variant_t & stopPageN ) {
    HRESULT _hr = raw_PrintOut(promptUser, numberOfCopy, collated, startPageN, stopPageN);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(29)
inline HRESULT IReport::SelectPrinter ( _bstr_t pDriverName, _bstr_t pPrinterName, _bstr_t pPortName ) {
    HRESULT _hr = raw_SelectPrinter(pDriverName, pPrinterName, pPortName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(30)
inline IFormulaFieldDefinitionsPtr IReport::GetFormulaFields ( ) {
    struct IFormulaFieldDefinitions * _result;
    HRESULT _hr = get_FormulaFields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFormulaFieldDefinitionsPtr(_result, false);
}

#pragma implementation_key(31)
inline IParameterFieldDefinitionsPtr IReport::GetParameterFields ( ) {
    struct IParameterFieldDefinitions * _result;
    HRESULT _hr = get_ParameterFields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IParameterFieldDefinitionsPtr(_result, false);
}

#pragma implementation_key(32)
inline IGroupNameFieldDefinitionsPtr IReport::GetGroupNameFields ( ) {
    struct IGroupNameFieldDefinitions * _result;
    HRESULT _hr = get_GroupNameFields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGroupNameFieldDefinitionsPtr(_result, false);
}

#pragma implementation_key(33)
inline ISummaryFieldDefinitionsPtr IReport::GetSummaryFields ( ) {
    struct ISummaryFieldDefinitions * _result;
    HRESULT _hr = get_SummaryFields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISummaryFieldDefinitionsPtr(_result, false);
}

#pragma implementation_key(34)
inline enum CRReportKind IReport::GetKind ( ) {
    enum CRReportKind _result;
    HRESULT _hr = get_Kind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(35)
inline IReportPtr IReport::GetParent ( ) {
    struct IReport * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IReportPtr(_result, false);
}

#pragma implementation_key(36)
inline long IReport::GetNumberOfGroup ( ) {
    long _result;
    HRESULT _hr = get_NumberOfGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(37)
inline VARIANT_BOOL IReport::GetMorePrintEngineErrorMessages ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_MorePrintEngineErrorMessages(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(38)
inline void IReport::PutMorePrintEngineErrorMessages ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_MorePrintEngineErrorMessages(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(39)
inline long IReport::GetLeftMargin ( ) {
    long _result;
    HRESULT _hr = get_LeftMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(40)
inline void IReport::PutLeftMargin ( long pLeftMargin ) {
    HRESULT _hr = put_LeftMargin(pLeftMargin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(41)
inline long IReport::GetRightMargin ( ) {
    long _result;
    HRESULT _hr = get_RightMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(42)
inline void IReport::PutRightMargin ( long pRightMargin ) {
    HRESULT _hr = put_RightMargin(pRightMargin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(43)
inline long IReport::GetTopMargin ( ) {
    long _result;
    HRESULT _hr = get_TopMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(44)
inline void IReport::PutTopMargin ( long pTopMargin ) {
    HRESULT _hr = put_TopMargin(pTopMargin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(45)
inline long IReport::GetBottomMargin ( ) {
    long _result;
    HRESULT _hr = get_BottomMargin(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(46)
inline void IReport::PutBottomMargin ( long pBottomMargin ) {
    HRESULT _hr = put_BottomMargin(pBottomMargin);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(47)
inline IPageEnginePtr IReport::GetPageEngine ( ) {
    struct IPageEngine * _result;
    HRESULT _hr = get_PageEngine(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPageEnginePtr(_result, false);
}

#pragma implementation_key(48)
inline HRESULT IReport::Export ( const _variant_t & promptUser ) {
    HRESULT _hr = raw_Export(promptUser);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(49)
inline IExportOptionsPtr IReport::GetExportOptions ( ) {
    struct IExportOptions * _result;
    HRESULT _hr = get_ExportOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IExportOptionsPtr(_result, false);
}

#pragma implementation_key(50)
inline IApplicationPtr IReport::GetApplication ( ) {
    struct IApplication * _result;
    HRESULT _hr = get_Application(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IApplicationPtr(_result, false);
}

#pragma implementation_key(51)
inline VARIANT_BOOL IReport::GetEnableParameterPrompting ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableParameterPrompting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(52)
inline void IReport::PutEnableParameterPrompting ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_EnableParameterPrompting(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(53)
inline VARIANT_BOOL IReport::GetDisplayProgressDialog ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayProgressDialog(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(54)
inline void IReport::PutDisplayProgressDialog ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_DisplayProgressDialog(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(55)
inline _bstr_t IReport::GetRecordSelectionFormula ( ) {
    BSTR _result;
    HRESULT _hr = get_RecordSelectionFormula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(56)
inline void IReport::PutRecordSelectionFormula ( _bstr_t ppRecordSelectionFormula ) {
    HRESULT _hr = put_RecordSelectionFormula(ppRecordSelectionFormula);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(57)
inline _bstr_t IReport::GetGroupSelectionFormula ( ) {
    BSTR _result;
    HRESULT _hr = get_GroupSelectionFormula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(58)
inline void IReport::PutGroupSelectionFormula ( _bstr_t ppGroupSelectionFormula ) {
    HRESULT _hr = put_GroupSelectionFormula(ppGroupSelectionFormula);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(59)
inline ISortFieldsPtr IReport::GetRecordSortFields ( ) {
    struct ISortFields * _result;
    HRESULT _hr = get_RecordSortFields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISortFieldsPtr(_result, false);
}

#pragma implementation_key(60)
inline HRESULT IReport::CancelPrinting ( ) {
    HRESULT _hr = raw_CancelPrinting();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(61)
inline VARIANT_BOOL IReport::GetHasSavedData ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HasSavedData(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(62)
inline HRESULT IReport::DiscardSavedData ( ) {
    HRESULT _hr = raw_DiscardSavedData();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(63)
inline IPrintingStatusPtr IReport::GetPrintingStatus ( ) {
    struct IPrintingStatus * _result;
    HRESULT _hr = get_PrintingStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPrintingStatusPtr(_result, false);
}

#pragma implementation_key(64)
inline _bstr_t IReport::GetReportTitle ( ) {
    BSTR _result;
    HRESULT _hr = get_ReportTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(65)
inline void IReport::PutReportTitle ( _bstr_t ppReportTitle ) {
    HRESULT _hr = put_ReportTitle(ppReportTitle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(66)
inline _bstr_t IReport::GetReportSubject ( ) {
    BSTR _result;
    HRESULT _hr = get_ReportSubject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(67)
inline void IReport::PutReportSubject ( _bstr_t ppReportSubject ) {
    HRESULT _hr = put_ReportSubject(ppReportSubject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(68)
inline _bstr_t IReport::GetReportAuthor ( ) {
    BSTR _result;
    HRESULT _hr = get_ReportAuthor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(69)
inline void IReport::PutReportAuthor ( _bstr_t ppReportAuthor ) {
    HRESULT _hr = put_ReportAuthor(ppReportAuthor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(70)
inline _bstr_t IReport::GetReportComments ( ) {
    BSTR _result;
    HRESULT _hr = get_ReportComments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(71)
inline void IReport::PutReportComments ( _bstr_t ppReportComments ) {
    HRESULT _hr = put_ReportComments(ppReportComments);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(72)
inline _bstr_t IReport::GetReportTemplate ( ) {
    BSTR _result;
    HRESULT _hr = get_ReportTemplate(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(73)
inline void IReport::PutReportTemplate ( _bstr_t ppReportTemplate ) {
    HRESULT _hr = put_ReportTemplate(ppReportTemplate);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(74)
inline _bstr_t IReport::GetKeywordsInReport ( ) {
    BSTR _result;
    HRESULT _hr = get_KeywordsInReport(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(75)
inline void IReport::PutKeywordsInReport ( _bstr_t ppKeywordsInReport ) {
    HRESULT _hr = put_KeywordsInReport(ppKeywordsInReport);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(76)
inline _bstr_t IReport::GetApplicationName ( ) {
    BSTR _result;
    HRESULT _hr = get_ApplicationName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(77)
inline void IReport::PutApplicationName ( _bstr_t ppApplicationName ) {
    HRESULT _hr = put_ApplicationName(ppApplicationName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(78)
inline HRESULT IReport::ReadRecords ( ) {
    HRESULT _hr = raw_ReadRecords();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(79)
inline _variant_t IReport::GetNextRows ( long startRowN, long * pRowN ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetNextRows(startRowN, pRowN, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(80)
inline IRunningTotalFieldDefinitionsPtr IReport::GetRunningTotalFields ( ) {
    struct IRunningTotalFieldDefinitions * _result;
    HRESULT _hr = get_RunningTotalFields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRunningTotalFieldDefinitionsPtr(_result, false);
}

#pragma implementation_key(81)
inline VARIANT_BOOL IReport::GetPerformGroupingOnServer ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PerformGroupingOnServer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(82)
inline void IReport::PutPerformGroupingOnServer ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_PerformGroupingOnServer(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(83)
inline VARIANT_BOOL IReport::GetCanPerformGroupingOnServer ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_CanPerformGroupingOnServer(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(84)
inline _bstr_t IReport::GetSQLQueryString ( ) {
    BSTR _result;
    HRESULT _hr = get_SQLQueryString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(85)
inline void IReport::PutSQLQueryString ( _bstr_t ppSQLQueryString ) {
    HRESULT _hr = put_SQLQueryString(ppSQLQueryString);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(86)
inline ISQLExpressionFieldDefinitionsPtr IReport::GetSQLExpressionFields ( ) {
    struct ISQLExpressionFieldDefinitions * _result;
    HRESULT _hr = get_SQLExpressionFields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISQLExpressionFieldDefinitionsPtr(_result, false);
}

#pragma implementation_key(87)
inline IReportPtr IReport::OpenSubreport ( _bstr_t pSubreportName ) {
    struct IReport * _result;
    HRESULT _hr = raw_OpenSubreport(pSubreportName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IReportPtr(_result, false);
}

#pragma implementation_key(88)
inline ISortFieldsPtr IReport::GetGroupSortFields ( ) {
    struct ISortFields * _result;
    HRESULT _hr = get_GroupSortFields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISortFieldsPtr(_result, false);
}

#pragma implementation_key(89)
inline HRESULT IReport::AddGroup ( short GroupNumber, IDispatch * pConditionField, enum CRGroupCondition Condition, enum CRSortDirection SortDirection ) {
    HRESULT _hr = raw_AddGroup(GroupNumber, pConditionField, Condition, SortDirection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(90)
inline HRESULT IReport::SetDialogParentWindow ( long hWnd ) {
    HRESULT _hr = raw_SetDialogParentWindow(hWnd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(91)
inline VARIANT_BOOL IReport::GetEnablePerformQueriesAsynchronously ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnablePerformQueriesAsynchronously(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(92)
inline void IReport::PutEnablePerformQueriesAsynchronously ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_EnablePerformQueriesAsynchronously(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(93)
inline VARIANT_BOOL IReport::GetEnableSelectDistinctRecords ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableSelectDistinctRecords(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(94)
inline void IReport::PutEnableSelectDistinctRecords ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_EnableSelectDistinctRecords(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(95)
inline HRESULT IReport::AddReportVariable ( enum CRReportVariableValueType type, _bstr_t pName, long arraySize, const _variant_t & reserved ) {
    HRESULT _hr = raw_AddReportVariable(type, pName, arraySize, reserved);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(96)
inline _variant_t IReport::GetReportVariableValue ( _bstr_t pName ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetReportVariableValue(pName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(97)
inline HRESULT IReport::SetReportVariableValue ( _bstr_t pName, const _variant_t & var ) {
    HRESULT _hr = raw_SetReportVariableValue(pName, var);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(98)
inline enum CRReportFormatStyle IReport::GetReportFormatStyle ( ) {
    enum CRReportFormatStyle _result;
    HRESULT _hr = get_ReportFormatStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(99)
inline void IReport::PutReportFormatStyle ( enum CRReportFormatStyle pFormatStyle ) {
    HRESULT _hr = put_ReportFormatStyle(pFormatStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(100)
inline HRESULT IReport::DeleteGroup ( short GroupNumber ) {
    HRESULT _hr = raw_DeleteGroup(GroupNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(101)
inline VARIANT_BOOL IReport::GetEnableAsyncQuery ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableAsyncQuery(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(102)
inline void IReport::PutEnableAsyncQuery ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_EnableAsyncQuery(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(103)
inline VARIANT_BOOL IReport::GetEnableGeneratingDataForHiddenObject ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableGeneratingDataForHiddenObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(104)
inline void IReport::PutEnableGeneratingDataForHiddenObject ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_EnableGeneratingDataForHiddenObject(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(105)
inline void IReport::PutPrinterDuplex ( enum CRPrinterDuplexType pPrinterDuplexType ) {
    HRESULT _hr = put_PrinterDuplex(pPrinterDuplexType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(106)
inline enum CRPrinterDuplexType IReport::GetPrinterDuplex ( ) {
    enum CRPrinterDuplexType _result;
    HRESULT _hr = get_PrinterDuplex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(107)
inline void IReport::PutPaperSource ( enum CRPaperSource pPaperSource ) {
    HRESULT _hr = put_PaperSource(pPaperSource);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(108)
inline enum CRPaperSource IReport::GetPaperSource ( ) {
    enum CRPaperSource _result;
    HRESULT _hr = get_PaperSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(109)
inline VARIANT_BOOL IReport::GetSavePreviewPicture ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_SavePreviewPicture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(110)
inline void IReport::PutSavePreviewPicture ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_SavePreviewPicture(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(111)
inline HRESULT IReport::PrinterSetup ( long hWnd ) {
    HRESULT _hr = raw_PrinterSetup(hWnd);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(112)
inline HRESULT IReport::AutoSetUnboundFieldSource ( enum CRBindingMatchType matchType, const _variant_t & bindSubReports ) {
    HRESULT _hr = raw_AutoSetUnboundFieldSource(matchType, bindSubReports);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(113)
inline HRESULT IReport::SaveAs ( _bstr_t pFilePath, enum CRReportFileFormat fileFormat ) {
    HRESULT _hr = raw_SaveAs(pFilePath, fileFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(114)
inline void IReport::PutFieldMappingType ( enum CRFieldMappingType fldMappingType ) {
    HRESULT _hr = put_FieldMappingType(fldMappingType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(115)
inline enum CRFieldMappingType IReport::GetFieldMappingType ( ) {
    enum CRFieldMappingType _result;
    HRESULT _hr = get_FieldMappingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(116)
inline enum CRFormulaSyntax IReport::GetFormulaSyntax ( ) {
    enum CRFormulaSyntax _result;
    HRESULT _hr = get_FormulaSyntax(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(117)
inline void IReport::PutFormulaSyntax ( enum CRFormulaSyntax pFormulaSyntax ) {
    HRESULT _hr = put_FormulaSyntax(pFormulaSyntax);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(118)
inline enum CRFormulaSyntax IReport::GetLastGetFormulaSyntax ( ) {
    enum CRFormulaSyntax _result;
    HRESULT _hr = get_LastGetFormulaSyntax(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(119)
inline VARIANT_BOOL IReport::GetNeedUpdatePages ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_NeedUpdatePages(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(120)
inline IReportAlertsPtr IReport::GetReportAlerts ( ) {
    struct IReportAlerts * _result;
    HRESULT _hr = get_ReportAlerts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IReportAlertsPtr(_result, false);
}

#pragma implementation_key(121)
inline HRESULT IReport::SwapGroups ( short sourceGroupN, short targetGroupN ) {
    HRESULT _hr = raw_SwapGroups(sourceGroupN, targetGroupN);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(122)
inline HRESULT IReport::SetUserPaperSize ( short length, short Width ) {
    HRESULT _hr = raw_SetUserPaperSize(length, Width);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(123)
inline HRESULT IReport::PrintOutEx ( const _variant_t & promptUser, const _variant_t & numberOfCopy, const _variant_t & collated, const _variant_t & startPageN, const _variant_t & stopPageN, _bstr_t printFileName ) {
    HRESULT _hr = raw_PrintOutEx(promptUser, numberOfCopy, collated, startPageN, stopPageN, printFileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(124)
inline long IReport::PrinterSetupEx ( long hWnd ) {
    long _result;
    HRESULT _hr = raw_PrinterSetupEx(hWnd, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IAreas wrapper method implementations
//

#pragma implementation_key(125)
inline IUnknownPtr IAreas::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(126)
inline IAreaPtr IAreas::GetItem ( const _variant_t & index ) {
    struct IArea * _result;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAreaPtr(_result, false);
}

#pragma implementation_key(127)
inline long IAreas::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(128)
inline IReportPtr IAreas::GetParent ( ) {
    struct IReport * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IReportPtr(_result, false);
}

//
// interface IArea wrapper method implementations
//

#pragma implementation_key(129)
inline _bstr_t IArea::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(130)
inline void IArea::PutName ( _bstr_t ppName ) {
    HRESULT _hr = put_Name(ppName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(131)
inline enum CRAreaKind IArea::GetKind ( ) {
    enum CRAreaKind _result;
    HRESULT _hr = get_Kind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(132)
inline ISectionsPtr IArea::GetSections ( ) {
    struct ISections * _result;
    HRESULT _hr = get_Sections(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISectionsPtr(_result, false);
}

#pragma implementation_key(133)
inline IReportPtr IArea::GetParent ( ) {
    struct IReport * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IReportPtr(_result, false);
}

#pragma implementation_key(134)
inline VARIANT_BOOL IArea::GetSuppress ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Suppress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(135)
inline void IArea::PutSuppress ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_Suppress(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(136)
inline VARIANT_BOOL IArea::GetHideForDrillDown ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HideForDrillDown(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(137)
inline void IArea::PutHideForDrillDown ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_HideForDrillDown(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(138)
inline short IArea::GetGroupNumber ( ) {
    short _result;
    HRESULT _hr = get_GroupNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(139)
inline short IArea::GetCopiesToPrint ( ) {
    short _result;
    HRESULT _hr = get_CopiesToPrint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(140)
inline void IArea::PutCopiesToPrint ( short pCopiesToPrint ) {
    HRESULT _hr = put_CopiesToPrint(pCopiesToPrint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(141)
inline VARIANT_BOOL IArea::GetKeepTogether ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_KeepTogether(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(142)
inline void IArea::PutKeepTogether ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_KeepTogether(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(143)
inline VARIANT_BOOL IArea::GetNewPageAfter ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_NewPageAfter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(144)
inline void IArea::PutNewPageAfter ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_NewPageAfter(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(145)
inline VARIANT_BOOL IArea::GetNewPageBefore ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_NewPageBefore(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(146)
inline void IArea::PutNewPageBefore ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_NewPageBefore(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(147)
inline VARIANT_BOOL IArea::GetPrintAtBottomOfPage ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintAtBottomOfPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(148)
inline void IArea::PutPrintAtBottomOfPage ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_PrintAtBottomOfPage(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(149)
inline VARIANT_BOOL IArea::GetResetPageNumberAfter ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ResetPageNumberAfter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(150)
inline void IArea::PutResetPageNumberAfter ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_ResetPageNumberAfter(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(151)
inline enum CRSortDirection IArea::GetSortDirection ( ) {
    enum CRSortDirection _result;
    HRESULT _hr = get_SortDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(152)
inline void IArea::PutSortDirection ( enum CRSortDirection pSortDirection ) {
    HRESULT _hr = put_SortDirection(pSortDirection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(153)
inline VARIANT_BOOL IArea::GetRepeatGroupHeader ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_RepeatGroupHeader(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(154)
inline void IArea::PutRepeatGroupHeader ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_RepeatGroupHeader(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(155)
inline VARIANT_BOOL IArea::GetKeepGroupTogether ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_KeepGroupTogether(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(156)
inline void IArea::PutKeepGroupTogether ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_KeepGroupTogether(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(157)
inline enum CRGroupCondition IArea::GetGroupCondition ( ) {
    enum CRGroupCondition _result;
    HRESULT _hr = get_GroupCondition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(158)
inline void IArea::PutGroupCondition ( enum CRGroupCondition pGroupCondition ) {
    HRESULT _hr = put_GroupCondition(pGroupCondition);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(159)
inline IDispatchPtr IArea::GetGroupConditionField ( ) {
    IDispatch * _result;
    HRESULT _hr = get_GroupConditionField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(160)
inline void IArea::PutGroupConditionField ( IDispatch * ppConditionField ) {
    HRESULT _hr = put_GroupConditionField(ppConditionField);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(161)
inline long IArea::GetDetailWidth ( ) {
    long _result;
    HRESULT _hr = get_DetailWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(162)
inline long IArea::GetDetailHeight ( ) {
    long _result;
    HRESULT _hr = get_DetailHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(163)
inline long IArea::GetHorizontalGap ( ) {
    long _result;
    HRESULT _hr = get_HorizontalGap(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(164)
inline enum CRTopBottomNGroupSortOrder IArea::GetTopOrBottomNGroupSortOrder ( ) {
    enum CRTopBottomNGroupSortOrder _result;
    HRESULT _hr = get_TopOrBottomNGroupSortOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(165)
inline void IArea::PutTopOrBottomNGroupSortOrder ( enum CRTopBottomNGroupSortOrder pTopOrBottomNGroupSortOrder ) {
    HRESULT _hr = put_TopOrBottomNGroupSortOrder(pTopOrBottomNGroupSortOrder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(166)
inline short IArea::GetNumberOfTopOrBottomNGroups ( ) {
    short _result;
    HRESULT _hr = get_NumberOfTopOrBottomNGroups(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(167)
inline void IArea::PutNumberOfTopOrBottomNGroups ( short pNumberOfTopOrBottomNGroups ) {
    HRESULT _hr = put_NumberOfTopOrBottomNGroups(pNumberOfTopOrBottomNGroups);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(168)
inline VARIANT_BOOL IArea::GetDiscardOtherGroups ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DiscardOtherGroups(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(169)
inline void IArea::PutDiscardOtherGroups ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_DiscardOtherGroups(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(170)
inline ISummaryFieldDefinitionPtr IArea::GetTopOrBottomNSortField ( ) {
    struct ISummaryFieldDefinition * _result;
    HRESULT _hr = get_TopOrBottomNSortField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISummaryFieldDefinitionPtr(_result, false);
}

#pragma implementation_key(171)
inline void IArea::PutTopOrBottomNSortField ( struct ISummaryFieldDefinition * ppTopOrBottomNSortField ) {
    HRESULT _hr = put_TopOrBottomNSortField(ppTopOrBottomNSortField);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(172)
inline VARIANT_BOOL IArea::GetEnableHierarchicalGroupSorting ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableHierarchicalGroupSorting(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(173)
inline void IArea::PutEnableHierarchicalGroupSorting ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_EnableHierarchicalGroupSorting(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(174)
inline IFieldDefinitionPtr IArea::GetParentIDField ( ) {
    struct IFieldDefinition * _result;
    HRESULT _hr = get_ParentIDField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFieldDefinitionPtr(_result, false);
}

#pragma implementation_key(175)
inline HRESULT IArea::SetParentIDField ( const _variant_t & ParentIDField ) {
    HRESULT _hr = raw_SetParentIDField(ParentIDField);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(176)
inline IFieldDefinitionPtr IArea::GetInstanceIDField ( ) {
    struct IFieldDefinition * _result;
    HRESULT _hr = get_InstanceIDField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFieldDefinitionPtr(_result, false);
}

#pragma implementation_key(177)
inline HRESULT IArea::SetInstanceIDField ( const _variant_t & InstanceIDField ) {
    HRESULT _hr = raw_SetInstanceIDField(InstanceIDField);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(178)
inline long IArea::GetGroupIndent ( ) {
    long _result;
    HRESULT _hr = get_GroupIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(179)
inline void IArea::PutGroupIndent ( long pGroupIndent ) {
    HRESULT _hr = put_GroupIndent(pGroupIndent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(180)
inline _variant_t IArea::GetSpecifiedGroups ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SpecifiedGroups(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(181)
inline void IArea::PutSpecifiedGroups ( VARIANT * pSpecifedGroupArray ) {
    HRESULT _hr = put_SpecifiedGroups(pSpecifedGroupArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(182)
inline _bstr_t IArea::GetConditionFormula ( const _variant_t & FormulaName ) {
    BSTR _result;
    HRESULT _hr = get_ConditionFormula(FormulaName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(183)
inline void IArea::PutConditionFormula ( const _variant_t & FormulaName, _bstr_t pVal ) {
    HRESULT _hr = put_ConditionFormula(FormulaName, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISections wrapper method implementations
//

#pragma implementation_key(184)
inline IUnknownPtr ISections::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(185)
inline ISectionPtr ISections::GetItem ( const _variant_t & index ) {
    struct ISection * _result;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISectionPtr(_result, false);
}

#pragma implementation_key(186)
inline long ISections::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(187)
inline IDispatchPtr ISections::GetParent ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(188)
inline ISectionPtr ISections::Add ( const _variant_t & index ) {
    struct ISection * _result;
    HRESULT _hr = raw_Add(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISectionPtr(_result, false);
}

#pragma implementation_key(189)
inline HRESULT ISections::Delete ( const _variant_t & index ) {
    HRESULT _hr = raw_Delete(index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ISection wrapper method implementations
//

#pragma implementation_key(190)
inline _bstr_t ISection::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(191)
inline void ISection::PutName ( _bstr_t ppName ) {
    HRESULT _hr = put_Name(ppName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(192)
inline long ISection::GetHeight ( ) {
    long _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(193)
inline void ISection::PutHeight ( long pHeight ) {
    HRESULT _hr = put_Height(pHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(194)
inline IReportObjectsPtr ISection::GetReportObjects ( ) {
    struct IReportObjects * _result;
    HRESULT _hr = get_ReportObjects(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IReportObjectsPtr(_result, false);
}

#pragma implementation_key(195)
inline long ISection::GetWidth ( ) {
    long _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(196)
inline OLE_COLOR ISection::GetBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(197)
inline void ISection::PutBackColor ( OLE_COLOR pBackColor ) {
    HRESULT _hr = put_BackColor(pBackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(198)
inline VARIANT_BOOL ISection::GetSuppress ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Suppress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(199)
inline void ISection::PutSuppress ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_Suppress(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(200)
inline IAreaPtr ISection::GetParent ( ) {
    struct IArea * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAreaPtr(_result, false);
}

#pragma implementation_key(201)
inline short ISection::GetNumber ( ) {
    short _result;
    HRESULT _hr = get_Number(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(202)
inline VARIANT_BOOL ISection::GetNewPageBefore ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_NewPageBefore(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(203)
inline void ISection::PutNewPageBefore ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_NewPageBefore(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(204)
inline VARIANT_BOOL ISection::GetNewPageAfter ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_NewPageAfter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(205)
inline void ISection::PutNewPageAfter ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_NewPageAfter(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(206)
inline VARIANT_BOOL ISection::GetKeepTogether ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_KeepTogether(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(207)
inline void ISection::PutKeepTogether ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_KeepTogether(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(208)
inline VARIANT_BOOL ISection::GetResetPageNumberAfter ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ResetPageNumberAfter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(209)
inline void ISection::PutResetPageNumberAfter ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_ResetPageNumberAfter(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(210)
inline VARIANT_BOOL ISection::GetPrintAtBottomOfPage ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PrintAtBottomOfPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(211)
inline void ISection::PutPrintAtBottomOfPage ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_PrintAtBottomOfPage(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(212)
inline VARIANT_BOOL ISection::GetUnderlaySection ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_UnderlaySection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(213)
inline void ISection::PutUnderlaySection ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_UnderlaySection(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(214)
inline VARIANT_BOOL ISection::GetSuppressIfBlank ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_SuppressIfBlank(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(215)
inline void ISection::PutSuppressIfBlank ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_SuppressIfBlank(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(216)
inline long ISection::GetMinimumHeight ( ) {
    long _result;
    HRESULT _hr = get_MinimumHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(217)
inline IFieldObjectPtr ISection::AddFieldObject ( const _variant_t & Field, long Left, long Top ) {
    struct IFieldObject * _result;
    HRESULT _hr = raw_AddFieldObject(Field, Left, Top, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFieldObjectPtr(_result, false);
}

#pragma implementation_key(218)
inline ITextObjectPtr ISection::AddTextObject ( _bstr_t pText, long Left, long Top, const _variant_t & formatText ) {
    struct ITextObject * _result;
    HRESULT _hr = raw_AddTextObject(pText, Left, Top, formatText, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextObjectPtr(_result, false);
}

#pragma implementation_key(219)
inline IBlobFieldObjectPtr ISection::AddBlobFieldObject ( const _variant_t & Field, long Left, long Top ) {
    struct IBlobFieldObject * _result;
    HRESULT _hr = raw_AddBlobFieldObject(Field, Left, Top, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBlobFieldObjectPtr(_result, false);
}

#pragma implementation_key(220)
inline IFieldObjectPtr ISection::AddSpecialVarFieldObject ( enum CRSpecialVarType specialVarType, long Left, long Top ) {
    struct IFieldObject * _result;
    HRESULT _hr = raw_AddSpecialVarFieldObject(specialVarType, Left, Top, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFieldObjectPtr(_result, false);
}

#pragma implementation_key(221)
inline ISubreportObjectPtr ISection::AddSubreportObject ( _bstr_t pSubreportName, long Left, long Top ) {
    struct ISubreportObject * _result;
    HRESULT _hr = raw_AddSubreportObject(pSubreportName, Left, Top, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISubreportObjectPtr(_result, false);
}

#pragma implementation_key(222)
inline ISubreportObjectPtr ISection::ImportSubreport ( _bstr_t subreportFileName, long Left, long Top ) {
    struct ISubreportObject * _result;
    HRESULT _hr = raw_ImportSubreport(subreportFileName, Left, Top, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISubreportObjectPtr(_result, false);
}

#pragma implementation_key(223)
inline HRESULT ISection::DeleteObject ( const _variant_t & reportObject ) {
    HRESULT _hr = raw_DeleteObject(reportObject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(224)
inline ILineObjectPtr ISection::AddLineObject ( long Left, long Top, long Right, long Bottom, const _variant_t & pEndSection ) {
    struct ILineObject * _result;
    HRESULT _hr = raw_AddLineObject(Left, Top, Right, Bottom, pEndSection, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ILineObjectPtr(_result, false);
}

#pragma implementation_key(225)
inline IBoxObjectPtr ISection::AddBoxObject ( long Left, long Top, long Right, long Bottom, const _variant_t & pEndSection ) {
    struct IBoxObject * _result;
    HRESULT _hr = raw_AddBoxObject(Left, Top, Right, Bottom, pEndSection, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IBoxObjectPtr(_result, false);
}

#pragma implementation_key(226)
inline ICrossTabObjectPtr ISection::AddCrossTabObject ( long Left, long Top ) {
    struct ICrossTabObject * _result;
    HRESULT _hr = raw_AddCrossTabObject(Left, Top, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICrossTabObjectPtr(_result, false);
}

#pragma implementation_key(227)
inline ICROleObjectPtr ISection::AddPictureObject ( _bstr_t pImageFilePath, long Left, long Top ) {
    struct ICROleObject * _result;
    HRESULT _hr = raw_AddPictureObject(pImageFilePath, Left, Top, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICROleObjectPtr(_result, false);
}

#pragma implementation_key(228)
inline IGraphObjectPtr ISection::AddGraphObject ( enum CRGraphDataType graphDataType, long Left, long Top, const _variant_t & pCrossTabObject ) {
    struct IGraphObject * _result;
    HRESULT _hr = raw_AddGraphObject(graphDataType, Left, Top, pCrossTabObject, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGraphObjectPtr(_result, false);
}

#pragma implementation_key(229)
inline IFieldObjectPtr ISection::AddSummaryFieldObject ( const _variant_t & Field, enum CRSummaryType SummaryType, long Left, long Top, const _variant_t & secondSummaryFieldOrFactor ) {
    struct IFieldObject * _result;
    HRESULT _hr = raw_AddSummaryFieldObject(Field, SummaryType, Left, Top, secondSummaryFieldOrFactor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFieldObjectPtr(_result, false);
}

#pragma implementation_key(230)
inline IFieldObjectPtr ISection::AddUnboundFieldObject ( CRFieldValueType ValueType, long Left, long Top ) {
    struct IFieldObject * _result;
    HRESULT _hr = raw_AddUnboundFieldObject(ValueType, Left, Top, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFieldObjectPtr(_result, false);
}

#pragma implementation_key(231)
inline _bstr_t ISection::GetConditionFormula ( const _variant_t & FormulaName ) {
    BSTR _result;
    HRESULT _hr = get_ConditionFormula(FormulaName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(232)
inline void ISection::PutConditionFormula ( const _variant_t & FormulaName, _bstr_t pVal ) {
    HRESULT _hr = put_ConditionFormula(FormulaName, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(233)
inline _bstr_t ISection::GetCssClass ( ) {
    BSTR _result;
    HRESULT _hr = get_CssClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(234)
inline void ISection::PutCssClass ( _bstr_t ppCssClass ) {
    HRESULT _hr = put_CssClass(ppCssClass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IReportObjects wrapper method implementations
//

#pragma implementation_key(235)
inline IUnknownPtr IReportObjects::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(236)
inline IDispatchPtr IReportObjects::GetItem ( const _variant_t & index ) {
    IDispatch * _result;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(237)
inline long IReportObjects::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(238)
inline ISectionPtr IReportObjects::GetParent ( ) {
    struct ISection * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISectionPtr(_result, false);
}

//
// interface IFieldObject wrapper method implementations
//

#pragma implementation_key(239)
inline _bstr_t IFieldObject::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(240)
inline void IFieldObject::PutName ( _bstr_t ppName ) {
    HRESULT _hr = put_Name(ppName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(241)
inline enum CRObjectKind IFieldObject::GetKind ( ) {
    enum CRObjectKind _result;
    HRESULT _hr = get_Kind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(242)
inline long IFieldObject::GetLeft ( ) {
    long _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(243)
inline void IFieldObject::PutLeft ( long pLeft ) {
    HRESULT _hr = put_Left(pLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(244)
inline long IFieldObject::GetTop ( ) {
    long _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(245)
inline void IFieldObject::PutTop ( long pTop ) {
    HRESULT _hr = put_Top(pTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(246)
inline long IFieldObject::GetWidth ( ) {
    long _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(247)
inline void IFieldObject::PutWidth ( long pWidth ) {
    HRESULT _hr = put_Width(pWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(248)
inline long IFieldObject::GetHeight ( ) {
    long _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(249)
inline void IFieldObject::PutHeight ( long pHeight ) {
    HRESULT _hr = put_Height(pHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(250)
inline enum CRLineStyle IFieldObject::GetLeftLineStyle ( ) {
    enum CRLineStyle _result;
    HRESULT _hr = get_LeftLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(251)
inline void IFieldObject::PutLeftLineStyle ( enum CRLineStyle pLeftLineStyle ) {
    HRESULT _hr = put_LeftLineStyle(pLeftLineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(252)
inline enum CRLineStyle IFieldObject::GetRightLineStyle ( ) {
    enum CRLineStyle _result;
    HRESULT _hr = get_RightLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(253)
inline void IFieldObject::PutRightLineStyle ( enum CRLineStyle pRightLineStyle ) {
    HRESULT _hr = put_RightLineStyle(pRightLineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(254)
inline enum CRLineStyle IFieldObject::GetTopLineStyle ( ) {
    enum CRLineStyle _result;
    HRESULT _hr = get_TopLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(255)
inline void IFieldObject::PutTopLineStyle ( enum CRLineStyle pTopLineStyle ) {
    HRESULT _hr = put_TopLineStyle(pTopLineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(256)
inline enum CRLineStyle IFieldObject::GetBottomLineStyle ( ) {
    enum CRLineStyle _result;
    HRESULT _hr = get_BottomLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(257)
inline void IFieldObject::PutBottomLineStyle ( enum CRLineStyle pBottomLineStyle ) {
    HRESULT _hr = put_BottomLineStyle(pBottomLineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(258)
inline VARIANT_BOOL IFieldObject::GetEnableTightHorizontal ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableTightHorizontal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(259)
inline void IFieldObject::PutEnableTightHorizontal ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_EnableTightHorizontal(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(260)
inline VARIANT_BOOL IFieldObject::GetHasDropShadow ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HasDropShadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(261)
inline void IFieldObject::PutHasDropShadow ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_HasDropShadow(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(262)
inline OLE_COLOR IFieldObject::GetBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(263)
inline void IFieldObject::PutBackColor ( OLE_COLOR pBackColor ) {
    HRESULT _hr = put_BackColor(pBackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(264)
inline OLE_COLOR IFieldObject::GetBorderColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BorderColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(265)
inline void IFieldObject::PutBorderColor ( OLE_COLOR pBorderColor ) {
    HRESULT _hr = put_BorderColor(pBorderColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(266)
inline ISectionPtr IFieldObject::GetParent ( ) {
    struct ISection * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISectionPtr(_result, false);
}

#pragma implementation_key(267)
inline VARIANT_BOOL IFieldObject::GetSuppress ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Suppress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(268)
inline void IFieldObject::PutSuppress ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_Suppress(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(269)
inline VARIANT_BOOL IFieldObject::GetCloseAtPageBreak ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_CloseAtPageBreak(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(270)
inline void IFieldObject::PutCloseAtPageBreak ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_CloseAtPageBreak(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(271)
inline VARIANT_BOOL IFieldObject::GetKeepTogether ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_KeepTogether(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(272)
inline void IFieldObject::PutKeepTogether ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_KeepTogether(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(273)
inline OLE_COLOR IFieldObject::GetTextColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_TextColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(274)
inline void IFieldObject::PutTextColor ( OLE_COLOR pTextColor ) {
    HRESULT _hr = put_TextColor(pTextColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(275)
inline IFontDisp * IFieldObject::GetFont ( ) {
    IFontDisp * _result;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(276)
inline void IFieldObject::PutRefFont ( IFontDisp * ppFont ) {
    HRESULT _hr = putref_Font(ppFont);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(277)
inline IDispatchPtr IFieldObject::GetField ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Field(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(278)
inline enum CRAlignment IFieldObject::GetHorAlignment ( ) {
    enum CRAlignment _result;
    HRESULT _hr = get_HorAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(279)
inline void IFieldObject::PutHorAlignment ( enum CRAlignment pHorAlignment ) {
    HRESULT _hr = put_HorAlignment(pHorAlignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(280)
inline _variant_t IFieldObject::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(281)
inline VARIANT_BOOL IFieldObject::GetCanGrow ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_CanGrow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(282)
inline void IFieldObject::PutCanGrow ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_CanGrow(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(283)
inline VARIANT_BOOL IFieldObject::GetSuppressIfDuplicated ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_SuppressIfDuplicated(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(284)
inline void IFieldObject::PutSuppressIfDuplicated ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_SuppressIfDuplicated(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(285)
inline VARIANT_BOOL IFieldObject::GetUseSystemDefaults ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_UseSystemDefaults(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(286)
inline void IFieldObject::PutUseSystemDefaults ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_UseSystemDefaults(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(287)
inline VARIANT_BOOL IFieldObject::GetSuppressIfZero ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_SuppressIfZero(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(288)
inline void IFieldObject::PutSuppressIfZero ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_SuppressIfZero(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(289)
inline enum CRNegativeType IFieldObject::GetNegativeType ( ) {
    enum CRNegativeType _result;
    HRESULT _hr = get_NegativeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(290)
inline void IFieldObject::PutNegativeType ( enum CRNegativeType pNegativeType ) {
    HRESULT _hr = put_NegativeType(pNegativeType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(291)
inline VARIANT_BOOL IFieldObject::GetThousandsSeparators ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ThousandsSeparators(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(292)
inline void IFieldObject::PutThousandsSeparators ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_ThousandsSeparators(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(293)
inline VARIANT_BOOL IFieldObject::GetUseLeadingZero ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_UseLeadingZero(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(294)
inline void IFieldObject::PutUseLeadingZero ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_UseLeadingZero(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(295)
inline short IFieldObject::GetDecimalPlaces ( ) {
    short _result;
    HRESULT _hr = get_DecimalPlaces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(296)
inline void IFieldObject::PutDecimalPlaces ( short pDecimalPlaces ) {
    HRESULT _hr = put_DecimalPlaces(pDecimalPlaces);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(297)
inline enum CRRoundingType IFieldObject::GetRoundingType ( ) {
    enum CRRoundingType _result;
    HRESULT _hr = get_RoundingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(298)
inline void IFieldObject::PutRoundingType ( enum CRRoundingType pRoundingType ) {
    HRESULT _hr = put_RoundingType(pRoundingType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(299)
inline _bstr_t IFieldObject::GetThousandSymbol ( ) {
    BSTR _result;
    HRESULT _hr = get_ThousandSymbol(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(300)
inline void IFieldObject::PutThousandSymbol ( _bstr_t ppThousandSymbol ) {
    HRESULT _hr = put_ThousandSymbol(ppThousandSymbol);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(301)
inline _bstr_t IFieldObject::GetDecimalSymbol ( ) {
    BSTR _result;
    HRESULT _hr = get_DecimalSymbol(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(302)
inline void IFieldObject::PutDecimalSymbol ( _bstr_t ppDecimalSymbol ) {
    HRESULT _hr = put_DecimalSymbol(ppDecimalSymbol);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(303)
inline enum CRCurrencySymbolType IFieldObject::GetCurrencySymbolType ( ) {
    enum CRCurrencySymbolType _result;
    HRESULT _hr = get_CurrencySymbolType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(304)
inline void IFieldObject::PutCurrencySymbolType ( enum CRCurrencySymbolType pCurrencySymbolType ) {
    HRESULT _hr = put_CurrencySymbolType(pCurrencySymbolType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(305)
inline VARIANT_BOOL IFieldObject::GetUseOneSymbolPerPage ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_UseOneSymbolPerPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(306)
inline void IFieldObject::PutUseOneSymbolPerPage ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_UseOneSymbolPerPage(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(307)
inline enum CRCurrencyPositionType IFieldObject::GetCurrencyPositionType ( ) {
    enum CRCurrencyPositionType _result;
    HRESULT _hr = get_CurrencyPositionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(308)
inline void IFieldObject::PutCurrencyPositionType ( enum CRCurrencyPositionType pCurrencyPositionType ) {
    HRESULT _hr = put_CurrencyPositionType(pCurrencyPositionType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(309)
inline _bstr_t IFieldObject::GetCurrencySymbol ( ) {
    BSTR _result;
    HRESULT _hr = get_CurrencySymbol(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(310)
inline void IFieldObject::PutCurrencySymbol ( _bstr_t ppCurrencySymbol ) {
    HRESULT _hr = put_CurrencySymbol(ppCurrencySymbol);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(311)
inline enum CRBooleanOutputType IFieldObject::GetBooleanOutputType ( ) {
    enum CRBooleanOutputType _result;
    HRESULT _hr = get_BooleanOutputType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(312)
inline void IFieldObject::PutBooleanOutputType ( enum CRBooleanOutputType pBooleanOutputType ) {
    HRESULT _hr = put_BooleanOutputType(pBooleanOutputType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(313)
inline enum CRDateWindowsDefaultType IFieldObject::GetDateWindowsDefaultType ( ) {
    enum CRDateWindowsDefaultType _result;
    HRESULT _hr = get_DateWindowsDefaultType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(314)
inline void IFieldObject::PutDateWindowsDefaultType ( enum CRDateWindowsDefaultType pDateWindowsDefaultType ) {
    HRESULT _hr = put_DateWindowsDefaultType(pDateWindowsDefaultType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(315)
inline enum CRDateOrder IFieldObject::GetDateOrder ( ) {
    enum CRDateOrder _result;
    HRESULT _hr = get_DateOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(316)
inline void IFieldObject::PutDateOrder ( enum CRDateOrder pDateOrder ) {
    HRESULT _hr = put_DateOrder(pDateOrder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(317)
inline enum CRYearType IFieldObject::GetYearType ( ) {
    enum CRYearType _result;
    HRESULT _hr = get_YearType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(318)
inline void IFieldObject::PutYearType ( enum CRYearType pYearType ) {
    HRESULT _hr = put_YearType(pYearType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(319)
inline enum CRMonthType IFieldObject::GetMonthType ( ) {
    enum CRMonthType _result;
    HRESULT _hr = get_MonthType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(320)
inline void IFieldObject::PutMonthType ( enum CRMonthType pMonthType ) {
    HRESULT _hr = put_MonthType(pMonthType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(321)
inline enum CRDayType IFieldObject::GetDayType ( ) {
    enum CRDayType _result;
    HRESULT _hr = get_DayType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(322)
inline void IFieldObject::PutDayType ( enum CRDayType pDayType ) {
    HRESULT _hr = put_DayType(pDayType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(323)
inline enum CRLeadingDayType IFieldObject::GetLeadingDayType ( ) {
    enum CRLeadingDayType _result;
    HRESULT _hr = get_LeadingDayType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(324)
inline void IFieldObject::PutLeadingDayType ( enum CRLeadingDayType pLeadingDayType ) {
    HRESULT _hr = put_LeadingDayType(pLeadingDayType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(325)
inline _bstr_t IFieldObject::GetLeadingDaySeparator ( ) {
    BSTR _result;
    HRESULT _hr = get_LeadingDaySeparator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(326)
inline void IFieldObject::PutLeadingDaySeparator ( _bstr_t ppLeadingDaySeparator ) {
    HRESULT _hr = put_LeadingDaySeparator(ppLeadingDaySeparator);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(327)
inline _bstr_t IFieldObject::GetDateFirstSeparator ( ) {
    BSTR _result;
    HRESULT _hr = get_DateFirstSeparator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(328)
inline void IFieldObject::PutDateFirstSeparator ( _bstr_t ppDateFirstSeparator ) {
    HRESULT _hr = put_DateFirstSeparator(ppDateFirstSeparator);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(329)
inline _bstr_t IFieldObject::GetDateSecondSeparator ( ) {
    BSTR _result;
    HRESULT _hr = get_DateSecondSeparator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(330)
inline void IFieldObject::PutDateSecondSeparator ( _bstr_t ppDateSecondSeparator ) {
    HRESULT _hr = put_DateSecondSeparator(ppDateSecondSeparator);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(331)
inline enum CRTimeBase IFieldObject::GetTimeBase ( ) {
    enum CRTimeBase _result;
    HRESULT _hr = get_TimeBase(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(332)
inline void IFieldObject::PutTimeBase ( enum CRTimeBase pTimeBase ) {
    HRESULT _hr = put_TimeBase(pTimeBase);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(333)
inline enum CRAmPmType IFieldObject::GetAmPmType ( ) {
    enum CRAmPmType _result;
    HRESULT _hr = get_AmPmType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(334)
inline void IFieldObject::PutAmPmType ( enum CRAmPmType pAmPmType ) {
    HRESULT _hr = put_AmPmType(pAmPmType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(335)
inline enum CRHourType IFieldObject::GetHourType ( ) {
    enum CRHourType _result;
    HRESULT _hr = get_HourType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(336)
inline void IFieldObject::PutHourType ( enum CRHourType pHourType ) {
    HRESULT _hr = put_HourType(pHourType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(337)
inline enum CRMinuteType IFieldObject::GetMinuteType ( ) {
    enum CRMinuteType _result;
    HRESULT _hr = get_MinuteType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(338)
inline void IFieldObject::PutMinuteType ( enum CRMinuteType pMinuteType ) {
    HRESULT _hr = put_MinuteType(pMinuteType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(339)
inline enum CRSecondType IFieldObject::GetSecondType ( ) {
    enum CRSecondType _result;
    HRESULT _hr = get_SecondType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(340)
inline void IFieldObject::PutSecondType ( enum CRSecondType pSecondType ) {
    HRESULT _hr = put_SecondType(pSecondType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(341)
inline _bstr_t IFieldObject::GetPmString ( ) {
    BSTR _result;
    HRESULT _hr = get_PmString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(342)
inline void IFieldObject::PutPmString ( _bstr_t ppPmString ) {
    HRESULT _hr = put_PmString(ppPmString);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(343)
inline _bstr_t IFieldObject::GetAmString ( ) {
    BSTR _result;
    HRESULT _hr = get_AmString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(344)
inline void IFieldObject::PutAmString ( _bstr_t ppAmString ) {
    HRESULT _hr = put_AmString(ppAmString);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(345)
inline _bstr_t IFieldObject::GetMinuteSecondSeparator ( ) {
    BSTR _result;
    HRESULT _hr = get_MinuteSecondSeparator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(346)
inline void IFieldObject::PutMinuteSecondSeparator ( _bstr_t ppMinuteSecondSeparator ) {
    HRESULT _hr = put_MinuteSecondSeparator(ppMinuteSecondSeparator);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(347)
inline _bstr_t IFieldObject::GetHourMinuteSeparator ( ) {
    BSTR _result;
    HRESULT _hr = get_HourMinuteSeparator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(348)
inline void IFieldObject::PutHourMinuteSeparator ( _bstr_t ppHourMinuteSeparator ) {
    HRESULT _hr = put_HourMinuteSeparator(ppHourMinuteSeparator);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(349)
inline short IFieldObject::GetMaxNumberOfLines ( ) {
    short _result;
    HRESULT _hr = get_MaxNumberOfLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(350)
inline void IFieldObject::PutMaxNumberOfLines ( short pMaxNumberOfLines ) {
    HRESULT _hr = put_MaxNumberOfLines(pMaxNumberOfLines);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(351)
inline _variant_t IFieldObject::GetPreviousValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PreviousValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(352)
inline _variant_t IFieldObject::GetNextValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_NextValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(353)
inline enum CRLeadingDayPosition IFieldObject::GetLeadingDayPosition ( ) {
    enum CRLeadingDayPosition _result;
    HRESULT _hr = get_LeadingDayPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(354)
inline void IFieldObject::PutLeadingDayPosition ( enum CRLeadingDayPosition pLeadingDayPosition ) {
    HRESULT _hr = put_LeadingDayPosition(pLeadingDayPosition);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(355)
inline enum CRDateEraType IFieldObject::GetDateEraType ( ) {
    enum CRDateEraType _result;
    HRESULT _hr = get_DateEraType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(356)
inline void IFieldObject::PutDateEraType ( enum CRDateEraType pDateEraType ) {
    HRESULT _hr = put_DateEraType(pDateEraType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(357)
inline enum CRDateCalendarType IFieldObject::GetDateCalendarType ( ) {
    enum CRDateCalendarType _result;
    HRESULT _hr = get_DateCalendarType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(358)
inline void IFieldObject::PutDateCalendarType ( enum CRDateCalendarType pDateCalendarType ) {
    HRESULT _hr = put_DateCalendarType(pDateCalendarType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(359)
inline _bstr_t IFieldObject::GetDatePrefixSeparator ( ) {
    BSTR _result;
    HRESULT _hr = get_DatePrefixSeparator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(360)
inline void IFieldObject::PutDatePrefixSeparator ( _bstr_t ppDatePrefixSeparator ) {
    HRESULT _hr = put_DatePrefixSeparator(ppDatePrefixSeparator);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(361)
inline _bstr_t IFieldObject::GetDateSuffixSeparator ( ) {
    BSTR _result;
    HRESULT _hr = get_DateSuffixSeparator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(362)
inline void IFieldObject::PutDateSuffixSeparator ( _bstr_t ppDateSuffixSeparator ) {
    HRESULT _hr = put_DateSuffixSeparator(ppDateSuffixSeparator);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(363)
inline HRESULT IFieldObject::SetUnboundFieldSource ( _bstr_t pUnboundFieldSource ) {
    HRESULT _hr = raw_SetUnboundFieldSource(pUnboundFieldSource);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(364)
inline VARIANT_BOOL IFieldObject::GetDisplayReverseSign ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayReverseSign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(365)
inline void IFieldObject::PutDisplayReverseSign ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_DisplayReverseSign(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(366)
inline _bstr_t IFieldObject::GetZeroValueString ( ) {
    BSTR _result;
    HRESULT _hr = get_ZeroValueString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(367)
inline void IFieldObject::PutZeroValueString ( _bstr_t ppZeroValue ) {
    HRESULT _hr = put_ZeroValueString(ppZeroValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(368)
inline long IFieldObject::GetCharacterSpacing ( ) {
    long _result;
    HRESULT _hr = get_CharacterSpacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(369)
inline void IFieldObject::PutCharacterSpacing ( long pCharacterSpacing ) {
    HRESULT _hr = put_CharacterSpacing(pCharacterSpacing);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(370)
inline double IFieldObject::GetLineSpacing ( ) {
    double _result;
    HRESULT _hr = get_LineSpacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(371)
inline enum CRLineSpacingType IFieldObject::GetLineSpacingType ( ) {
    enum CRLineSpacingType _result;
    HRESULT _hr = get_LineSpacingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(372)
inline HRESULT IFieldObject::SetLineSpacing ( double LineSpacing, enum CRLineSpacingType LineSpacingType ) {
    HRESULT _hr = raw_SetLineSpacing(LineSpacing, LineSpacingType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(373)
inline enum CRRotationAngle IFieldObject::GetTextRotationAngle ( ) {
    enum CRRotationAngle _result;
    HRESULT _hr = get_TextRotationAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(374)
inline void IFieldObject::PutTextRotationAngle ( enum CRRotationAngle pRotationAngle ) {
    HRESULT _hr = put_TextRotationAngle(pRotationAngle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(375)
inline long IFieldObject::GetFirstLineIndent ( ) {
    long _result;
    HRESULT _hr = get_FirstLineIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(376)
inline void IFieldObject::PutFirstLineIndent ( long pFirstLineIndent ) {
    HRESULT _hr = put_FirstLineIndent(pFirstLineIndent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(377)
inline long IFieldObject::GetLeftIndent ( ) {
    long _result;
    HRESULT _hr = get_LeftIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(378)
inline void IFieldObject::PutLeftIndent ( long pLeftIndent ) {
    HRESULT _hr = put_LeftIndent(pLeftIndent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(379)
inline long IFieldObject::GetRightIndent ( ) {
    long _result;
    HRESULT _hr = get_RightIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(380)
inline void IFieldObject::PutRightIndent ( long pRightIndent ) {
    HRESULT _hr = put_RightIndent(pRightIndent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(381)
inline enum CRTextFormat IFieldObject::GetTextFormat ( ) {
    enum CRTextFormat _result;
    HRESULT _hr = get_TextFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(382)
inline void IFieldObject::PutTextFormat ( enum CRTextFormat pTextFormat ) {
    HRESULT _hr = put_TextFormat(pTextFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(383)
inline _bstr_t IFieldObject::GetConditionFormula ( const _variant_t & FormulaType ) {
    BSTR _result;
    HRESULT _hr = get_ConditionFormula(FormulaType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(384)
inline void IFieldObject::PutConditionFormula ( const _variant_t & FormulaType, _bstr_t pVal ) {
    HRESULT _hr = put_ConditionFormula(FormulaType, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(385)
inline _bstr_t IFieldObject::GetCssClass ( ) {
    BSTR _result;
    HRESULT _hr = get_CssClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(386)
inline void IFieldObject::PutCssClass ( _bstr_t ppCssClass ) {
    HRESULT _hr = put_CssClass(ppCssClass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(387)
inline enum CRHyperlinkType IFieldObject::GetHyperlinkType ( ) {
    enum CRHyperlinkType _result;
    HRESULT _hr = get_HyperlinkType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(388)
inline void IFieldObject::PutHyperlinkType ( enum CRHyperlinkType pType ) {
    HRESULT _hr = put_HyperlinkType(pType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(389)
inline _bstr_t IFieldObject::GetHyperlinkText ( ) {
    BSTR _result;
    HRESULT _hr = get_HyperlinkText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(390)
inline void IFieldObject::PutHyperlinkText ( _bstr_t pText ) {
    HRESULT _hr = put_HyperlinkText(pText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ITextObject wrapper method implementations
//

#pragma implementation_key(391)
inline _bstr_t ITextObject::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(392)
inline void ITextObject::PutName ( _bstr_t ppName ) {
    HRESULT _hr = put_Name(ppName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(393)
inline enum CRObjectKind ITextObject::GetKind ( ) {
    enum CRObjectKind _result;
    HRESULT _hr = get_Kind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(394)
inline long ITextObject::GetLeft ( ) {
    long _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(395)
inline void ITextObject::PutLeft ( long pLeft ) {
    HRESULT _hr = put_Left(pLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(396)
inline long ITextObject::GetTop ( ) {
    long _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(397)
inline void ITextObject::PutTop ( long pTop ) {
    HRESULT _hr = put_Top(pTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(398)
inline long ITextObject::GetWidth ( ) {
    long _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(399)
inline void ITextObject::PutWidth ( long pWidth ) {
    HRESULT _hr = put_Width(pWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(400)
inline long ITextObject::GetHeight ( ) {
    long _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(401)
inline void ITextObject::PutHeight ( long pHeight ) {
    HRESULT _hr = put_Height(pHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(402)
inline enum CRLineStyle ITextObject::GetLeftLineStyle ( ) {
    enum CRLineStyle _result;
    HRESULT _hr = get_LeftLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(403)
inline void ITextObject::PutLeftLineStyle ( enum CRLineStyle pLeftLineStyle ) {
    HRESULT _hr = put_LeftLineStyle(pLeftLineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(404)
inline enum CRLineStyle ITextObject::GetRightLineStyle ( ) {
    enum CRLineStyle _result;
    HRESULT _hr = get_RightLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(405)
inline void ITextObject::PutRightLineStyle ( enum CRLineStyle pRightLineStyle ) {
    HRESULT _hr = put_RightLineStyle(pRightLineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(406)
inline enum CRLineStyle ITextObject::GetTopLineStyle ( ) {
    enum CRLineStyle _result;
    HRESULT _hr = get_TopLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(407)
inline void ITextObject::PutTopLineStyle ( enum CRLineStyle pTopLineStyle ) {
    HRESULT _hr = put_TopLineStyle(pTopLineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(408)
inline enum CRLineStyle ITextObject::GetBottomLineStyle ( ) {
    enum CRLineStyle _result;
    HRESULT _hr = get_BottomLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(409)
inline void ITextObject::PutBottomLineStyle ( enum CRLineStyle pBottomLineStyle ) {
    HRESULT _hr = put_BottomLineStyle(pBottomLineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(410)
inline VARIANT_BOOL ITextObject::GetHasDropShadow ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HasDropShadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(411)
inline void ITextObject::PutHasDropShadow ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_HasDropShadow(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(412)
inline OLE_COLOR ITextObject::GetBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(413)
inline void ITextObject::PutBackColor ( OLE_COLOR pBackColor ) {
    HRESULT _hr = put_BackColor(pBackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(414)
inline OLE_COLOR ITextObject::GetBorderColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BorderColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(415)
inline void ITextObject::PutBorderColor ( OLE_COLOR pBorderColor ) {
    HRESULT _hr = put_BorderColor(pBorderColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(416)
inline ISectionPtr ITextObject::GetParent ( ) {
    struct ISection * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISectionPtr(_result, false);
}

#pragma implementation_key(417)
inline VARIANT_BOOL ITextObject::GetSuppress ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Suppress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(418)
inline void ITextObject::PutSuppress ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_Suppress(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(419)
inline VARIANT_BOOL ITextObject::GetCloseAtPageBreak ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_CloseAtPageBreak(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(420)
inline void ITextObject::PutCloseAtPageBreak ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_CloseAtPageBreak(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(421)
inline VARIANT_BOOL ITextObject::GetKeepTogether ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_KeepTogether(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(422)
inline void ITextObject::PutKeepTogether ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_KeepTogether(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(423)
inline OLE_COLOR ITextObject::GetTextColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_TextColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(424)
inline void ITextObject::PutTextColor ( OLE_COLOR pTextColor ) {
    HRESULT _hr = put_TextColor(pTextColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(425)
inline IFontDisp * ITextObject::GetFont ( ) {
    IFontDisp * _result;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(426)
inline void ITextObject::PutRefFont ( IFontDisp * ppFont ) {
    HRESULT _hr = putref_Font(ppFont);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(427)
inline _bstr_t ITextObject::GetText ( ) {
    BSTR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(428)
inline enum CRAlignment ITextObject::GetHorAlignment ( ) {
    enum CRAlignment _result;
    HRESULT _hr = get_HorAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(429)
inline void ITextObject::PutHorAlignment ( enum CRAlignment pHorAlignment ) {
    HRESULT _hr = put_HorAlignment(pHorAlignment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(430)
inline VARIANT_BOOL ITextObject::GetSuppressIfDuplicated ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_SuppressIfDuplicated(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(431)
inline void ITextObject::PutSuppressIfDuplicated ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_SuppressIfDuplicated(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(432)
inline short ITextObject::GetMaxNumberOfLines ( ) {
    short _result;
    HRESULT _hr = get_MaxNumberOfLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(433)
inline void ITextObject::PutMaxNumberOfLines ( short pMaxNumberOfLines ) {
    HRESULT _hr = put_MaxNumberOfLines(pMaxNumberOfLines);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(434)
inline VARIANT_BOOL ITextObject::GetCanGrow ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_CanGrow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(435)
inline void ITextObject::PutCanGrow ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_CanGrow(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(436)
inline HRESULT ITextObject::SetText ( _bstr_t pText ) {
    HRESULT _hr = raw_SetText(pText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(437)
inline long ITextObject::GetCharacterSpacing ( ) {
    long _result;
    HRESULT _hr = get_CharacterSpacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(438)
inline void ITextObject::PutCharacterSpacing ( long pCharacterSpacing ) {
    HRESULT _hr = put_CharacterSpacing(pCharacterSpacing);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(439)
inline double ITextObject::GetLineSpacing ( ) {
    double _result;
    HRESULT _hr = get_LineSpacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(440)
inline enum CRLineSpacingType ITextObject::GetLineSpacingType ( ) {
    enum CRLineSpacingType _result;
    HRESULT _hr = get_LineSpacingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(441)
inline HRESULT ITextObject::SetLineSpacing ( double LineSpacing, enum CRLineSpacingType LineSpacingType ) {
    HRESULT _hr = raw_SetLineSpacing(LineSpacing, LineSpacingType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(442)
inline enum CRRotationAngle ITextObject::GetTextRotationAngle ( ) {
    enum CRRotationAngle _result;
    HRESULT _hr = get_TextRotationAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(443)
inline void ITextObject::PutTextRotationAngle ( enum CRRotationAngle pRotationAngle ) {
    HRESULT _hr = put_TextRotationAngle(pRotationAngle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(444)
inline long ITextObject::GetFirstLineIndent ( ) {
    long _result;
    HRESULT _hr = get_FirstLineIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(445)
inline void ITextObject::PutFirstLineIndent ( long pFirstLineIndent ) {
    HRESULT _hr = put_FirstLineIndent(pFirstLineIndent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(446)
inline long ITextObject::GetLeftIndent ( ) {
    long _result;
    HRESULT _hr = get_LeftIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(447)
inline void ITextObject::PutLeftIndent ( long pLeftIndent ) {
    HRESULT _hr = put_LeftIndent(pLeftIndent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(448)
inline long ITextObject::GetRightIndent ( ) {
    long _result;
    HRESULT _hr = get_RightIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(449)
inline void ITextObject::PutRightIndent ( long pRightIndent ) {
    HRESULT _hr = put_RightIndent(pRightIndent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(450)
inline _bstr_t ITextObject::GetConditionFormula ( const _variant_t & FormulaType ) {
    BSTR _result;
    HRESULT _hr = get_ConditionFormula(FormulaType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(451)
inline void ITextObject::PutConditionFormula ( const _variant_t & FormulaType, _bstr_t pVal ) {
    HRESULT _hr = put_ConditionFormula(FormulaType, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(452)
inline IFieldElementsPtr ITextObject::GetFieldElements ( ) {
    struct IFieldElements * _result;
    HRESULT _hr = get_FieldElements(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFieldElementsPtr(_result, false);
}

#pragma implementation_key(453)
inline _bstr_t ITextObject::GetCssClass ( ) {
    BSTR _result;
    HRESULT _hr = get_CssClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(454)
inline void ITextObject::PutCssClass ( _bstr_t ppCssClass ) {
    HRESULT _hr = put_CssClass(ppCssClass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(455)
inline enum CRHyperlinkType ITextObject::GetHyperlinkType ( ) {
    enum CRHyperlinkType _result;
    HRESULT _hr = get_HyperlinkType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(456)
inline void ITextObject::PutHyperlinkType ( enum CRHyperlinkType pType ) {
    HRESULT _hr = put_HyperlinkType(pType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(457)
inline _bstr_t ITextObject::GetHyperlinkText ( ) {
    BSTR _result;
    HRESULT _hr = get_HyperlinkText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(458)
inline void ITextObject::PutHyperlinkText ( _bstr_t pText ) {
    HRESULT _hr = put_HyperlinkText(pText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IFieldElements wrapper method implementations
//

#pragma implementation_key(459)
inline IUnknownPtr IFieldElements::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(460)
inline IFieldElementPtr IFieldElements::GetItem ( long index ) {
    struct IFieldElement * _result;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFieldElementPtr(_result, false);
}

#pragma implementation_key(461)
inline long IFieldElements::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(462)
inline ITextObjectPtr IFieldElements::GetParent ( ) {
    struct ITextObject * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextObjectPtr(_result, false);
}

#pragma implementation_key(463)
inline HRESULT IFieldElements::Add ( long position, const _variant_t & Field ) {
    HRESULT _hr = raw_Add(position, Field);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(464)
inline HRESULT IFieldElements::Delete ( long index ) {
    HRESULT _hr = raw_Delete(index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IFieldElement wrapper method implementations
//

#pragma implementation_key(465)
inline IFontDisp * IFieldElement::GetFont ( ) {
    IFontDisp * _result;
    HRESULT _hr = get_Font(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(466)
inline void IFieldElement::PutRefFont ( IFontDisp * ppFont ) {
    HRESULT _hr = putref_Font(ppFont);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(467)
inline OLE_COLOR IFieldElement::GetColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_Color(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(468)
inline void IFieldElement::PutColor ( OLE_COLOR pTextColor ) {
    HRESULT _hr = put_Color(pTextColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(469)
inline IFieldDefinitionPtr IFieldElement::GetFieldDefinition ( ) {
    struct IFieldDefinition * _result;
    HRESULT _hr = get_FieldDefinition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFieldDefinitionPtr(_result, false);
}

#pragma implementation_key(470)
inline void IFieldElement::PutFieldDefinition ( struct IFieldDefinition * ppFieldDefinition ) {
    HRESULT _hr = put_FieldDefinition(ppFieldDefinition);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(471)
inline ITextObjectPtr IFieldElement::GetParent ( ) {
    struct ITextObject * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITextObjectPtr(_result, false);
}

#pragma implementation_key(472)
inline VARIANT_BOOL IFieldElement::GetSuppressIfDuplicated ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_SuppressIfDuplicated(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(473)
inline void IFieldElement::PutSuppressIfDuplicated ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_SuppressIfDuplicated(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(474)
inline VARIANT_BOOL IFieldElement::GetUseSystemDefaults ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_UseSystemDefaults(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(475)
inline void IFieldElement::PutUseSystemDefaults ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_UseSystemDefaults(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(476)
inline VARIANT_BOOL IFieldElement::GetSuppressIfZero ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_SuppressIfZero(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(477)
inline void IFieldElement::PutSuppressIfZero ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_SuppressIfZero(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(478)
inline enum CRNegativeType IFieldElement::GetNegativeType ( ) {
    enum CRNegativeType _result;
    HRESULT _hr = get_NegativeType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(479)
inline void IFieldElement::PutNegativeType ( enum CRNegativeType pNegativeType ) {
    HRESULT _hr = put_NegativeType(pNegativeType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(480)
inline VARIANT_BOOL IFieldElement::GetThousandsSeparators ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ThousandsSeparators(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(481)
inline void IFieldElement::PutThousandsSeparators ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_ThousandsSeparators(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(482)
inline VARIANT_BOOL IFieldElement::GetUseLeadingZero ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_UseLeadingZero(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(483)
inline void IFieldElement::PutUseLeadingZero ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_UseLeadingZero(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(484)
inline short IFieldElement::GetDecimalPlaces ( ) {
    short _result;
    HRESULT _hr = get_DecimalPlaces(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(485)
inline void IFieldElement::PutDecimalPlaces ( short pDecimalPlaces ) {
    HRESULT _hr = put_DecimalPlaces(pDecimalPlaces);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(486)
inline enum CRRoundingType IFieldElement::GetRoundingType ( ) {
    enum CRRoundingType _result;
    HRESULT _hr = get_RoundingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(487)
inline void IFieldElement::PutRoundingType ( enum CRRoundingType pRoundingType ) {
    HRESULT _hr = put_RoundingType(pRoundingType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(488)
inline _bstr_t IFieldElement::GetThousandSymbol ( ) {
    BSTR _result;
    HRESULT _hr = get_ThousandSymbol(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(489)
inline void IFieldElement::PutThousandSymbol ( _bstr_t ppThousandSymbol ) {
    HRESULT _hr = put_ThousandSymbol(ppThousandSymbol);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(490)
inline _bstr_t IFieldElement::GetDecimalSymbol ( ) {
    BSTR _result;
    HRESULT _hr = get_DecimalSymbol(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(491)
inline void IFieldElement::PutDecimalSymbol ( _bstr_t ppDecimalSymbol ) {
    HRESULT _hr = put_DecimalSymbol(ppDecimalSymbol);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(492)
inline enum CRCurrencySymbolType IFieldElement::GetCurrencySymbolType ( ) {
    enum CRCurrencySymbolType _result;
    HRESULT _hr = get_CurrencySymbolType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(493)
inline void IFieldElement::PutCurrencySymbolType ( enum CRCurrencySymbolType pCurrencySymbolType ) {
    HRESULT _hr = put_CurrencySymbolType(pCurrencySymbolType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(494)
inline VARIANT_BOOL IFieldElement::GetUseOneSymbolPerPage ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_UseOneSymbolPerPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(495)
inline void IFieldElement::PutUseOneSymbolPerPage ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_UseOneSymbolPerPage(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(496)
inline enum CRCurrencyPositionType IFieldElement::GetCurrencyPositionType ( ) {
    enum CRCurrencyPositionType _result;
    HRESULT _hr = get_CurrencyPositionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(497)
inline void IFieldElement::PutCurrencyPositionType ( enum CRCurrencyPositionType pCurrencyPositionType ) {
    HRESULT _hr = put_CurrencyPositionType(pCurrencyPositionType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(498)
inline _bstr_t IFieldElement::GetCurrencySymbol ( ) {
    BSTR _result;
    HRESULT _hr = get_CurrencySymbol(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(499)
inline void IFieldElement::PutCurrencySymbol ( _bstr_t ppCurrencySymbol ) {
    HRESULT _hr = put_CurrencySymbol(ppCurrencySymbol);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(500)
inline enum CRBooleanOutputType IFieldElement::GetBooleanOutputType ( ) {
    enum CRBooleanOutputType _result;
    HRESULT _hr = get_BooleanOutputType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(501)
inline void IFieldElement::PutBooleanOutputType ( enum CRBooleanOutputType pBooleanOutputType ) {
    HRESULT _hr = put_BooleanOutputType(pBooleanOutputType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(502)
inline enum CRDateWindowsDefaultType IFieldElement::GetDateWindowsDefaultType ( ) {
    enum CRDateWindowsDefaultType _result;
    HRESULT _hr = get_DateWindowsDefaultType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(503)
inline void IFieldElement::PutDateWindowsDefaultType ( enum CRDateWindowsDefaultType pDateWindowsDefaultType ) {
    HRESULT _hr = put_DateWindowsDefaultType(pDateWindowsDefaultType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(504)
inline enum CRDateOrder IFieldElement::GetDateOrder ( ) {
    enum CRDateOrder _result;
    HRESULT _hr = get_DateOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(505)
inline void IFieldElement::PutDateOrder ( enum CRDateOrder pDateOrder ) {
    HRESULT _hr = put_DateOrder(pDateOrder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(506)
inline enum CRYearType IFieldElement::GetYearType ( ) {
    enum CRYearType _result;
    HRESULT _hr = get_YearType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(507)
inline void IFieldElement::PutYearType ( enum CRYearType pYearType ) {
    HRESULT _hr = put_YearType(pYearType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(508)
inline enum CRMonthType IFieldElement::GetMonthType ( ) {
    enum CRMonthType _result;
    HRESULT _hr = get_MonthType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(509)
inline void IFieldElement::PutMonthType ( enum CRMonthType pMonthType ) {
    HRESULT _hr = put_MonthType(pMonthType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(510)
inline enum CRDayType IFieldElement::GetDayType ( ) {
    enum CRDayType _result;
    HRESULT _hr = get_DayType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(511)
inline void IFieldElement::PutDayType ( enum CRDayType pDayType ) {
    HRESULT _hr = put_DayType(pDayType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(512)
inline enum CRLeadingDayType IFieldElement::GetLeadingDayType ( ) {
    enum CRLeadingDayType _result;
    HRESULT _hr = get_LeadingDayType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(513)
inline void IFieldElement::PutLeadingDayType ( enum CRLeadingDayType pLeadingDayType ) {
    HRESULT _hr = put_LeadingDayType(pLeadingDayType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(514)
inline _bstr_t IFieldElement::GetLeadingDaySeparator ( ) {
    BSTR _result;
    HRESULT _hr = get_LeadingDaySeparator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(515)
inline void IFieldElement::PutLeadingDaySeparator ( _bstr_t ppLeadingDaySeparator ) {
    HRESULT _hr = put_LeadingDaySeparator(ppLeadingDaySeparator);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(516)
inline _bstr_t IFieldElement::GetDateFirstSeparator ( ) {
    BSTR _result;
    HRESULT _hr = get_DateFirstSeparator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(517)
inline void IFieldElement::PutDateFirstSeparator ( _bstr_t ppDateFirstSeparator ) {
    HRESULT _hr = put_DateFirstSeparator(ppDateFirstSeparator);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(518)
inline _bstr_t IFieldElement::GetDateSecondSeparator ( ) {
    BSTR _result;
    HRESULT _hr = get_DateSecondSeparator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(519)
inline void IFieldElement::PutDateSecondSeparator ( _bstr_t ppDateSecondSeparator ) {
    HRESULT _hr = put_DateSecondSeparator(ppDateSecondSeparator);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(520)
inline enum CRTimeBase IFieldElement::GetTimeBase ( ) {
    enum CRTimeBase _result;
    HRESULT _hr = get_TimeBase(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(521)
inline void IFieldElement::PutTimeBase ( enum CRTimeBase pTimeBase ) {
    HRESULT _hr = put_TimeBase(pTimeBase);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(522)
inline enum CRAmPmType IFieldElement::GetAmPmType ( ) {
    enum CRAmPmType _result;
    HRESULT _hr = get_AmPmType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(523)
inline void IFieldElement::PutAmPmType ( enum CRAmPmType pAmPmType ) {
    HRESULT _hr = put_AmPmType(pAmPmType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(524)
inline enum CRHourType IFieldElement::GetHourType ( ) {
    enum CRHourType _result;
    HRESULT _hr = get_HourType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(525)
inline void IFieldElement::PutHourType ( enum CRHourType pHourType ) {
    HRESULT _hr = put_HourType(pHourType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(526)
inline enum CRMinuteType IFieldElement::GetMinuteType ( ) {
    enum CRMinuteType _result;
    HRESULT _hr = get_MinuteType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(527)
inline void IFieldElement::PutMinuteType ( enum CRMinuteType pMinuteType ) {
    HRESULT _hr = put_MinuteType(pMinuteType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(528)
inline enum CRSecondType IFieldElement::GetSecondType ( ) {
    enum CRSecondType _result;
    HRESULT _hr = get_SecondType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(529)
inline void IFieldElement::PutSecondType ( enum CRSecondType pSecondType ) {
    HRESULT _hr = put_SecondType(pSecondType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(530)
inline _bstr_t IFieldElement::GetPmString ( ) {
    BSTR _result;
    HRESULT _hr = get_PmString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(531)
inline void IFieldElement::PutPmString ( _bstr_t ppPmString ) {
    HRESULT _hr = put_PmString(ppPmString);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(532)
inline _bstr_t IFieldElement::GetAmString ( ) {
    BSTR _result;
    HRESULT _hr = get_AmString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(533)
inline void IFieldElement::PutAmString ( _bstr_t ppAmString ) {
    HRESULT _hr = put_AmString(ppAmString);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(534)
inline _bstr_t IFieldElement::GetMinuteSecondSeparator ( ) {
    BSTR _result;
    HRESULT _hr = get_MinuteSecondSeparator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(535)
inline void IFieldElement::PutMinuteSecondSeparator ( _bstr_t ppMinuteSecondSeparator ) {
    HRESULT _hr = put_MinuteSecondSeparator(ppMinuteSecondSeparator);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(536)
inline _bstr_t IFieldElement::GetHourMinuteSeparator ( ) {
    BSTR _result;
    HRESULT _hr = get_HourMinuteSeparator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(537)
inline void IFieldElement::PutHourMinuteSeparator ( _bstr_t ppHourMinuteSeparator ) {
    HRESULT _hr = put_HourMinuteSeparator(ppHourMinuteSeparator);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(538)
inline short IFieldElement::GetMaxNumberOfLines ( ) {
    short _result;
    HRESULT _hr = get_MaxNumberOfLines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(539)
inline void IFieldElement::PutMaxNumberOfLines ( short pMaxNumberOfLines ) {
    HRESULT _hr = put_MaxNumberOfLines(pMaxNumberOfLines);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(540)
inline enum CRLeadingDayPosition IFieldElement::GetLeadingDayPosition ( ) {
    enum CRLeadingDayPosition _result;
    HRESULT _hr = get_LeadingDayPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(541)
inline void IFieldElement::PutLeadingDayPosition ( enum CRLeadingDayPosition pLeadingDayPosition ) {
    HRESULT _hr = put_LeadingDayPosition(pLeadingDayPosition);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(542)
inline enum CRDateEraType IFieldElement::GetDateEraType ( ) {
    enum CRDateEraType _result;
    HRESULT _hr = get_DateEraType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(543)
inline void IFieldElement::PutDateEraType ( enum CRDateEraType pDateEraType ) {
    HRESULT _hr = put_DateEraType(pDateEraType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(544)
inline enum CRDateCalendarType IFieldElement::GetDateCalendarType ( ) {
    enum CRDateCalendarType _result;
    HRESULT _hr = get_DateCalendarType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(545)
inline void IFieldElement::PutDateCalendarType ( enum CRDateCalendarType pDateCalendarType ) {
    HRESULT _hr = put_DateCalendarType(pDateCalendarType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(546)
inline _bstr_t IFieldElement::GetDatePrefixSeparator ( ) {
    BSTR _result;
    HRESULT _hr = get_DatePrefixSeparator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(547)
inline void IFieldElement::PutDatePrefixSeparator ( _bstr_t ppDatePrefixSeparator ) {
    HRESULT _hr = put_DatePrefixSeparator(ppDatePrefixSeparator);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(548)
inline _bstr_t IFieldElement::GetDateSuffixSeparator ( ) {
    BSTR _result;
    HRESULT _hr = get_DateSuffixSeparator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(549)
inline void IFieldElement::PutDateSuffixSeparator ( _bstr_t ppDateSuffixSeparator ) {
    HRESULT _hr = put_DateSuffixSeparator(ppDateSuffixSeparator);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(550)
inline VARIANT_BOOL IFieldElement::GetDisplayReverseSign ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisplayReverseSign(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(551)
inline void IFieldElement::PutDisplayReverseSign ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_DisplayReverseSign(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(552)
inline _bstr_t IFieldElement::GetZeroValueString ( ) {
    BSTR _result;
    HRESULT _hr = get_ZeroValueString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(553)
inline void IFieldElement::PutZeroValueString ( _bstr_t ppZeroValue ) {
    HRESULT _hr = put_ZeroValueString(ppZeroValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(554)
inline long IFieldElement::GetCharacterSpacing ( ) {
    long _result;
    HRESULT _hr = get_CharacterSpacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(555)
inline void IFieldElement::PutCharacterSpacing ( long pCharacterSpacing ) {
    HRESULT _hr = put_CharacterSpacing(pCharacterSpacing);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(556)
inline double IFieldElement::GetLineSpacing ( ) {
    double _result;
    HRESULT _hr = get_LineSpacing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(557)
inline enum CRLineSpacingType IFieldElement::GetLineSpacingType ( ) {
    enum CRLineSpacingType _result;
    HRESULT _hr = get_LineSpacingType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(558)
inline HRESULT IFieldElement::SetLineSpacing ( double LineSpacing, enum CRLineSpacingType LineSpacingType ) {
    HRESULT _hr = raw_SetLineSpacing(LineSpacing, LineSpacingType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(559)
inline long IFieldElement::GetFirstLineIndent ( ) {
    long _result;
    HRESULT _hr = get_FirstLineIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(560)
inline void IFieldElement::PutFirstLineIndent ( long pFirstLineIndent ) {
    HRESULT _hr = put_FirstLineIndent(pFirstLineIndent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(561)
inline long IFieldElement::GetLeftIndent ( ) {
    long _result;
    HRESULT _hr = get_LeftIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(562)
inline void IFieldElement::PutLeftIndent ( long pLeftIndent ) {
    HRESULT _hr = put_LeftIndent(pLeftIndent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(563)
inline long IFieldElement::GetRightIndent ( ) {
    long _result;
    HRESULT _hr = get_RightIndent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(564)
inline void IFieldElement::PutRightIndent ( long pRightIndent ) {
    HRESULT _hr = put_RightIndent(pRightIndent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(565)
inline enum CRTextFormat IFieldElement::GetTextFormat ( ) {
    enum CRTextFormat _result;
    HRESULT _hr = get_TextFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(566)
inline void IFieldElement::PutTextFormat ( enum CRTextFormat pTextFormat ) {
    HRESULT _hr = put_TextFormat(pTextFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(567)
inline _bstr_t IFieldElement::GetConditionFormula ( const _variant_t & FormulaType ) {
    BSTR _result;
    HRESULT _hr = get_ConditionFormula(FormulaType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(568)
inline void IFieldElement::PutConditionFormula ( const _variant_t & FormulaType, _bstr_t pVal ) {
    HRESULT _hr = put_ConditionFormula(FormulaType, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(569)
inline long IFieldElement::GetBeginPosition ( ) {
    long _result;
    HRESULT _hr = get_BeginPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(570)
inline long IFieldElement::GetEndPosition ( ) {
    long _result;
    HRESULT _hr = get_EndPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IFieldDefinition wrapper method implementations
//

#pragma implementation_key(571)
inline enum CRFieldKind IFieldDefinition::GetKind ( ) {
    enum CRFieldKind _result;
    HRESULT _hr = get_Kind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(572)
inline CRFieldValueType IFieldDefinition::GetValueType ( ) {
    CRFieldValueType _result;
    HRESULT _hr = get_ValueType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(573)
inline short IFieldDefinition::GetNumberOfBytes ( ) {
    short _result;
    HRESULT _hr = get_NumberOfBytes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(574)
inline _bstr_t IFieldDefinition::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(575)
inline _variant_t IFieldDefinition::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(576)
inline IReportPtr IFieldDefinition::GetParent ( ) {
    struct IReport * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IReportPtr(_result, false);
}

#pragma implementation_key(577)
inline _variant_t IFieldDefinition::GetPreviousValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PreviousValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(578)
inline _variant_t IFieldDefinition::GetNextValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_NextValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(579)
inline long IFieldDefinition::GetUseCount ( ) {
    long _result;
    HRESULT _hr = get_UseCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IBlobFieldObject wrapper method implementations
//

#pragma implementation_key(580)
inline _bstr_t IBlobFieldObject::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(581)
inline void IBlobFieldObject::PutName ( _bstr_t ppName ) {
    HRESULT _hr = put_Name(ppName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(582)
inline enum CRObjectKind IBlobFieldObject::GetKind ( ) {
    enum CRObjectKind _result;
    HRESULT _hr = get_Kind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(583)
inline long IBlobFieldObject::GetLeft ( ) {
    long _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(584)
inline void IBlobFieldObject::PutLeft ( long pLeft ) {
    HRESULT _hr = put_Left(pLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(585)
inline long IBlobFieldObject::GetTop ( ) {
    long _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(586)
inline void IBlobFieldObject::PutTop ( long pTop ) {
    HRESULT _hr = put_Top(pTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(587)
inline long IBlobFieldObject::GetWidth ( ) {
    long _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(588)
inline void IBlobFieldObject::PutWidth ( long pWidth ) {
    HRESULT _hr = put_Width(pWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(589)
inline long IBlobFieldObject::GetHeight ( ) {
    long _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(590)
inline void IBlobFieldObject::PutHeight ( long pHeight ) {
    HRESULT _hr = put_Height(pHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(591)
inline enum CRLineStyle IBlobFieldObject::GetLeftLineStyle ( ) {
    enum CRLineStyle _result;
    HRESULT _hr = get_LeftLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(592)
inline void IBlobFieldObject::PutLeftLineStyle ( enum CRLineStyle pLeftLineStyle ) {
    HRESULT _hr = put_LeftLineStyle(pLeftLineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(593)
inline enum CRLineStyle IBlobFieldObject::GetRightLineStyle ( ) {
    enum CRLineStyle _result;
    HRESULT _hr = get_RightLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(594)
inline void IBlobFieldObject::PutRightLineStyle ( enum CRLineStyle pRightLineStyle ) {
    HRESULT _hr = put_RightLineStyle(pRightLineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(595)
inline enum CRLineStyle IBlobFieldObject::GetTopLineStyle ( ) {
    enum CRLineStyle _result;
    HRESULT _hr = get_TopLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(596)
inline void IBlobFieldObject::PutTopLineStyle ( enum CRLineStyle pTopLineStyle ) {
    HRESULT _hr = put_TopLineStyle(pTopLineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(597)
inline enum CRLineStyle IBlobFieldObject::GetBottomLineStyle ( ) {
    enum CRLineStyle _result;
    HRESULT _hr = get_BottomLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(598)
inline void IBlobFieldObject::PutBottomLineStyle ( enum CRLineStyle pBottomLineStyle ) {
    HRESULT _hr = put_BottomLineStyle(pBottomLineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(599)
inline VARIANT_BOOL IBlobFieldObject::GetHasDropShadow ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HasDropShadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(600)
inline void IBlobFieldObject::PutHasDropShadow ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_HasDropShadow(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(601)
inline OLE_COLOR IBlobFieldObject::GetBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(602)
inline void IBlobFieldObject::PutBackColor ( OLE_COLOR pBackColor ) {
    HRESULT _hr = put_BackColor(pBackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(603)
inline OLE_COLOR IBlobFieldObject::GetBorderColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BorderColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(604)
inline void IBlobFieldObject::PutBorderColor ( OLE_COLOR pBorderColor ) {
    HRESULT _hr = put_BorderColor(pBorderColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(605)
inline ISectionPtr IBlobFieldObject::GetParent ( ) {
    struct ISection * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISectionPtr(_result, false);
}

#pragma implementation_key(606)
inline VARIANT_BOOL IBlobFieldObject::GetSuppress ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Suppress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(607)
inline void IBlobFieldObject::PutSuppress ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_Suppress(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(608)
inline VARIANT_BOOL IBlobFieldObject::GetCloseAtPageBreak ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_CloseAtPageBreak(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(609)
inline void IBlobFieldObject::PutCloseAtPageBreak ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_CloseAtPageBreak(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(610)
inline VARIANT_BOOL IBlobFieldObject::GetKeepTogether ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_KeepTogether(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(611)
inline void IBlobFieldObject::PutKeepTogether ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_KeepTogether(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(612)
inline long IBlobFieldObject::GetLeftCropping ( ) {
    long _result;
    HRESULT _hr = get_LeftCropping(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(613)
inline void IBlobFieldObject::PutLeftCropping ( long pLeftCropping ) {
    HRESULT _hr = put_LeftCropping(pLeftCropping);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(614)
inline long IBlobFieldObject::GetRightCropping ( ) {
    long _result;
    HRESULT _hr = get_RightCropping(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(615)
inline void IBlobFieldObject::PutRightCropping ( long pRightCropping ) {
    HRESULT _hr = put_RightCropping(pRightCropping);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(616)
inline long IBlobFieldObject::GetTopCropping ( ) {
    long _result;
    HRESULT _hr = get_TopCropping(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(617)
inline void IBlobFieldObject::PutTopCropping ( long pTopCropping ) {
    HRESULT _hr = put_TopCropping(pTopCropping);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(618)
inline long IBlobFieldObject::GetBottomCropping ( ) {
    long _result;
    HRESULT _hr = get_BottomCropping(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(619)
inline void IBlobFieldObject::PutBottomCropping ( long pBottomCropping ) {
    HRESULT _hr = put_BottomCropping(pBottomCropping);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(620)
inline double IBlobFieldObject::GetXScaling ( ) {
    double _result;
    HRESULT _hr = get_XScaling(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(621)
inline void IBlobFieldObject::PutXScaling ( double pXScaling ) {
    HRESULT _hr = put_XScaling(pXScaling);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(622)
inline double IBlobFieldObject::GetYScaling ( ) {
    double _result;
    HRESULT _hr = get_YScaling(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(623)
inline void IBlobFieldObject::PutYScaling ( double pYScaling ) {
    HRESULT _hr = put_YScaling(pYScaling);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(624)
inline IDatabaseFieldDefinitionPtr IBlobFieldObject::GetField ( ) {
    struct IDatabaseFieldDefinition * _result;
    HRESULT _hr = get_Field(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDatabaseFieldDefinitionPtr(_result, false);
}

#pragma implementation_key(625)
inline _bstr_t IBlobFieldObject::GetConditionFormula ( const _variant_t & FormulaType ) {
    BSTR _result;
    HRESULT _hr = get_ConditionFormula(FormulaType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(626)
inline void IBlobFieldObject::PutConditionFormula ( const _variant_t & FormulaType, _bstr_t pVal ) {
    HRESULT _hr = put_ConditionFormula(FormulaType, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(627)
inline _bstr_t IBlobFieldObject::GetCssClass ( ) {
    BSTR _result;
    HRESULT _hr = get_CssClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(628)
inline void IBlobFieldObject::PutCssClass ( _bstr_t ppCssClass ) {
    HRESULT _hr = put_CssClass(ppCssClass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(629)
inline enum CRHyperlinkType IBlobFieldObject::GetHyperlinkType ( ) {
    enum CRHyperlinkType _result;
    HRESULT _hr = get_HyperlinkType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(630)
inline void IBlobFieldObject::PutHyperlinkType ( enum CRHyperlinkType pType ) {
    HRESULT _hr = put_HyperlinkType(pType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(631)
inline _bstr_t IBlobFieldObject::GetHyperlinkText ( ) {
    BSTR _result;
    HRESULT _hr = get_HyperlinkText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(632)
inline void IBlobFieldObject::PutHyperlinkText ( _bstr_t pText ) {
    HRESULT _hr = put_HyperlinkText(pText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IDatabaseFieldDefinition wrapper method implementations
//

#pragma implementation_key(633)
inline enum CRFieldKind IDatabaseFieldDefinition::GetKind ( ) {
    enum CRFieldKind _result;
    HRESULT _hr = get_Kind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(634)
inline CRFieldValueType IDatabaseFieldDefinition::GetValueType ( ) {
    CRFieldValueType _result;
    HRESULT _hr = get_ValueType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(635)
inline short IDatabaseFieldDefinition::GetNumberOfBytes ( ) {
    short _result;
    HRESULT _hr = get_NumberOfBytes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(636)
inline _bstr_t IDatabaseFieldDefinition::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(637)
inline _variant_t IDatabaseFieldDefinition::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(638)
inline _bstr_t IDatabaseFieldDefinition::GetDatabaseFieldName ( ) {
    BSTR _result;
    HRESULT _hr = get_DatabaseFieldName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(639)
inline IReportPtr IDatabaseFieldDefinition::GetParent ( ) {
    struct IReport * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IReportPtr(_result, false);
}

#pragma implementation_key(640)
inline _variant_t IDatabaseFieldDefinition::GetPreviousValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PreviousValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(641)
inline _variant_t IDatabaseFieldDefinition::GetNextValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_NextValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(642)
inline _bstr_t IDatabaseFieldDefinition::GetTableAliasName ( ) {
    BSTR _result;
    HRESULT _hr = get_TableAliasName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(643)
inline _bstr_t IDatabaseFieldDefinition::GetDatabaseFieldDisplayName ( ) {
    BSTR _result;
    HRESULT _hr = get_DatabaseFieldDisplayName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface ISubreportObject wrapper method implementations
//

#pragma implementation_key(644)
inline _bstr_t ISubreportObject::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(645)
inline void ISubreportObject::PutName ( _bstr_t ppName ) {
    HRESULT _hr = put_Name(ppName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(646)
inline enum CRObjectKind ISubreportObject::GetKind ( ) {
    enum CRObjectKind _result;
    HRESULT _hr = get_Kind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(647)
inline long ISubreportObject::GetLeft ( ) {
    long _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(648)
inline void ISubreportObject::PutLeft ( long pLeft ) {
    HRESULT _hr = put_Left(pLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(649)
inline long ISubreportObject::GetTop ( ) {
    long _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(650)
inline void ISubreportObject::PutTop ( long pTop ) {
    HRESULT _hr = put_Top(pTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(651)
inline long ISubreportObject::GetWidth ( ) {
    long _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(652)
inline void ISubreportObject::PutWidth ( long pWidth ) {
    HRESULT _hr = put_Width(pWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(653)
inline long ISubreportObject::GetHeight ( ) {
    long _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(654)
inline void ISubreportObject::PutHeight ( long pHeight ) {
    HRESULT _hr = put_Height(pHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(655)
inline enum CRLineStyle ISubreportObject::GetLeftLineStyle ( ) {
    enum CRLineStyle _result;
    HRESULT _hr = get_LeftLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(656)
inline void ISubreportObject::PutLeftLineStyle ( enum CRLineStyle pLeftLineStyle ) {
    HRESULT _hr = put_LeftLineStyle(pLeftLineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(657)
inline enum CRLineStyle ISubreportObject::GetRightLineStyle ( ) {
    enum CRLineStyle _result;
    HRESULT _hr = get_RightLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(658)
inline void ISubreportObject::PutRightLineStyle ( enum CRLineStyle pRightLineStyle ) {
    HRESULT _hr = put_RightLineStyle(pRightLineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(659)
inline enum CRLineStyle ISubreportObject::GetTopLineStyle ( ) {
    enum CRLineStyle _result;
    HRESULT _hr = get_TopLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(660)
inline void ISubreportObject::PutTopLineStyle ( enum CRLineStyle pTopLineStyle ) {
    HRESULT _hr = put_TopLineStyle(pTopLineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(661)
inline enum CRLineStyle ISubreportObject::GetBottomLineStyle ( ) {
    enum CRLineStyle _result;
    HRESULT _hr = get_BottomLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(662)
inline void ISubreportObject::PutBottomLineStyle ( enum CRLineStyle pBottomLineStyle ) {
    HRESULT _hr = put_BottomLineStyle(pBottomLineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(663)
inline VARIANT_BOOL ISubreportObject::GetHasDropShadow ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HasDropShadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(664)
inline void ISubreportObject::PutHasDropShadow ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_HasDropShadow(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(665)
inline OLE_COLOR ISubreportObject::GetBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(666)
inline void ISubreportObject::PutBackColor ( OLE_COLOR pBackColor ) {
    HRESULT _hr = put_BackColor(pBackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(667)
inline OLE_COLOR ISubreportObject::GetBorderColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BorderColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(668)
inline void ISubreportObject::PutBorderColor ( OLE_COLOR pBorderColor ) {
    HRESULT _hr = put_BorderColor(pBorderColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(669)
inline ISectionPtr ISubreportObject::GetParent ( ) {
    struct ISection * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISectionPtr(_result, false);
}

#pragma implementation_key(670)
inline VARIANT_BOOL ISubreportObject::GetSuppress ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Suppress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(671)
inline void ISubreportObject::PutSuppress ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_Suppress(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(672)
inline VARIANT_BOOL ISubreportObject::GetCloseAtPageBreak ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_CloseAtPageBreak(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(673)
inline void ISubreportObject::PutCloseAtPageBreak ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_CloseAtPageBreak(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(674)
inline VARIANT_BOOL ISubreportObject::GetKeepTogether ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_KeepTogether(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(675)
inline void ISubreportObject::PutKeepTogether ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_KeepTogether(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(676)
inline _bstr_t ISubreportObject::GetSubreportName ( ) {
    BSTR _result;
    HRESULT _hr = get_SubreportName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(677)
inline void ISubreportObject::PutSubreportName ( _bstr_t ppSubreportName ) {
    HRESULT _hr = put_SubreportName(ppSubreportName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(678)
inline IReportPtr ISubreportObject::OpenSubreport ( ) {
    struct IReport * _result;
    HRESULT _hr = raw_OpenSubreport(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IReportPtr(_result, false);
}

#pragma implementation_key(679)
inline VARIANT_BOOL ISubreportObject::GetCanGrow ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_CanGrow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(680)
inline void ISubreportObject::PutCanGrow ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_CanGrow(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(681)
inline VARIANT_BOOL ISubreportObject::GetEnableOnDemand ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableOnDemand(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(682)
inline ISubreportLinksPtr ISubreportObject::GetLinks ( ) {
    struct ISubreportLinks * _result;
    HRESULT _hr = get_Links(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISubreportLinksPtr(_result, false);
}

#pragma implementation_key(683)
inline HRESULT ISubreportObject::ReimportSubreport ( VARIANT_BOOL * pReimported ) {
    HRESULT _hr = raw_ReimportSubreport(pReimported);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(684)
inline _bstr_t ISubreportObject::GetConditionFormula ( const _variant_t & FormulaType ) {
    BSTR _result;
    HRESULT _hr = get_ConditionFormula(FormulaType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(685)
inline void ISubreportObject::PutConditionFormula ( const _variant_t & FormulaType, _bstr_t pVal ) {
    HRESULT _hr = put_ConditionFormula(FormulaType, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(686)
inline _bstr_t ISubreportObject::GetCssClass ( ) {
    BSTR _result;
    HRESULT _hr = get_CssClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(687)
inline void ISubreportObject::PutCssClass ( _bstr_t ppCssClass ) {
    HRESULT _hr = put_CssClass(ppCssClass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISubreportLinks wrapper method implementations
//

#pragma implementation_key(688)
inline IUnknownPtr ISubreportLinks::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(689)
inline ISubreportLinkPtr ISubreportLinks::GetItem ( long index ) {
    struct ISubreportLink * _result;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISubreportLinkPtr(_result, false);
}

#pragma implementation_key(690)
inline long ISubreportLinks::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(691)
inline ISubreportObjectPtr ISubreportLinks::GetParent ( ) {
    struct ISubreportObject * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISubreportObjectPtr(_result, false);
}

#pragma implementation_key(692)
inline ISubreportLinkPtr ISubreportLinks::Add ( const _variant_t & MainReportField, const _variant_t & SubreportField ) {
    struct ISubreportLink * _result;
    HRESULT _hr = raw_Add(MainReportField, SubreportField, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISubreportLinkPtr(_result, false);
}

#pragma implementation_key(693)
inline HRESULT ISubreportLinks::Delete ( long index ) {
    HRESULT _hr = raw_Delete(index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ISubreportLink wrapper method implementations
//

#pragma implementation_key(694)
inline ISubreportObjectPtr ISubreportLink::GetParent ( ) {
    struct ISubreportObject * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISubreportObjectPtr(_result, false);
}

#pragma implementation_key(695)
inline IFieldDefinitionPtr ISubreportLink::GetMainReportField ( ) {
    struct IFieldDefinition * _result;
    HRESULT _hr = get_MainReportField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFieldDefinitionPtr(_result, false);
}

#pragma implementation_key(696)
inline IFieldDefinitionPtr ISubreportLink::GetSubreportField ( ) {
    struct IFieldDefinition * _result;
    HRESULT _hr = get_SubreportField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFieldDefinitionPtr(_result, false);
}

//
// interface ILineObject wrapper method implementations
//

#pragma implementation_key(697)
inline _bstr_t ILineObject::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(698)
inline void ILineObject::PutName ( _bstr_t ppName ) {
    HRESULT _hr = put_Name(ppName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(699)
inline enum CRObjectKind ILineObject::GetKind ( ) {
    enum CRObjectKind _result;
    HRESULT _hr = get_Kind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(700)
inline long ILineObject::GetLeft ( ) {
    long _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(701)
inline void ILineObject::PutLeft ( long pLeft ) {
    HRESULT _hr = put_Left(pLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(702)
inline long ILineObject::GetTop ( ) {
    long _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(703)
inline void ILineObject::PutTop ( long pTop ) {
    HRESULT _hr = put_Top(pTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(704)
inline ISectionPtr ILineObject::GetParent ( ) {
    struct ISection * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISectionPtr(_result, false);
}

#pragma implementation_key(705)
inline VARIANT_BOOL ILineObject::GetSuppress ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Suppress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(706)
inline void ILineObject::PutSuppress ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_Suppress(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(707)
inline OLE_COLOR ILineObject::GetLineColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_LineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(708)
inline void ILineObject::PutLineColor ( OLE_COLOR pLineColor ) {
    HRESULT _hr = put_LineColor(pLineColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(709)
inline long ILineObject::GetRight ( ) {
    long _result;
    HRESULT _hr = get_Right(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(710)
inline void ILineObject::PutRight ( long pRight ) {
    HRESULT _hr = put_Right(pRight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(711)
inline long ILineObject::GetBottom ( ) {
    long _result;
    HRESULT _hr = get_Bottom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(712)
inline void ILineObject::PutBottom ( long pBottom ) {
    HRESULT _hr = put_Bottom(pBottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(713)
inline long ILineObject::GetLineThickness ( ) {
    long _result;
    HRESULT _hr = get_LineThickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(714)
inline void ILineObject::PutLineThickness ( long pLineThickness ) {
    HRESULT _hr = put_LineThickness(pLineThickness);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(715)
inline VARIANT_BOOL ILineObject::GetExtendToBottomOfSection ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ExtendToBottomOfSection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(716)
inline void ILineObject::PutExtendToBottomOfSection ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_ExtendToBottomOfSection(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(717)
inline enum CRLineStyle ILineObject::GetLineStyle ( ) {
    enum CRLineStyle _result;
    HRESULT _hr = get_LineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(718)
inline void ILineObject::PutLineStyle ( enum CRLineStyle pLineStyle ) {
    HRESULT _hr = put_LineStyle(pLineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(719)
inline ISectionPtr ILineObject::GetEndSection ( ) {
    struct ISection * _result;
    HRESULT _hr = get_EndSection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISectionPtr(_result, false);
}

#pragma implementation_key(720)
inline _bstr_t ILineObject::GetConditionFormula ( const _variant_t & FormulaType ) {
    BSTR _result;
    HRESULT _hr = get_ConditionFormula(FormulaType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(721)
inline void ILineObject::PutConditionFormula ( const _variant_t & FormulaType, _bstr_t pVal ) {
    HRESULT _hr = put_ConditionFormula(FormulaType, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(722)
inline _bstr_t ILineObject::GetCssClass ( ) {
    BSTR _result;
    HRESULT _hr = get_CssClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(723)
inline void ILineObject::PutCssClass ( _bstr_t ppCssClass ) {
    HRESULT _hr = put_CssClass(ppCssClass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IBoxObject wrapper method implementations
//

#pragma implementation_key(724)
inline _bstr_t IBoxObject::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(725)
inline void IBoxObject::PutName ( _bstr_t ppName ) {
    HRESULT _hr = put_Name(ppName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(726)
inline enum CRObjectKind IBoxObject::GetKind ( ) {
    enum CRObjectKind _result;
    HRESULT _hr = get_Kind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(727)
inline long IBoxObject::GetLeft ( ) {
    long _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(728)
inline void IBoxObject::PutLeft ( long pLeft ) {
    HRESULT _hr = put_Left(pLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(729)
inline long IBoxObject::GetTop ( ) {
    long _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(730)
inline void IBoxObject::PutTop ( long pTop ) {
    HRESULT _hr = put_Top(pTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(731)
inline long IBoxObject::GetRight ( ) {
    long _result;
    HRESULT _hr = get_Right(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(732)
inline void IBoxObject::PutRight ( long pRight ) {
    HRESULT _hr = put_Right(pRight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(733)
inline long IBoxObject::GetBottom ( ) {
    long _result;
    HRESULT _hr = get_Bottom(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(734)
inline void IBoxObject::PutBottom ( long pBottom ) {
    HRESULT _hr = put_Bottom(pBottom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(735)
inline enum CRLineStyle IBoxObject::GetLineStyle ( ) {
    enum CRLineStyle _result;
    HRESULT _hr = get_LineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(736)
inline void IBoxObject::PutLineStyle ( enum CRLineStyle pLineStyle ) {
    HRESULT _hr = put_LineStyle(pLineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(737)
inline VARIANT_BOOL IBoxObject::GetHasDropShadow ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HasDropShadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(738)
inline void IBoxObject::PutHasDropShadow ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_HasDropShadow(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(739)
inline OLE_COLOR IBoxObject::GetLineColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_LineColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(740)
inline void IBoxObject::PutLineColor ( OLE_COLOR pLineColor ) {
    HRESULT _hr = put_LineColor(pLineColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(741)
inline OLE_COLOR IBoxObject::GetFillColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_FillColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(742)
inline void IBoxObject::PutFillColor ( OLE_COLOR pFillColor ) {
    HRESULT _hr = put_FillColor(pFillColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(743)
inline ISectionPtr IBoxObject::GetParent ( ) {
    struct ISection * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISectionPtr(_result, false);
}

#pragma implementation_key(744)
inline VARIANT_BOOL IBoxObject::GetSuppress ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Suppress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(745)
inline void IBoxObject::PutSuppress ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_Suppress(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(746)
inline VARIANT_BOOL IBoxObject::GetCloseAtPageBreak ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_CloseAtPageBreak(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(747)
inline void IBoxObject::PutCloseAtPageBreak ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_CloseAtPageBreak(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(748)
inline ISectionPtr IBoxObject::GetBottomRightSection ( ) {
    struct ISection * _result;
    HRESULT _hr = get_BottomRightSection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISectionPtr(_result, false);
}

#pragma implementation_key(749)
inline long IBoxObject::GetLineThickness ( ) {
    long _result;
    HRESULT _hr = get_LineThickness(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(750)
inline void IBoxObject::PutLineThickness ( long pLineThickness ) {
    HRESULT _hr = put_LineThickness(pLineThickness);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(751)
inline VARIANT_BOOL IBoxObject::GetExtendToBottomOfSection ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ExtendToBottomOfSection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(752)
inline void IBoxObject::PutExtendToBottomOfSection ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_ExtendToBottomOfSection(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(753)
inline long IBoxObject::GetCornerEllipseHeight ( ) {
    long _result;
    HRESULT _hr = get_CornerEllipseHeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(754)
inline void IBoxObject::PutCornerEllipseHeight ( long pCornerEllipseHeight ) {
    HRESULT _hr = put_CornerEllipseHeight(pCornerEllipseHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(755)
inline long IBoxObject::GetCornerEllipseWidth ( ) {
    long _result;
    HRESULT _hr = get_CornerEllipseWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(756)
inline void IBoxObject::PutCornerEllipseWidth ( long pCornerEllipseWidth ) {
    HRESULT _hr = put_CornerEllipseWidth(pCornerEllipseWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(757)
inline _bstr_t IBoxObject::GetConditionFormula ( const _variant_t & FormulaType ) {
    BSTR _result;
    HRESULT _hr = get_ConditionFormula(FormulaType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(758)
inline void IBoxObject::PutConditionFormula ( const _variant_t & FormulaType, _bstr_t pVal ) {
    HRESULT _hr = put_ConditionFormula(FormulaType, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(759)
inline _bstr_t IBoxObject::GetCssClass ( ) {
    BSTR _result;
    HRESULT _hr = get_CssClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(760)
inline void IBoxObject::PutCssClass ( _bstr_t ppCssClass ) {
    HRESULT _hr = put_CssClass(ppCssClass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICrossTabObject wrapper method implementations
//

#pragma implementation_key(761)
inline _bstr_t ICrossTabObject::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(762)
inline void ICrossTabObject::PutName ( _bstr_t ppName ) {
    HRESULT _hr = put_Name(ppName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(763)
inline enum CRObjectKind ICrossTabObject::GetKind ( ) {
    enum CRObjectKind _result;
    HRESULT _hr = get_Kind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(764)
inline long ICrossTabObject::GetLeft ( ) {
    long _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(765)
inline void ICrossTabObject::PutLeft ( long pLeft ) {
    HRESULT _hr = put_Left(pLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(766)
inline long ICrossTabObject::GetTop ( ) {
    long _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(767)
inline void ICrossTabObject::PutTop ( long pTop ) {
    HRESULT _hr = put_Top(pTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(768)
inline long ICrossTabObject::GetWidth ( ) {
    long _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(769)
inline long ICrossTabObject::GetHeight ( ) {
    long _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(770)
inline enum CRLineStyle ICrossTabObject::GetLeftLineStyle ( ) {
    enum CRLineStyle _result;
    HRESULT _hr = get_LeftLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(771)
inline void ICrossTabObject::PutLeftLineStyle ( enum CRLineStyle pLeftLineStyle ) {
    HRESULT _hr = put_LeftLineStyle(pLeftLineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(772)
inline enum CRLineStyle ICrossTabObject::GetRightLineStyle ( ) {
    enum CRLineStyle _result;
    HRESULT _hr = get_RightLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(773)
inline void ICrossTabObject::PutRightLineStyle ( enum CRLineStyle pRightLineStyle ) {
    HRESULT _hr = put_RightLineStyle(pRightLineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(774)
inline enum CRLineStyle ICrossTabObject::GetTopLineStyle ( ) {
    enum CRLineStyle _result;
    HRESULT _hr = get_TopLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(775)
inline void ICrossTabObject::PutTopLineStyle ( enum CRLineStyle pTopLineStyle ) {
    HRESULT _hr = put_TopLineStyle(pTopLineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(776)
inline enum CRLineStyle ICrossTabObject::GetBottomLineStyle ( ) {
    enum CRLineStyle _result;
    HRESULT _hr = get_BottomLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(777)
inline void ICrossTabObject::PutBottomLineStyle ( enum CRLineStyle pBottomLineStyle ) {
    HRESULT _hr = put_BottomLineStyle(pBottomLineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(778)
inline VARIANT_BOOL ICrossTabObject::GetHasDropShadow ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HasDropShadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(779)
inline void ICrossTabObject::PutHasDropShadow ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_HasDropShadow(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(780)
inline OLE_COLOR ICrossTabObject::GetBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(781)
inline void ICrossTabObject::PutBackColor ( OLE_COLOR pBackColor ) {
    HRESULT _hr = put_BackColor(pBackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(782)
inline OLE_COLOR ICrossTabObject::GetBorderColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BorderColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(783)
inline void ICrossTabObject::PutBorderColor ( OLE_COLOR pBorderColor ) {
    HRESULT _hr = put_BorderColor(pBorderColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(784)
inline ISectionPtr ICrossTabObject::GetParent ( ) {
    struct ISection * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISectionPtr(_result, false);
}

#pragma implementation_key(785)
inline VARIANT_BOOL ICrossTabObject::GetSuppress ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Suppress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(786)
inline void ICrossTabObject::PutSuppress ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_Suppress(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(787)
inline VARIANT_BOOL ICrossTabObject::GetCloseAtPageBreak ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_CloseAtPageBreak(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(788)
inline void ICrossTabObject::PutCloseAtPageBreak ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_CloseAtPageBreak(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(789)
inline VARIANT_BOOL ICrossTabObject::GetKeepTogether ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_KeepTogether(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(790)
inline void ICrossTabObject::PutKeepTogether ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_KeepTogether(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(791)
inline IObjectSummaryFieldDefinitionsPtr ICrossTabObject::GetSummaryFields ( ) {
    struct IObjectSummaryFieldDefinitions * _result;
    HRESULT _hr = get_SummaryFields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IObjectSummaryFieldDefinitionsPtr(_result, false);
}

#pragma implementation_key(792)
inline ICrossTabGroupsPtr ICrossTabObject::GetRowGroups ( ) {
    struct ICrossTabGroups * _result;
    HRESULT _hr = get_RowGroups(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICrossTabGroupsPtr(_result, false);
}

#pragma implementation_key(793)
inline ICrossTabGroupsPtr ICrossTabObject::GetColumnGroups ( ) {
    struct ICrossTabGroups * _result;
    HRESULT _hr = get_ColumnGroups(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICrossTabGroupsPtr(_result, false);
}

#pragma implementation_key(794)
inline VARIANT_BOOL ICrossTabObject::GetEnableShowGrid ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableShowGrid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(795)
inline void ICrossTabObject::PutEnableShowGrid ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_EnableShowGrid(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(796)
inline VARIANT_BOOL ICrossTabObject::GetEnableShowCellMargins ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableShowCellMargins(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(797)
inline void ICrossTabObject::PutEnableShowCellMargins ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_EnableShowCellMargins(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(798)
inline VARIANT_BOOL ICrossTabObject::GetEnableSuppressEmptyRows ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableSuppressEmptyRows(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(799)
inline void ICrossTabObject::PutEnableSuppressEmptyRows ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_EnableSuppressEmptyRows(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(800)
inline VARIANT_BOOL ICrossTabObject::GetEnableSuppressEmptyColumns ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableSuppressEmptyColumns(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(801)
inline void ICrossTabObject::PutEnableSuppressEmptyColumns ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_EnableSuppressEmptyColumns(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(802)
inline VARIANT_BOOL ICrossTabObject::GetEnableKeepColumnsTogether ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableKeepColumnsTogether(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(803)
inline void ICrossTabObject::PutEnableKeepColumnsTogether ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_EnableKeepColumnsTogether(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(804)
inline VARIANT_BOOL ICrossTabObject::GetEnableSuppressRowGrandTotals ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableSuppressRowGrandTotals(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(805)
inline void ICrossTabObject::PutEnableSuppressRowGrandTotals ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_EnableSuppressRowGrandTotals(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(806)
inline VARIANT_BOOL ICrossTabObject::GetEnableSuppressColumnGrandTotals ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableSuppressColumnGrandTotals(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(807)
inline void ICrossTabObject::PutEnableSuppressColumnGrandTotals ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_EnableSuppressColumnGrandTotals(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(808)
inline OLE_COLOR ICrossTabObject::GetRowGrandTotalColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_RowGrandTotalColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(809)
inline void ICrossTabObject::PutRowGrandTotalColor ( OLE_COLOR pColor ) {
    HRESULT _hr = put_RowGrandTotalColor(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(810)
inline OLE_COLOR ICrossTabObject::GetColumnGrandTotalColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_ColumnGrandTotalColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(811)
inline void ICrossTabObject::PutColumnGrandTotalColor ( OLE_COLOR pColor ) {
    HRESULT _hr = put_ColumnGrandTotalColor(pColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(812)
inline VARIANT_BOOL ICrossTabObject::GetEnableRepeatRowLabels ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableRepeatRowLabels(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(813)
inline void ICrossTabObject::PutEnableRepeatRowLabels ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_EnableRepeatRowLabels(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(814)
inline _bstr_t ICrossTabObject::GetConditionFormula ( const _variant_t & FormulaType ) {
    BSTR _result;
    HRESULT _hr = get_ConditionFormula(FormulaType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(815)
inline void ICrossTabObject::PutConditionFormula ( const _variant_t & FormulaType, _bstr_t pVal ) {
    HRESULT _hr = put_ConditionFormula(FormulaType, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(816)
inline _bstr_t ICrossTabObject::GetCssClass ( ) {
    BSTR _result;
    HRESULT _hr = get_CssClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(817)
inline void ICrossTabObject::PutCssClass ( _bstr_t ppCssClass ) {
    HRESULT _hr = put_CssClass(ppCssClass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(818)
inline enum CRHyperlinkType ICrossTabObject::GetHyperlinkType ( ) {
    enum CRHyperlinkType _result;
    HRESULT _hr = get_HyperlinkType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(819)
inline void ICrossTabObject::PutHyperlinkType ( enum CRHyperlinkType pType ) {
    HRESULT _hr = put_HyperlinkType(pType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(820)
inline _bstr_t ICrossTabObject::GetHyperlinkText ( ) {
    BSTR _result;
    HRESULT _hr = get_HyperlinkText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(821)
inline void ICrossTabObject::PutHyperlinkText ( _bstr_t pText ) {
    HRESULT _hr = put_HyperlinkText(pText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IObjectSummaryFieldDefinitions wrapper method implementations
//

#pragma implementation_key(822)
inline IUnknownPtr IObjectSummaryFieldDefinitions::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(823)
inline ISummaryFieldDefinitionPtr IObjectSummaryFieldDefinitions::GetItem ( long index ) {
    struct ISummaryFieldDefinition * _result;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISummaryFieldDefinitionPtr(_result, false);
}

#pragma implementation_key(824)
inline long IObjectSummaryFieldDefinitions::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(825)
inline IReportObjectPtr IObjectSummaryFieldDefinitions::GetParent ( ) {
    struct IReportObject * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IReportObjectPtr(_result, false);
}

#pragma implementation_key(826)
inline HRESULT IObjectSummaryFieldDefinitions::Add ( const _variant_t & summaryField ) {
    HRESULT _hr = raw_Add(summaryField);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(827)
inline HRESULT IObjectSummaryFieldDefinitions::Delete ( long index ) {
    HRESULT _hr = raw_Delete(index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ISummaryFieldDefinition wrapper method implementations
//

#pragma implementation_key(828)
inline enum CRFieldKind ISummaryFieldDefinition::GetKind ( ) {
    enum CRFieldKind _result;
    HRESULT _hr = get_Kind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(829)
inline CRFieldValueType ISummaryFieldDefinition::GetValueType ( ) {
    CRFieldValueType _result;
    HRESULT _hr = get_ValueType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(830)
inline short ISummaryFieldDefinition::GetNumberOfBytes ( ) {
    short _result;
    HRESULT _hr = get_NumberOfBytes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(831)
inline _bstr_t ISummaryFieldDefinition::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(832)
inline _variant_t ISummaryFieldDefinition::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(833)
inline enum CRSummaryType ISummaryFieldDefinition::GetSummaryType ( ) {
    enum CRSummaryType _result;
    HRESULT _hr = get_SummaryType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(834)
inline IReportPtr ISummaryFieldDefinition::GetParent ( ) {
    struct IReport * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IReportPtr(_result, false);
}

#pragma implementation_key(835)
inline _variant_t ISummaryFieldDefinition::GetPreviousValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PreviousValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(836)
inline _variant_t ISummaryFieldDefinition::GetNextValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_NextValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(837)
inline IAreaPtr ISummaryFieldDefinition::GetHeaderArea ( ) {
    struct IArea * _result;
    HRESULT _hr = get_HeaderArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAreaPtr(_result, false);
}

#pragma implementation_key(838)
inline IAreaPtr ISummaryFieldDefinition::GetFooterArea ( ) {
    struct IArea * _result;
    HRESULT _hr = get_FooterArea(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IAreaPtr(_result, false);
}

#pragma implementation_key(839)
inline IDispatchPtr ISummaryFieldDefinition::GetSummarizedField ( ) {
    IDispatch * _result;
    HRESULT _hr = get_SummarizedField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(840)
inline HRESULT ISummaryFieldDefinition::SetSummarizedField ( const _variant_t & SummarizedField ) {
    HRESULT _hr = raw_SetSummarizedField(SummarizedField);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(841)
inline IDispatchPtr ISummaryFieldDefinition::GetSecondarySummarizedField ( ) {
    IDispatch * _result;
    HRESULT _hr = get_SecondarySummarizedField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(842)
inline HRESULT ISummaryFieldDefinition::SetSecondarySummarizedField ( const _variant_t & secondarySummariedField ) {
    HRESULT _hr = raw_SetSecondarySummarizedField(secondarySummariedField);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(843)
inline long ISummaryFieldDefinition::GetSummaryOperationParameter ( ) {
    long _result;
    HRESULT _hr = get_SummaryOperationParameter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(844)
inline void ISummaryFieldDefinition::PutSummaryOperationParameter ( long pOperationParameter ) {
    HRESULT _hr = put_SummaryOperationParameter(pOperationParameter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(845)
inline void ISummaryFieldDefinition::PutSummaryType ( enum CRSummaryType pSummaryType ) {
    HRESULT _hr = put_SummaryType(pSummaryType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(846)
inline VARIANT_BOOL ISummaryFieldDefinition::GetForCrossTab ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ForCrossTab(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(847)
inline enum CRHierarchicalSummaryType ISummaryFieldDefinition::GetHierarchicalSummaryType ( ) {
    enum CRHierarchicalSummaryType _result;
    HRESULT _hr = get_HierarchicalSummaryType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(848)
inline void ISummaryFieldDefinition::PutHierarchicalSummaryType ( enum CRHierarchicalSummaryType pHierarchicalType ) {
    HRESULT _hr = put_HierarchicalSummaryType(pHierarchicalType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IReportObject wrapper method implementations
//

#pragma implementation_key(849)
inline _bstr_t IReportObject::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(850)
inline void IReportObject::PutName ( _bstr_t ppName ) {
    HRESULT _hr = put_Name(ppName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(851)
inline enum CRObjectKind IReportObject::GetKind ( ) {
    enum CRObjectKind _result;
    HRESULT _hr = get_Kind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(852)
inline long IReportObject::GetLeft ( ) {
    long _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(853)
inline void IReportObject::PutLeft ( long pLeft ) {
    HRESULT _hr = put_Left(pLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(854)
inline long IReportObject::GetTop ( ) {
    long _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(855)
inline void IReportObject::PutTop ( long pTop ) {
    HRESULT _hr = put_Top(pTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(856)
inline long IReportObject::GetWidth ( ) {
    long _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(857)
inline void IReportObject::PutWidth ( long pWidth ) {
    HRESULT _hr = put_Width(pWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(858)
inline long IReportObject::GetHeight ( ) {
    long _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(859)
inline void IReportObject::PutHeight ( long pHeight ) {
    HRESULT _hr = put_Height(pHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(860)
inline enum CRLineStyle IReportObject::GetLeftLineStyle ( ) {
    enum CRLineStyle _result;
    HRESULT _hr = get_LeftLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(861)
inline void IReportObject::PutLeftLineStyle ( enum CRLineStyle pLeftLineStyle ) {
    HRESULT _hr = put_LeftLineStyle(pLeftLineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(862)
inline enum CRLineStyle IReportObject::GetRightLineStyle ( ) {
    enum CRLineStyle _result;
    HRESULT _hr = get_RightLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(863)
inline void IReportObject::PutRightLineStyle ( enum CRLineStyle pRightLineStyle ) {
    HRESULT _hr = put_RightLineStyle(pRightLineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(864)
inline enum CRLineStyle IReportObject::GetTopLineStyle ( ) {
    enum CRLineStyle _result;
    HRESULT _hr = get_TopLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(865)
inline void IReportObject::PutTopLineStyle ( enum CRLineStyle pTopLineStyle ) {
    HRESULT _hr = put_TopLineStyle(pTopLineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(866)
inline enum CRLineStyle IReportObject::GetBottomLineStyle ( ) {
    enum CRLineStyle _result;
    HRESULT _hr = get_BottomLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(867)
inline void IReportObject::PutBottomLineStyle ( enum CRLineStyle pBottomLineStyle ) {
    HRESULT _hr = put_BottomLineStyle(pBottomLineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(868)
inline VARIANT_BOOL IReportObject::GetEnableTightHorizontal ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableTightHorizontal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(869)
inline void IReportObject::PutEnableTightHorizontal ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_EnableTightHorizontal(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(870)
inline VARIANT_BOOL IReportObject::GetHasDropShadow ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HasDropShadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(871)
inline void IReportObject::PutHasDropShadow ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_HasDropShadow(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(872)
inline OLE_COLOR IReportObject::GetBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(873)
inline void IReportObject::PutBackColor ( OLE_COLOR pBackColor ) {
    HRESULT _hr = put_BackColor(pBackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(874)
inline OLE_COLOR IReportObject::GetBorderColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BorderColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(875)
inline void IReportObject::PutBorderColor ( OLE_COLOR pBorderColor ) {
    HRESULT _hr = put_BorderColor(pBorderColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(876)
inline ISectionPtr IReportObject::GetParent ( ) {
    struct ISection * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISectionPtr(_result, false);
}

#pragma implementation_key(877)
inline VARIANT_BOOL IReportObject::GetSuppress ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Suppress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(878)
inline void IReportObject::PutSuppress ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_Suppress(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(879)
inline VARIANT_BOOL IReportObject::GetCloseAtPageBreak ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_CloseAtPageBreak(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(880)
inline void IReportObject::PutCloseAtPageBreak ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_CloseAtPageBreak(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(881)
inline VARIANT_BOOL IReportObject::GetKeepTogether ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_KeepTogether(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(882)
inline void IReportObject::PutKeepTogether ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_KeepTogether(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(883)
inline _bstr_t IReportObject::GetConditionFormula ( const _variant_t & FormulaType ) {
    BSTR _result;
    HRESULT _hr = get_ConditionFormula(FormulaType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(884)
inline void IReportObject::PutConditionFormula ( const _variant_t & FormulaType, _bstr_t pVal ) {
    HRESULT _hr = put_ConditionFormula(FormulaType, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(885)
inline _bstr_t IReportObject::GetCssClass ( ) {
    BSTR _result;
    HRESULT _hr = get_CssClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(886)
inline void IReportObject::PutCssClass ( _bstr_t ppCssClass ) {
    HRESULT _hr = put_CssClass(ppCssClass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(887)
inline enum CRHyperlinkType IReportObject::GetHyperlinkType ( ) {
    enum CRHyperlinkType _result;
    HRESULT _hr = get_HyperlinkType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(888)
inline void IReportObject::PutHyperlinkType ( enum CRHyperlinkType pType ) {
    HRESULT _hr = put_HyperlinkType(pType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(889)
inline _bstr_t IReportObject::GetHyperlinkText ( ) {
    BSTR _result;
    HRESULT _hr = get_HyperlinkText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(890)
inline void IReportObject::PutHyperlinkText ( _bstr_t pText ) {
    HRESULT _hr = put_HyperlinkText(pText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICrossTabGroups wrapper method implementations
//

#pragma implementation_key(891)
inline IUnknownPtr ICrossTabGroups::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(892)
inline ICrossTabObjectPtr ICrossTabGroups::GetParent ( ) {
    struct ICrossTabObject * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICrossTabObjectPtr(_result, false);
}

#pragma implementation_key(893)
inline long ICrossTabGroups::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(894)
inline ICrossTabGroupPtr ICrossTabGroups::GetItem ( long index ) {
    struct ICrossTabGroup * _result;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICrossTabGroupPtr(_result, false);
}

#pragma implementation_key(895)
inline ICrossTabGroupPtr ICrossTabGroups::Add ( const _variant_t & Field ) {
    struct ICrossTabGroup * _result;
    HRESULT _hr = raw_Add(Field, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICrossTabGroupPtr(_result, false);
}

#pragma implementation_key(896)
inline HRESULT ICrossTabGroups::Delete ( long index ) {
    HRESULT _hr = raw_Delete(index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ICrossTabGroup wrapper method implementations
//

#pragma implementation_key(897)
inline ICrossTabObjectPtr ICrossTabGroup::GetParent ( ) {
    struct ICrossTabObject * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICrossTabObjectPtr(_result, false);
}

#pragma implementation_key(898)
inline IFieldDefinitionPtr ICrossTabGroup::GetField ( ) {
    struct IFieldDefinition * _result;
    HRESULT _hr = get_Field(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFieldDefinitionPtr(_result, false);
}

#pragma implementation_key(899)
inline void ICrossTabGroup::PutField ( const _variant_t & ppField ) {
    HRESULT _hr = put_Field(ppField);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(900)
inline enum CRGroupCondition ICrossTabGroup::GetCondition ( ) {
    enum CRGroupCondition _result;
    HRESULT _hr = get_Condition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(901)
inline void ICrossTabGroup::PutCondition ( enum CRGroupCondition pGroupCondition ) {
    HRESULT _hr = put_Condition(pGroupCondition);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(902)
inline enum CRSortDirection ICrossTabGroup::GetSortDirection ( ) {
    enum CRSortDirection _result;
    HRESULT _hr = get_SortDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(903)
inline void ICrossTabGroup::PutSortDirection ( enum CRSortDirection pSortDirection ) {
    HRESULT _hr = put_SortDirection(pSortDirection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(904)
inline OLE_COLOR ICrossTabGroup::GetBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(905)
inline void ICrossTabGroup::PutBackColor ( OLE_COLOR pBackColor ) {
    HRESULT _hr = put_BackColor(pBackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(906)
inline VARIANT_BOOL ICrossTabGroup::GetEnableSuppressSubtotal ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableSuppressSubtotal(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(907)
inline void ICrossTabGroup::PutEnableSuppressSubtotal ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_EnableSuppressSubtotal(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(908)
inline VARIANT_BOOL ICrossTabGroup::GetEnableSuppressLabel ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableSuppressLabel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(909)
inline void ICrossTabGroup::PutEnableSuppressLabel ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_EnableSuppressLabel(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(910)
inline _variant_t ICrossTabGroup::GetSpecifiedGroups ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SpecifiedGroups(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(911)
inline void ICrossTabGroup::PutSpecifiedGroups ( VARIANT * pSpecifedGroupArray ) {
    HRESULT _hr = put_SpecifiedGroups(pSpecifedGroupArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ICROleObject wrapper method implementations
//

#pragma implementation_key(912)
inline _bstr_t ICROleObject::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(913)
inline void ICROleObject::PutName ( _bstr_t ppName ) {
    HRESULT _hr = put_Name(ppName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(914)
inline enum CRObjectKind ICROleObject::GetKind ( ) {
    enum CRObjectKind _result;
    HRESULT _hr = get_Kind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(915)
inline long ICROleObject::GetLeft ( ) {
    long _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(916)
inline void ICROleObject::PutLeft ( long pLeft ) {
    HRESULT _hr = put_Left(pLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(917)
inline long ICROleObject::GetTop ( ) {
    long _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(918)
inline void ICROleObject::PutTop ( long pTop ) {
    HRESULT _hr = put_Top(pTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(919)
inline long ICROleObject::GetWidth ( ) {
    long _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(920)
inline void ICROleObject::PutWidth ( long pWidth ) {
    HRESULT _hr = put_Width(pWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(921)
inline long ICROleObject::GetHeight ( ) {
    long _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(922)
inline void ICROleObject::PutHeight ( long pHeight ) {
    HRESULT _hr = put_Height(pHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(923)
inline enum CRLineStyle ICROleObject::GetLeftLineStyle ( ) {
    enum CRLineStyle _result;
    HRESULT _hr = get_LeftLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(924)
inline void ICROleObject::PutLeftLineStyle ( enum CRLineStyle pLeftLineStyle ) {
    HRESULT _hr = put_LeftLineStyle(pLeftLineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(925)
inline enum CRLineStyle ICROleObject::GetRightLineStyle ( ) {
    enum CRLineStyle _result;
    HRESULT _hr = get_RightLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(926)
inline void ICROleObject::PutRightLineStyle ( enum CRLineStyle pRightLineStyle ) {
    HRESULT _hr = put_RightLineStyle(pRightLineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(927)
inline enum CRLineStyle ICROleObject::GetTopLineStyle ( ) {
    enum CRLineStyle _result;
    HRESULT _hr = get_TopLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(928)
inline void ICROleObject::PutTopLineStyle ( enum CRLineStyle pTopLineStyle ) {
    HRESULT _hr = put_TopLineStyle(pTopLineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(929)
inline enum CRLineStyle ICROleObject::GetBottomLineStyle ( ) {
    enum CRLineStyle _result;
    HRESULT _hr = get_BottomLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(930)
inline void ICROleObject::PutBottomLineStyle ( enum CRLineStyle pBottomLineStyle ) {
    HRESULT _hr = put_BottomLineStyle(pBottomLineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(931)
inline VARIANT_BOOL ICROleObject::GetHasDropShadow ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HasDropShadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(932)
inline void ICROleObject::PutHasDropShadow ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_HasDropShadow(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(933)
inline OLE_COLOR ICROleObject::GetBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(934)
inline void ICROleObject::PutBackColor ( OLE_COLOR pBackColor ) {
    HRESULT _hr = put_BackColor(pBackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(935)
inline OLE_COLOR ICROleObject::GetBorderColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BorderColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(936)
inline void ICROleObject::PutBorderColor ( OLE_COLOR pBorderColor ) {
    HRESULT _hr = put_BorderColor(pBorderColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(937)
inline ISectionPtr ICROleObject::GetParent ( ) {
    struct ISection * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISectionPtr(_result, false);
}

#pragma implementation_key(938)
inline VARIANT_BOOL ICROleObject::GetSuppress ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Suppress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(939)
inline void ICROleObject::PutSuppress ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_Suppress(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(940)
inline VARIANT_BOOL ICROleObject::GetCloseAtPageBreak ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_CloseAtPageBreak(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(941)
inline void ICROleObject::PutCloseAtPageBreak ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_CloseAtPageBreak(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(942)
inline VARIANT_BOOL ICROleObject::GetKeepTogether ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_KeepTogether(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(943)
inline void ICROleObject::PutKeepTogether ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_KeepTogether(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(944)
inline long ICROleObject::GetLeftCropping ( ) {
    long _result;
    HRESULT _hr = get_LeftCropping(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(945)
inline void ICROleObject::PutLeftCropping ( long pLeftCropping ) {
    HRESULT _hr = put_LeftCropping(pLeftCropping);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(946)
inline long ICROleObject::GetRightCropping ( ) {
    long _result;
    HRESULT _hr = get_RightCropping(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(947)
inline void ICROleObject::PutRightCropping ( long pRightCropping ) {
    HRESULT _hr = put_RightCropping(pRightCropping);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(948)
inline long ICROleObject::GetTopCropping ( ) {
    long _result;
    HRESULT _hr = get_TopCropping(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(949)
inline void ICROleObject::PutTopCropping ( long pTopCropping ) {
    HRESULT _hr = put_TopCropping(pTopCropping);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(950)
inline long ICROleObject::GetBottomCropping ( ) {
    long _result;
    HRESULT _hr = get_BottomCropping(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(951)
inline void ICROleObject::PutBottomCropping ( long pBottomCropping ) {
    HRESULT _hr = put_BottomCropping(pBottomCropping);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(952)
inline double ICROleObject::GetXScaling ( ) {
    double _result;
    HRESULT _hr = get_XScaling(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(953)
inline void ICROleObject::PutXScaling ( double pXScaling ) {
    HRESULT _hr = put_XScaling(pXScaling);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(954)
inline double ICROleObject::GetYScaling ( ) {
    double _result;
    HRESULT _hr = get_YScaling(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(955)
inline void ICROleObject::PutYScaling ( double pYScaling ) {
    HRESULT _hr = put_YScaling(pYScaling);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(956)
inline IPictureDisp * ICROleObject::GetFormattedPicture ( ) {
    IPictureDisp * _result;
    HRESULT _hr = get_FormattedPicture(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(957)
inline void ICROleObject::PutRefFormattedPicture ( IPictureDisp * ppPicture ) {
    HRESULT _hr = putref_FormattedPicture(ppPicture);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(958)
inline HRESULT ICROleObject::SetOleLocation ( _bstr_t pLocation ) {
    HRESULT _hr = raw_SetOleLocation(pLocation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(959)
inline _bstr_t ICROleObject::GetConditionFormula ( const _variant_t & FormulaType ) {
    BSTR _result;
    HRESULT _hr = get_ConditionFormula(FormulaType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(960)
inline void ICROleObject::PutConditionFormula ( const _variant_t & FormulaType, _bstr_t pVal ) {
    HRESULT _hr = put_ConditionFormula(FormulaType, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(961)
inline _bstr_t ICROleObject::GetLinkSource ( ) {
    BSTR _result;
    HRESULT _hr = raw_GetLinkSource(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(962)
inline _bstr_t ICROleObject::GetCssClass ( ) {
    BSTR _result;
    HRESULT _hr = get_CssClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(963)
inline void ICROleObject::PutCssClass ( _bstr_t ppCssClass ) {
    HRESULT _hr = put_CssClass(ppCssClass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(964)
inline enum CRHyperlinkType ICROleObject::GetHyperlinkType ( ) {
    enum CRHyperlinkType _result;
    HRESULT _hr = get_HyperlinkType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(965)
inline void ICROleObject::PutHyperlinkType ( enum CRHyperlinkType pType ) {
    HRESULT _hr = put_HyperlinkType(pType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(966)
inline _bstr_t ICROleObject::GetHyperlinkText ( ) {
    BSTR _result;
    HRESULT _hr = get_HyperlinkText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(967)
inline void ICROleObject::PutHyperlinkText ( _bstr_t pText ) {
    HRESULT _hr = put_HyperlinkText(pText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGraphObject wrapper method implementations
//

#pragma implementation_key(968)
inline _bstr_t IGraphObject::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(969)
inline void IGraphObject::PutName ( _bstr_t ppName ) {
    HRESULT _hr = put_Name(ppName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(970)
inline enum CRObjectKind IGraphObject::GetKind ( ) {
    enum CRObjectKind _result;
    HRESULT _hr = get_Kind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(971)
inline long IGraphObject::GetLeft ( ) {
    long _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(972)
inline void IGraphObject::PutLeft ( long pLeft ) {
    HRESULT _hr = put_Left(pLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(973)
inline long IGraphObject::GetTop ( ) {
    long _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(974)
inline void IGraphObject::PutTop ( long pTop ) {
    HRESULT _hr = put_Top(pTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(975)
inline long IGraphObject::GetWidth ( ) {
    long _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(976)
inline void IGraphObject::PutWidth ( long pWidth ) {
    HRESULT _hr = put_Width(pWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(977)
inline long IGraphObject::GetHeight ( ) {
    long _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(978)
inline void IGraphObject::PutHeight ( long pHeight ) {
    HRESULT _hr = put_Height(pHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(979)
inline enum CRLineStyle IGraphObject::GetLeftLineStyle ( ) {
    enum CRLineStyle _result;
    HRESULT _hr = get_LeftLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(980)
inline void IGraphObject::PutLeftLineStyle ( enum CRLineStyle pLeftLineStyle ) {
    HRESULT _hr = put_LeftLineStyle(pLeftLineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(981)
inline enum CRLineStyle IGraphObject::GetRightLineStyle ( ) {
    enum CRLineStyle _result;
    HRESULT _hr = get_RightLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(982)
inline void IGraphObject::PutRightLineStyle ( enum CRLineStyle pRightLineStyle ) {
    HRESULT _hr = put_RightLineStyle(pRightLineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(983)
inline enum CRLineStyle IGraphObject::GetTopLineStyle ( ) {
    enum CRLineStyle _result;
    HRESULT _hr = get_TopLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(984)
inline void IGraphObject::PutTopLineStyle ( enum CRLineStyle pTopLineStyle ) {
    HRESULT _hr = put_TopLineStyle(pTopLineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(985)
inline enum CRLineStyle IGraphObject::GetBottomLineStyle ( ) {
    enum CRLineStyle _result;
    HRESULT _hr = get_BottomLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(986)
inline void IGraphObject::PutBottomLineStyle ( enum CRLineStyle pBottomLineStyle ) {
    HRESULT _hr = put_BottomLineStyle(pBottomLineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(987)
inline VARIANT_BOOL IGraphObject::GetHasDropShadow ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HasDropShadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(988)
inline void IGraphObject::PutHasDropShadow ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_HasDropShadow(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(989)
inline OLE_COLOR IGraphObject::GetBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(990)
inline void IGraphObject::PutBackColor ( OLE_COLOR pBackColor ) {
    HRESULT _hr = put_BackColor(pBackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(991)
inline OLE_COLOR IGraphObject::GetBorderColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BorderColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(992)
inline void IGraphObject::PutBorderColor ( OLE_COLOR pBorderColor ) {
    HRESULT _hr = put_BorderColor(pBorderColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(993)
inline ISectionPtr IGraphObject::GetParent ( ) {
    struct ISection * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISectionPtr(_result, false);
}

#pragma implementation_key(994)
inline VARIANT_BOOL IGraphObject::GetSuppress ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Suppress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(995)
inline void IGraphObject::PutSuppress ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_Suppress(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(996)
inline VARIANT_BOOL IGraphObject::GetCloseAtPageBreak ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_CloseAtPageBreak(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(997)
inline void IGraphObject::PutCloseAtPageBreak ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_CloseAtPageBreak(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(998)
inline VARIANT_BOOL IGraphObject::GetKeepTogether ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_KeepTogether(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(999)
inline void IGraphObject::PutKeepTogether ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_KeepTogether(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1000)
inline enum CRGraphDataType IGraphObject::GetDataType ( ) {
    enum CRGraphDataType _result;
    HRESULT _hr = get_DataType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1001)
inline enum CRGraphType IGraphObject::GetGraphType ( ) {
    enum CRGraphType _result;
    HRESULT _hr = get_GraphType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1002)
inline void IGraphObject::PutGraphType ( enum CRGraphType pGraphType ) {
    HRESULT _hr = put_GraphType(pGraphType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1003)
inline _bstr_t IGraphObject::GetTitle ( ) {
    BSTR _result;
    HRESULT _hr = get_Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1004)
inline void IGraphObject::PutTitle ( _bstr_t ppTitle ) {
    HRESULT _hr = put_Title(ppTitle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1005)
inline _bstr_t IGraphObject::GetSubTitle ( ) {
    BSTR _result;
    HRESULT _hr = get_SubTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1006)
inline void IGraphObject::PutSubTitle ( _bstr_t ppSubTitle ) {
    HRESULT _hr = put_SubTitle(ppSubTitle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1007)
inline _bstr_t IGraphObject::GetFootNote ( ) {
    BSTR _result;
    HRESULT _hr = get_FootNote(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1008)
inline void IGraphObject::PutFootNote ( _bstr_t ppFootNote ) {
    HRESULT _hr = put_FootNote(ppFootNote);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1009)
inline _bstr_t IGraphObject::GetGroupsTitle ( ) {
    BSTR _result;
    HRESULT _hr = get_GroupsTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1010)
inline void IGraphObject::PutGroupsTitle ( _bstr_t ppGroupsTitle ) {
    HRESULT _hr = put_GroupsTitle(ppGroupsTitle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1011)
inline _bstr_t IGraphObject::GetSeriesTitle ( ) {
    BSTR _result;
    HRESULT _hr = get_SeriesTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1012)
inline void IGraphObject::PutSeriesTitle ( _bstr_t ppSeriesTitle ) {
    HRESULT _hr = put_SeriesTitle(ppSeriesTitle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1013)
inline _bstr_t IGraphObject::GetXAxisTitle ( ) {
    BSTR _result;
    HRESULT _hr = get_XAxisTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1014)
inline void IGraphObject::PutXAxisTitle ( _bstr_t ppXAxisTitle ) {
    HRESULT _hr = put_XAxisTitle(ppXAxisTitle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1015)
inline _bstr_t IGraphObject::GetYAxisTitle ( ) {
    BSTR _result;
    HRESULT _hr = get_YAxisTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1016)
inline void IGraphObject::PutYAxisTitle ( _bstr_t ppYAxisTitle ) {
    HRESULT _hr = put_YAxisTitle(ppYAxisTitle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1017)
inline _bstr_t IGraphObject::GetY2AxisTitle ( ) {
    BSTR _result;
    HRESULT _hr = get_Y2AxisTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1018)
inline void IGraphObject::PutY2AxisTitle ( _bstr_t ppY2AxisTitle ) {
    HRESULT _hr = put_Y2AxisTitle(ppY2AxisTitle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1019)
inline double IGraphObject::GetMaxDataAxisValue ( ) {
    double _result;
    HRESULT _hr = get_MaxDataAxisValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1020)
inline void IGraphObject::PutMaxDataAxisValue ( double pMaxDataAxisValue ) {
    HRESULT _hr = put_MaxDataAxisValue(pMaxDataAxisValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1021)
inline double IGraphObject::GetMinDataAxisValue ( ) {
    double _result;
    HRESULT _hr = get_MinDataAxisValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1022)
inline void IGraphObject::PutMinDataAxisValue ( double pMinDataAxisValue ) {
    HRESULT _hr = put_MinDataAxisValue(pMinDataAxisValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1023)
inline double IGraphObject::GetMaxData2AxisValue ( ) {
    double _result;
    HRESULT _hr = get_MaxData2AxisValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1024)
inline void IGraphObject::PutMaxData2AxisValue ( double pMaxData2AxisValue ) {
    HRESULT _hr = put_MaxData2AxisValue(pMaxData2AxisValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1025)
inline double IGraphObject::GetMinData2AxisValue ( ) {
    double _result;
    HRESULT _hr = get_MinData2AxisValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1026)
inline void IGraphObject::PutMinData2AxisValue ( double pMinData2AxisValue ) {
    HRESULT _hr = put_MinData2AxisValue(pMinData2AxisValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1027)
inline double IGraphObject::GetMaxSeriesAxisValue ( ) {
    double _result;
    HRESULT _hr = get_MaxSeriesAxisValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1028)
inline void IGraphObject::PutMaxSeriesAxisValue ( double pMaxSeriesAxisValue ) {
    HRESULT _hr = put_MaxSeriesAxisValue(pMaxSeriesAxisValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1029)
inline double IGraphObject::GetMinSeriesAxisValue ( ) {
    double _result;
    HRESULT _hr = get_MinSeriesAxisValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1030)
inline void IGraphObject::PutMinSeriesAxisValue ( double pMinSeriesAxisValue ) {
    HRESULT _hr = put_MinSeriesAxisValue(pMinSeriesAxisValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1031)
inline enum CRGraphDataPoint IGraphObject::GetDataPoint ( ) {
    enum CRGraphDataPoint _result;
    HRESULT _hr = get_DataPoint(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1032)
inline void IGraphObject::PutDataPoint ( enum CRGraphDataPoint pDataPoint ) {
    HRESULT _hr = put_DataPoint(pDataPoint);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1033)
inline enum CRGridlineType IGraphObject::GetGroupAxisGridline ( ) {
    enum CRGridlineType _result;
    HRESULT _hr = get_GroupAxisGridline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1034)
inline void IGraphObject::PutGroupAxisGridline ( enum CRGridlineType pGroupAxisGridline ) {
    HRESULT _hr = put_GroupAxisGridline(pGroupAxisGridline);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1035)
inline enum CRGridlineType IGraphObject::GetSeriesAxisGridline ( ) {
    enum CRGridlineType _result;
    HRESULT _hr = get_SeriesAxisGridline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1036)
inline void IGraphObject::PutSeriesAxisGridline ( enum CRGridlineType pSeriesAxisGridline ) {
    HRESULT _hr = put_SeriesAxisGridline(pSeriesAxisGridline);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1037)
inline enum CRGridlineType IGraphObject::GetDataAxisGridline ( ) {
    enum CRGridlineType _result;
    HRESULT _hr = get_DataAxisGridline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1038)
inline void IGraphObject::PutDataAxisGridline ( enum CRGridlineType pDataAxisGridline ) {
    HRESULT _hr = put_DataAxisGridline(pDataAxisGridline);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1039)
inline enum CRGridlineType IGraphObject::GetData2AxisGridline ( ) {
    enum CRGridlineType _result;
    HRESULT _hr = get_Data2AxisGridline(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1040)
inline void IGraphObject::PutData2AxisGridline ( enum CRGridlineType pData2AxisGridline ) {
    HRESULT _hr = put_Data2AxisGridline(pData2AxisGridline);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1041)
inline VARIANT_BOOL IGraphObject::GetEnableShowLegend ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableShowLegend(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1042)
inline void IGraphObject::PutEnableShowLegend ( VARIANT_BOOL pEnableShowLegend ) {
    HRESULT _hr = put_EnableShowLegend(pEnableShowLegend);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1043)
inline enum CRLegendPosition IGraphObject::GetLegendPosition ( ) {
    enum CRLegendPosition _result;
    HRESULT _hr = get_LegendPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1044)
inline void IGraphObject::PutLegendPosition ( enum CRLegendPosition pLegendPosition ) {
    HRESULT _hr = put_LegendPosition(pLegendPosition);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1045)
inline enum CRGraphDirection IGraphObject::GetGraphDirection ( ) {
    enum CRGraphDirection _result;
    HRESULT _hr = get_GraphDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1046)
inline void IGraphObject::PutGraphDirection ( enum CRGraphDirection pDirection ) {
    HRESULT _hr = put_GraphDirection(pDirection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1047)
inline enum CRPieSize IGraphObject::GetPieSize ( ) {
    enum CRPieSize _result;
    HRESULT _hr = get_PieSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1048)
inline void IGraphObject::PutPieSize ( enum CRPieSize pPieSize ) {
    HRESULT _hr = put_PieSize(pPieSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1049)
inline enum CRSliceDetachment IGraphObject::GetSliceDetachment ( ) {
    enum CRSliceDetachment _result;
    HRESULT _hr = get_SliceDetachment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1050)
inline void IGraphObject::PutSliceDetachment ( enum CRSliceDetachment pSliceDetachment ) {
    HRESULT _hr = put_SliceDetachment(pSliceDetachment);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1051)
inline enum CRBarSize IGraphObject::GetBarSize ( ) {
    enum CRBarSize _result;
    HRESULT _hr = get_BarSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1052)
inline void IGraphObject::PutBarSize ( enum CRBarSize pBarSize ) {
    HRESULT _hr = put_BarSize(pBarSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1053)
inline enum CRMarkerSize IGraphObject::GetMarkerSize ( ) {
    enum CRMarkerSize _result;
    HRESULT _hr = get_MarkerSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1054)
inline void IGraphObject::PutMarkerSize ( enum CRMarkerSize pMarkerSize ) {
    HRESULT _hr = put_MarkerSize(pMarkerSize);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1055)
inline enum CRMarkerShape IGraphObject::GetMarkerShape ( ) {
    enum CRMarkerShape _result;
    HRESULT _hr = get_MarkerShape(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1056)
inline void IGraphObject::PutMarkerShape ( enum CRMarkerShape pMarkerShape ) {
    HRESULT _hr = put_MarkerShape(pMarkerShape);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1057)
inline enum CRNumberFormat IGraphObject::GetDataAxisNumberFormat ( ) {
    enum CRNumberFormat _result;
    HRESULT _hr = get_DataAxisNumberFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1058)
inline void IGraphObject::PutDataAxisNumberFormat ( enum CRNumberFormat pDataAxisNumberFormat ) {
    HRESULT _hr = put_DataAxisNumberFormat(pDataAxisNumberFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1059)
inline enum CRNumberFormat IGraphObject::GetData2AxisNumberFormat ( ) {
    enum CRNumberFormat _result;
    HRESULT _hr = get_Data2AxisNumberFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1060)
inline void IGraphObject::PutData2AxisNumberFormat ( enum CRNumberFormat pData2AxisNumberFormat ) {
    HRESULT _hr = put_Data2AxisNumberFormat(pData2AxisNumberFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1061)
inline enum CRNumberFormat IGraphObject::GetSeriesAxisNumberFormat ( ) {
    enum CRNumberFormat _result;
    HRESULT _hr = get_SeriesAxisNumberFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1062)
inline void IGraphObject::PutSeriesAxisNumberFormat ( enum CRNumberFormat pSeriesAxisNumberFormat ) {
    HRESULT _hr = put_SeriesAxisNumberFormat(pSeriesAxisNumberFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1063)
inline VARIANT_BOOL IGraphObject::GetAutoRangeDataAxis ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoRangeDataAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1064)
inline void IGraphObject::PutAutoRangeDataAxis ( VARIANT_BOOL pAutoRangeDataAxis ) {
    HRESULT _hr = put_AutoRangeDataAxis(pAutoRangeDataAxis);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1065)
inline VARIANT_BOOL IGraphObject::GetAutoRangeData2Axis ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoRangeData2Axis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1066)
inline void IGraphObject::PutAutoRangeData2Axis ( VARIANT_BOOL pAutoRangeData2Axis ) {
    HRESULT _hr = put_AutoRangeData2Axis(pAutoRangeData2Axis);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1067)
inline VARIANT_BOOL IGraphObject::GetAutoRangeSeriesAxis ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_AutoRangeSeriesAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1068)
inline void IGraphObject::PutAutoRangeSeriesAxis ( VARIANT_BOOL pAutoRangeSeriesAxis ) {
    HRESULT _hr = put_AutoRangeSeriesAxis(pAutoRangeSeriesAxis);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1069)
inline enum CRDivisionMethod IGraphObject::GetDataAxisDivisionMethod ( ) {
    enum CRDivisionMethod _result;
    HRESULT _hr = get_DataAxisDivisionMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1070)
inline void IGraphObject::PutDataAxisDivisionMethod ( enum CRDivisionMethod pDataAxisDivisionMethod ) {
    HRESULT _hr = put_DataAxisDivisionMethod(pDataAxisDivisionMethod);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1071)
inline enum CRDivisionMethod IGraphObject::GetData2AxisDivisionMethod ( ) {
    enum CRDivisionMethod _result;
    HRESULT _hr = get_Data2AxisDivisionMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1072)
inline void IGraphObject::PutData2AxisDivisionMethod ( enum CRDivisionMethod pData2AxisDivisionMethod ) {
    HRESULT _hr = put_Data2AxisDivisionMethod(pData2AxisDivisionMethod);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1073)
inline enum CRDivisionMethod IGraphObject::GetSeriesAxisDivisionMethod ( ) {
    enum CRDivisionMethod _result;
    HRESULT _hr = get_SeriesAxisDivisionMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1074)
inline void IGraphObject::PutSeriesAxisDivisionMethod ( enum CRDivisionMethod pSeriesAxisDivisionMethod ) {
    HRESULT _hr = put_SeriesAxisDivisionMethod(pSeriesAxisDivisionMethod);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1075)
inline long IGraphObject::GetDataAxisDivisionNumber ( ) {
    long _result;
    HRESULT _hr = get_DataAxisDivisionNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1076)
inline void IGraphObject::PutDataAxisDivisionNumber ( long pDataAxisDivisionNumber ) {
    HRESULT _hr = put_DataAxisDivisionNumber(pDataAxisDivisionNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1077)
inline long IGraphObject::GetData2AxisDivisionNumber ( ) {
    long _result;
    HRESULT _hr = get_Data2AxisDivisionNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1078)
inline void IGraphObject::PutData2AxisDivisionNumber ( long pData2AxisDivisionNumber ) {
    HRESULT _hr = put_Data2AxisDivisionNumber(pData2AxisDivisionNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1079)
inline long IGraphObject::GetSeriesAxisDivisionNumber ( ) {
    long _result;
    HRESULT _hr = get_SeriesAxisDivisionNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1080)
inline void IGraphObject::PutSeriesAxisDivisionNumber ( long pSeriesAxisDivisionNumber ) {
    HRESULT _hr = put_SeriesAxisDivisionNumber(pSeriesAxisDivisionNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1081)
inline enum CRGraphColor IGraphObject::GetGraphColor ( ) {
    enum CRGraphColor _result;
    HRESULT _hr = get_GraphColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1082)
inline void IGraphObject::PutGraphColor ( enum CRGraphColor pGraphColor ) {
    HRESULT _hr = put_GraphColor(pGraphColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1083)
inline enum CRNumberFormat IGraphObject::GetDataValueNumberFormat ( ) {
    enum CRNumberFormat _result;
    HRESULT _hr = get_DataValueNumberFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1084)
inline void IGraphObject::PutDataValueNumberFormat ( enum CRNumberFormat pDataValueNumberFormat ) {
    HRESULT _hr = put_DataValueNumberFormat(pDataValueNumberFormat);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1085)
inline enum CRViewingAngle IGraphObject::GetViewingAngle ( ) {
    enum CRViewingAngle _result;
    HRESULT _hr = get_ViewingAngle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1086)
inline void IGraphObject::PutViewingAngle ( enum CRViewingAngle pViewingAngle ) {
    HRESULT _hr = put_ViewingAngle(pViewingAngle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1087)
inline _bstr_t IGraphObject::GetZAxisTitle ( ) {
    BSTR _result;
    HRESULT _hr = get_ZAxisTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1088)
inline void IGraphObject::PutZAxisTitle ( _bstr_t ppZAxisTitle ) {
    HRESULT _hr = put_ZAxisTitle(ppZAxisTitle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1089)
inline IFieldDefinitionsPtr IGraphObject::GetConditionFields ( ) {
    struct IFieldDefinitions * _result;
    HRESULT _hr = get_ConditionFields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFieldDefinitionsPtr(_result, false);
}

#pragma implementation_key(1090)
inline IObjectSummaryFieldDefinitionsPtr IGraphObject::GetSummaryFields ( ) {
    struct IObjectSummaryFieldDefinitions * _result;
    HRESULT _hr = get_SummaryFields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IObjectSummaryFieldDefinitionsPtr(_result, false);
}

#pragma implementation_key(1091)
inline VARIANT_BOOL IGraphObject::GetEnableForEachRecord ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableForEachRecord(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1092)
inline void IGraphObject::PutEnableForEachRecord ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_EnableForEachRecord(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1093)
inline VARIANT_BOOL IGraphObject::GetEnableSummarizeValues ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableSummarizeValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1094)
inline void IGraphObject::PutEnableSummarizeValues ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_EnableSummarizeValues(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1095)
inline ICrossTabObjectPtr IGraphObject::GetCrossTabObject ( ) {
    struct ICrossTabObject * _result;
    HRESULT _hr = get_CrossTabObject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ICrossTabObjectPtr(_result, false);
}

#pragma implementation_key(1096)
inline IFontDisp * IGraphObject::GetTitleFont ( ) {
    IFontDisp * _result;
    HRESULT _hr = get_TitleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1097)
inline void IGraphObject::PutRefTitleFont ( IFontDisp * ppFont ) {
    HRESULT _hr = putref_TitleFont(ppFont);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1098)
inline IFontDisp * IGraphObject::GetSubTitleFont ( ) {
    IFontDisp * _result;
    HRESULT _hr = get_SubTitleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1099)
inline void IGraphObject::PutRefSubTitleFont ( IFontDisp * ppFont ) {
    HRESULT _hr = putref_SubTitleFont(ppFont);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1100)
inline IFontDisp * IGraphObject::GetFootnoteFont ( ) {
    IFontDisp * _result;
    HRESULT _hr = get_FootnoteFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1101)
inline void IGraphObject::PutRefFootnoteFont ( IFontDisp * ppFont ) {
    HRESULT _hr = putref_FootnoteFont(ppFont);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1102)
inline IFontDisp * IGraphObject::GetGroupTitleFont ( ) {
    IFontDisp * _result;
    HRESULT _hr = get_GroupTitleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1103)
inline void IGraphObject::PutRefGroupTitleFont ( IFontDisp * ppFont ) {
    HRESULT _hr = putref_GroupTitleFont(ppFont);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1104)
inline IFontDisp * IGraphObject::GetDataTitleFont ( ) {
    IFontDisp * _result;
    HRESULT _hr = get_DataTitleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1105)
inline void IGraphObject::PutRefDataTitleFont ( IFontDisp * ppFont ) {
    HRESULT _hr = putref_DataTitleFont(ppFont);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1106)
inline IFontDisp * IGraphObject::GetSeriesTitleFont ( ) {
    IFontDisp * _result;
    HRESULT _hr = get_SeriesTitleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1107)
inline void IGraphObject::PutRefSeriesTitleFont ( IFontDisp * ppFont ) {
    HRESULT _hr = putref_SeriesTitleFont(ppFont);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1108)
inline IFontDisp * IGraphObject::GetLegendFont ( ) {
    IFontDisp * _result;
    HRESULT _hr = get_LegendFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1109)
inline void IGraphObject::PutRefLegendFont ( IFontDisp * ppFont ) {
    HRESULT _hr = putref_LegendFont(ppFont);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1110)
inline IFontDisp * IGraphObject::GetGroupLabelFont ( ) {
    IFontDisp * _result;
    HRESULT _hr = get_GroupLabelFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1111)
inline void IGraphObject::PutRefGroupLabelFont ( IFontDisp * ppFont ) {
    HRESULT _hr = putref_GroupLabelFont(ppFont);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1112)
inline IFontDisp * IGraphObject::GetDataLabelFont ( ) {
    IFontDisp * _result;
    HRESULT _hr = get_DataLabelFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1113)
inline void IGraphObject::PutRefDataLabelFont ( IFontDisp * ppFont ) {
    HRESULT _hr = putref_DataLabelFont(ppFont);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1114)
inline IFontDisp * IGraphObject::GetSeriesLabelFont ( ) {
    IFontDisp * _result;
    HRESULT _hr = get_SeriesLabelFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1115)
inline void IGraphObject::PutRefSeriesLabelFont ( IFontDisp * ppFont ) {
    HRESULT _hr = putref_SeriesLabelFont(ppFont);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1116)
inline VARIANT_BOOL IGraphObject::GetIsTitleByDefault ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IsTitleByDefault(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1117)
inline void IGraphObject::PutIsTitleByDefault ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_IsTitleByDefault(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1118)
inline VARIANT_BOOL IGraphObject::GetIsSubTitleByDefault ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IsSubTitleByDefault(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1119)
inline void IGraphObject::PutIsSubTitleByDefault ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_IsSubTitleByDefault(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1120)
inline VARIANT_BOOL IGraphObject::GetIsFootnoteByDefault ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IsFootnoteByDefault(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1121)
inline void IGraphObject::PutIsFootnoteByDefault ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_IsFootnoteByDefault(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1122)
inline VARIANT_BOOL IGraphObject::GetIsXAxisTitleByDefault ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IsXAxisTitleByDefault(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1123)
inline void IGraphObject::PutIsXAxisTitleByDefault ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_IsXAxisTitleByDefault(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1124)
inline VARIANT_BOOL IGraphObject::GetIsYAxisTitleByDefault ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IsYAxisTitleByDefault(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1125)
inline void IGraphObject::PutIsYAxisTitleByDefault ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_IsYAxisTitleByDefault(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1126)
inline VARIANT_BOOL IGraphObject::GetIsZAxisTitleByDefault ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IsZAxisTitleByDefault(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1127)
inline void IGraphObject::PutIsZAxisTitleByDefault ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_IsZAxisTitleByDefault(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1128)
inline VARIANT_BOOL IGraphObject::GetEnableAutoScaleDataAxis ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableAutoScaleDataAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1129)
inline void IGraphObject::PutEnableAutoScaleDataAxis ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_EnableAutoScaleDataAxis(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1130)
inline VARIANT_BOOL IGraphObject::GetEnableAutoScaleData2Axis ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableAutoScaleData2Axis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1131)
inline void IGraphObject::PutEnableAutoScaleData2Axis ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_EnableAutoScaleData2Axis(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1132)
inline VARIANT_BOOL IGraphObject::GetEnableAutoScaleSeriesAxis ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableAutoScaleSeriesAxis(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1133)
inline void IGraphObject::PutEnableAutoScaleSeriesAxis ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_EnableAutoScaleSeriesAxis(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1134)
inline enum CRPieLegendLayout IGraphObject::GetLegendLayout ( ) {
    enum CRPieLegendLayout _result;
    HRESULT _hr = get_LegendLayout(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1135)
inline void IGraphObject::PutLegendLayout ( enum CRPieLegendLayout pLegendLayout ) {
    HRESULT _hr = put_LegendLayout(pLegendLayout);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1136)
inline enum CRSortDirection IGraphObject::GetConditionFieldSortOrder ( int index ) {
    enum CRSortDirection _result;
    HRESULT _hr = get_ConditionFieldSortOrder(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1137)
inline void IGraphObject::PutConditionFieldSortOrder ( int index, enum CRSortDirection pSortOrder ) {
    HRESULT _hr = put_ConditionFieldSortOrder(index, pSortOrder);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1138)
inline _variant_t IGraphObject::GetSpecifiedGroups ( int index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_SpecifiedGroups(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1139)
inline void IGraphObject::PutSpecifiedGroups ( int index, const _variant_t & pSpecifedGroupArray ) {
    HRESULT _hr = put_SpecifiedGroups(index, pSpecifedGroupArray);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1140)
inline _bstr_t IGraphObject::GetDataTitle ( ) {
    BSTR _result;
    HRESULT _hr = get_DataTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1141)
inline void IGraphObject::PutDataTitle ( _bstr_t ppDataTitle ) {
    HRESULT _hr = put_DataTitle(ppDataTitle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1142)
inline _bstr_t IGraphObject::GetData2Title ( ) {
    BSTR _result;
    HRESULT _hr = get_Data2Title(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1143)
inline void IGraphObject::PutData2Title ( _bstr_t ppData2Title ) {
    HRESULT _hr = put_Data2Title(ppData2Title);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1144)
inline VARIANT_BOOL IGraphObject::GetIsGroupsTitleByDefault ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IsGroupsTitleByDefault(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1145)
inline void IGraphObject::PutIsGroupsTitleByDefault ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_IsGroupsTitleByDefault(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1146)
inline VARIANT_BOOL IGraphObject::GetIsSeriesTitleByDefault ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IsSeriesTitleByDefault(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1147)
inline void IGraphObject::PutIsSeriesTitleByDefault ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_IsSeriesTitleByDefault(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1148)
inline VARIANT_BOOL IGraphObject::GetIsDataTitleByDefault ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IsDataTitleByDefault(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1149)
inline void IGraphObject::PutIsDataTitleByDefault ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_IsDataTitleByDefault(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1150)
inline VARIANT_BOOL IGraphObject::GetIsData2TitleByDefault ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IsData2TitleByDefault(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1151)
inline void IGraphObject::PutIsData2TitleByDefault ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_IsData2TitleByDefault(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1152)
inline IFontDisp * IGraphObject::GetData2TitleFont ( ) {
    IFontDisp * _result;
    HRESULT _hr = get_Data2TitleFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1153)
inline void IGraphObject::PutRefData2TitleFont ( IFontDisp * ppFont ) {
    HRESULT _hr = putref_Data2TitleFont(ppFont);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1154)
inline IFontDisp * IGraphObject::GetData2LabelFont ( ) {
    IFontDisp * _result;
    HRESULT _hr = get_Data2LabelFont(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1155)
inline void IGraphObject::PutRefData2LabelFont ( IFontDisp * ppFont ) {
    HRESULT _hr = putref_Data2LabelFont(ppFont);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1156)
inline _bstr_t IGraphObject::GetConditionFormula ( const _variant_t & FormulaType ) {
    BSTR _result;
    HRESULT _hr = get_ConditionFormula(FormulaType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1157)
inline void IGraphObject::PutConditionFormula ( const _variant_t & FormulaType, _bstr_t pVal ) {
    HRESULT _hr = put_ConditionFormula(FormulaType, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1158)
inline _bstr_t IGraphObject::GetCssClass ( ) {
    BSTR _result;
    HRESULT _hr = get_CssClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1159)
inline void IGraphObject::PutCssClass ( _bstr_t ppCssClass ) {
    HRESULT _hr = put_CssClass(ppCssClass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1160)
inline enum CRHyperlinkType IGraphObject::GetHyperlinkType ( ) {
    enum CRHyperlinkType _result;
    HRESULT _hr = get_HyperlinkType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1161)
inline void IGraphObject::PutHyperlinkType ( enum CRHyperlinkType pType ) {
    HRESULT _hr = put_HyperlinkType(pType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1162)
inline _bstr_t IGraphObject::GetHyperlinkText ( ) {
    BSTR _result;
    HRESULT _hr = get_HyperlinkText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1163)
inline void IGraphObject::PutHyperlinkText ( _bstr_t pText ) {
    HRESULT _hr = put_HyperlinkText(pText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IFieldDefinitions wrapper method implementations
//

#pragma implementation_key(1164)
inline IUnknownPtr IFieldDefinitions::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1165)
inline IFieldDefinitionPtr IFieldDefinitions::GetItem ( long index ) {
    struct IFieldDefinition * _result;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFieldDefinitionPtr(_result, false);
}

#pragma implementation_key(1166)
inline long IFieldDefinitions::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1167)
inline IReportObjectPtr IFieldDefinitions::GetParent ( ) {
    struct IReportObject * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IReportObjectPtr(_result, false);
}

#pragma implementation_key(1168)
inline HRESULT IFieldDefinitions::Add ( const _variant_t & Field ) {
    HRESULT _hr = raw_Add(Field);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1169)
inline HRESULT IFieldDefinitions::Delete ( const _variant_t & Field ) {
    HRESULT _hr = raw_Delete(Field);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IDatabase wrapper method implementations
//

#pragma implementation_key(1170)
inline IDatabaseTablesPtr IDatabase::GetTables ( ) {
    struct IDatabaseTables * _result;
    HRESULT _hr = get_Tables(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDatabaseTablesPtr(_result, false);
}

#pragma implementation_key(1171)
inline IReportPtr IDatabase::GetParent ( ) {
    struct IReport * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IReportPtr(_result, false);
}

#pragma implementation_key(1172)
inline HRESULT IDatabase::LogOnServer ( _bstr_t pDllName, _bstr_t pServerName, const _variant_t & pDatabaseName, const _variant_t & pUserID, const _variant_t & pPassword ) {
    HRESULT _hr = raw_LogOnServer(pDllName, pServerName, pDatabaseName, pUserID, pPassword);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1173)
inline HRESULT IDatabase::LogOffServer ( _bstr_t pDllName, _bstr_t pServerName, const _variant_t & pDatabaseName, const _variant_t & pUserID, const _variant_t & pPassword ) {
    HRESULT _hr = raw_LogOffServer(pDllName, pServerName, pDatabaseName, pUserID, pPassword);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1174)
inline HRESULT IDatabase::SetDataSource ( const _variant_t & data, const _variant_t & dataTag, const _variant_t & tableNumber ) {
    HRESULT _hr = raw_SetDataSource(data, dataTag, tableNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1175)
inline HRESULT IDatabase::Verify ( ) {
    HRESULT _hr = raw_Verify();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1176)
inline ITableLinksPtr IDatabase::GetLinks ( ) {
    struct ITableLinks * _result;
    HRESULT _hr = get_Links(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITableLinksPtr(_result, false);
}

#pragma implementation_key(1177)
inline HRESULT IDatabase::AddOLEDBSource ( _bstr_t pConnectionString, _bstr_t pTableName ) {
    HRESULT _hr = raw_AddOLEDBSource(pConnectionString, pTableName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1178)
inline HRESULT IDatabase::AddADOCommand ( const _variant_t & pConnection, const _variant_t & pCommand ) {
    HRESULT _hr = raw_AddADOCommand(pConnection, pCommand);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1179)
inline HRESULT IDatabase::LogOnServerEx ( _bstr_t pDllName, _bstr_t pServerName, const _variant_t & pDatabaseName, const _variant_t & pUserID, const _variant_t & pPassword, const _variant_t & pServerType, const _variant_t & pConnectionString ) {
    HRESULT _hr = raw_LogOnServerEx(pDllName, pServerName, pDatabaseName, pUserID, pPassword, pServerType, pConnectionString);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1180)
inline _bstr_t IDatabase::GetDictionaryLocation ( ) {
    BSTR _result;
    HRESULT _hr = get_DictionaryLocation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1181)
inline void IDatabase::PutDictionaryLocation ( _bstr_t ppLocation ) {
    HRESULT _hr = put_DictionaryLocation(ppLocation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1182)
inline HRESULT IDatabase::LogOnServerWithPrivateInfo ( _bstr_t pDllName, const _variant_t & privateInfo ) {
    HRESULT _hr = raw_LogOnServerWithPrivateInfo(pDllName, privateInfo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1183)
inline HRESULT IDatabase::ConvertDatabaseDriver ( _bstr_t pDllName, VARIANT_BOOL blDoImmediateConvert ) {
    HRESULT _hr = raw_ConvertDatabaseDriver(pDllName, blDoImmediateConvert);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IDatabaseTables wrapper method implementations
//

#pragma implementation_key(1184)
inline IUnknownPtr IDatabaseTables::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1185)
inline IDatabaseTablePtr IDatabaseTables::GetItem ( long index ) {
    struct IDatabaseTable * _result;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDatabaseTablePtr(_result, false);
}

#pragma implementation_key(1186)
inline long IDatabaseTables::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1187)
inline IDatabasePtr IDatabaseTables::GetParent ( ) {
    struct IDatabase * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDatabasePtr(_result, false);
}

#pragma implementation_key(1188)
inline HRESULT IDatabaseTables::Add ( _bstr_t pLocation, const _variant_t & pSubLocation, const _variant_t & pConnectInfo, const _variant_t & tableType, const _variant_t & pDllName, const _variant_t & pServerName, const _variant_t & pServerType, const _variant_t & pDatabaseName, const _variant_t & pUserID, const _variant_t & pPassword ) {
    HRESULT _hr = raw_Add(pLocation, pSubLocation, pConnectInfo, tableType, pDllName, pServerName, pServerType, pDatabaseName, pUserID, pPassword);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1189)
inline HRESULT IDatabaseTables::Delete ( long index ) {
    HRESULT _hr = raw_Delete(index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1190)
inline HRESULT IDatabaseTables::AddStoredProcedure ( _bstr_t pLocation, const _variant_t & pSubLocation, const _variant_t & pConnectInfo, const _variant_t & tableType, const _variant_t & pDllName, const _variant_t & pServerName, const _variant_t & pServerType, const _variant_t & pDatabaseName, const _variant_t & pUserID, const _variant_t & pPassword, const _variant_t & paramValueInfos ) {
    HRESULT _hr = raw_AddStoredProcedure(pLocation, pSubLocation, pConnectInfo, tableType, pDllName, pServerName, pServerType, pDatabaseName, pUserID, pPassword, paramValueInfos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IDatabaseTable wrapper method implementations
//

#pragma implementation_key(1191)
inline _bstr_t IDatabaseTable::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1192)
inline void IDatabaseTable::PutName ( _bstr_t ppName ) {
    HRESULT _hr = put_Name(ppName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1193)
inline _bstr_t IDatabaseTable::GetLocation ( ) {
    BSTR _result;
    HRESULT _hr = get_Location(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1194)
inline void IDatabaseTable::PutLocation ( _bstr_t ppLocation ) {
    HRESULT _hr = put_Location(ppLocation);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1195)
inline IDatabaseFieldDefinitionsPtr IDatabaseTable::GetFields ( ) {
    struct IDatabaseFieldDefinitions * _result;
    HRESULT _hr = get_Fields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDatabaseFieldDefinitionsPtr(_result, false);
}

#pragma implementation_key(1196)
inline HRESULT IDatabaseTable::SetPrivateData ( long dataTag, const _variant_t & data ) {
    HRESULT _hr = raw_SetPrivateData(dataTag, data);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1197)
inline IDatabasePtr IDatabaseTable::GetParent ( ) {
    struct IDatabase * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDatabasePtr(_result, false);
}

#pragma implementation_key(1198)
inline HRESULT IDatabaseTable::SetDataSource ( const _variant_t & data, const _variant_t & dataTag ) {
    HRESULT _hr = raw_SetDataSource(data, dataTag);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1199)
inline _bstr_t IDatabaseTable::GetDllName ( ) {
    BSTR _result;
    HRESULT _hr = get_DllName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1200)
inline _bstr_t IDatabaseTable::GetDecriptiveName ( ) {
    BSTR _result;
    HRESULT _hr = get_DecriptiveName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1201)
inline _bstr_t IDatabaseTable::GetLogOnServerName ( ) {
    BSTR _result;
    HRESULT _hr = get_LogOnServerName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1202)
inline _bstr_t IDatabaseTable::GetLogOnDatabaseName ( ) {
    BSTR _result;
    HRESULT _hr = get_LogOnDatabaseName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1203)
inline _bstr_t IDatabaseTable::GetLogOnUserID ( ) {
    BSTR _result;
    HRESULT _hr = get_LogOnUserID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1204)
inline _bstr_t IDatabaseTable::GetSessionUserID ( ) {
    BSTR _result;
    HRESULT _hr = get_SessionUserID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1205)
inline VARIANT_BOOL IDatabaseTable::TestConnectivity ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_TestConnectivity(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1206)
inline HRESULT IDatabaseTable::SetLogOnInfo ( _bstr_t pServerName, const _variant_t & pDatabaseName, const _variant_t & pUserID, const _variant_t & pPassword ) {
    HRESULT _hr = raw_SetLogOnInfo(pServerName, pDatabaseName, pUserID, pPassword);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1207)
inline HRESULT IDatabaseTable::SetSessionInfo ( _bstr_t pSessionUserID, _bstr_t pSessionPassword ) {
    HRESULT _hr = raw_SetSessionInfo(pSessionUserID, pSessionPassword);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1208)
inline enum CRDatabaseType IDatabaseTable::GetDatabaseType ( ) {
    enum CRDatabaseType _result;
    HRESULT _hr = get_DatabaseType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1209)
inline HRESULT IDatabaseTable::CheckDifferences ( long * pDifferences, VARIANT * reserved ) {
    HRESULT _hr = raw_CheckDifferences(pDifferences, reserved);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1210)
inline _bstr_t IDatabaseTable::GetSubLocation ( ) {
    BSTR _result;
    HRESULT _hr = get_SubLocation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1211)
inline HRESULT IDatabaseTable::SetTableLocation ( _bstr_t pLocation, _bstr_t pSubLocation, _bstr_t pConnectBufferSting ) {
    HRESULT _hr = raw_SetTableLocation(pLocation, pSubLocation, pConnectBufferSting);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1212)
inline _bstr_t IDatabaseTable::GetConnectBufferString ( ) {
    BSTR _result;
    HRESULT _hr = get_ConnectBufferString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1213)
inline void IDatabaseTable::PutConnectBufferString ( _bstr_t ppConnectBufferString ) {
    HRESULT _hr = put_ConnectBufferString(ppConnectBufferString);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1214)
inline void IDatabaseTable::PutDllName ( _bstr_t ppDllName ) {
    HRESULT _hr = put_DllName(ppDllName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1215)
inline INameValuePairsPtr IDatabaseTable::GetConnectionProperties ( ) {
    struct INameValuePairs * _result;
    HRESULT _hr = get_ConnectionProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return INameValuePairsPtr(_result, false);
}

//
// interface IDatabaseFieldDefinitions wrapper method implementations
//

#pragma implementation_key(1216)
inline IUnknownPtr IDatabaseFieldDefinitions::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1217)
inline IDatabaseFieldDefinitionPtr IDatabaseFieldDefinitions::GetItem ( long index ) {
    struct IDatabaseFieldDefinition * _result;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDatabaseFieldDefinitionPtr(_result, false);
}

#pragma implementation_key(1218)
inline long IDatabaseFieldDefinitions::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1219)
inline IDatabaseTablePtr IDatabaseFieldDefinitions::GetParent ( ) {
    struct IDatabaseTable * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDatabaseTablePtr(_result, false);
}

#pragma implementation_key(1220)
inline IDatabaseFieldDefinitionPtr IDatabaseFieldDefinitions::GetItemByName ( _bstr_t Name ) {
    struct IDatabaseFieldDefinition * _result;
    HRESULT _hr = raw_GetItemByName(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDatabaseFieldDefinitionPtr(_result, false);
}

//
// interface INameValuePairs wrapper method implementations
//

#pragma implementation_key(1221)
inline IUnknownPtr INameValuePairs::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1222)
inline _variant_t INameValuePairs::GetItem ( _bstr_t Name ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Item(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1223)
inline long INameValuePairs::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1224)
inline HRESULT INameValuePairs::Add ( _bstr_t Name, const _variant_t & Value ) {
    HRESULT _hr = raw_Add(Name, Value);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1225)
inline HRESULT INameValuePairs::Delete ( const _variant_t & index ) {
    HRESULT _hr = raw_Delete(index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1226)
inline HRESULT INameValuePairs::DeleteAll ( ) {
    HRESULT _hr = raw_DeleteAll();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1227)
inline _variant_t INameValuePairs::GetNameIDs ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_NameIDs(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface ITableLinks wrapper method implementations
//

#pragma implementation_key(1228)
inline IUnknownPtr ITableLinks::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1229)
inline long ITableLinks::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1230)
inline ITableLinkPtr ITableLinks::GetItem ( long index ) {
    struct ITableLink * _result;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITableLinkPtr(_result, false);
}

#pragma implementation_key(1231)
inline IDatabasePtr ITableLinks::GetParent ( ) {
    struct IDatabase * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDatabasePtr(_result, false);
}

#pragma implementation_key(1232)
inline ITableLinkPtr ITableLinks::Add ( struct IDatabaseTable * psrcTable, struct IDatabaseTable * pDestTable, const _variant_t & srcFields, const _variant_t & destFields, enum CRLinkJoinType JoinType, enum CRLinkLookUpType LookupType, VARIANT_BOOL PartialMatchEnabled, short indexInUse ) {
    struct ITableLink * _result;
    HRESULT _hr = raw_Add(psrcTable, pDestTable, srcFields, destFields, JoinType, LookupType, PartialMatchEnabled, indexInUse, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ITableLinkPtr(_result, false);
}

#pragma implementation_key(1233)
inline HRESULT ITableLinks::Delete ( long index ) {
    HRESULT _hr = raw_Delete(index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ITableLink wrapper method implementations
//

#pragma implementation_key(1234)
inline IDatabasePtr ITableLink::GetParent ( ) {
    struct IDatabase * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDatabasePtr(_result, false);
}

#pragma implementation_key(1235)
inline IDatabaseTablePtr ITableLink::GetSourceTable ( ) {
    struct IDatabaseTable * _result;
    HRESULT _hr = get_SourceTable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDatabaseTablePtr(_result, false);
}

#pragma implementation_key(1236)
inline IDatabaseTablePtr ITableLink::GetDestinationTable ( ) {
    struct IDatabaseTable * _result;
    HRESULT _hr = get_DestinationTable(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDatabaseTablePtr(_result, false);
}

#pragma implementation_key(1237)
inline enum CRLinkJoinType ITableLink::GetJoinType ( ) {
    enum CRLinkJoinType _result;
    HRESULT _hr = get_JoinType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1238)
inline enum CRLinkLookUpType ITableLink::GetLookupType ( ) {
    enum CRLinkLookUpType _result;
    HRESULT _hr = get_LookupType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1239)
inline VARIANT_BOOL ITableLink::GetPartialMatchEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PartialMatchEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1240)
inline short ITableLink::GetIndexUsed ( ) {
    short _result;
    HRESULT _hr = get_IndexUsed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1241)
inline IDatabaseFieldDefinitionsPtr ITableLink::GetSourceFields ( ) {
    struct IDatabaseFieldDefinitions * _result;
    HRESULT _hr = get_SourceFields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDatabaseFieldDefinitionsPtr(_result, false);
}

#pragma implementation_key(1242)
inline IDatabaseFieldDefinitionsPtr ITableLink::GetDestinationFields ( ) {
    struct IDatabaseFieldDefinitions * _result;
    HRESULT _hr = get_DestinationFields(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDatabaseFieldDefinitionsPtr(_result, false);
}

//
// interface IFormulaFieldDefinitions wrapper method implementations
//

#pragma implementation_key(1243)
inline IUnknownPtr IFormulaFieldDefinitions::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1244)
inline IFormulaFieldDefinitionPtr IFormulaFieldDefinitions::GetItem ( long index ) {
    struct IFormulaFieldDefinition * _result;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFormulaFieldDefinitionPtr(_result, false);
}

#pragma implementation_key(1245)
inline long IFormulaFieldDefinitions::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1246)
inline IReportPtr IFormulaFieldDefinitions::GetParent ( ) {
    struct IReport * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IReportPtr(_result, false);
}

#pragma implementation_key(1247)
inline IFormulaFieldDefinitionPtr IFormulaFieldDefinitions::Add ( _bstr_t FormulaName, _bstr_t Text ) {
    struct IFormulaFieldDefinition * _result;
    HRESULT _hr = raw_Add(FormulaName, Text, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFormulaFieldDefinitionPtr(_result, false);
}

#pragma implementation_key(1248)
inline HRESULT IFormulaFieldDefinitions::Delete ( const _variant_t & index ) {
    HRESULT _hr = raw_Delete(index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1249)
inline IFormulaFieldDefinitionPtr IFormulaFieldDefinitions::GetItemByName ( _bstr_t Name ) {
    struct IFormulaFieldDefinition * _result;
    HRESULT _hr = raw_GetItemByName(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IFormulaFieldDefinitionPtr(_result, false);
}

//
// interface IFormulaFieldDefinition wrapper method implementations
//

#pragma implementation_key(1250)
inline enum CRFieldKind IFormulaFieldDefinition::GetKind ( ) {
    enum CRFieldKind _result;
    HRESULT _hr = get_Kind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1251)
inline CRFieldValueType IFormulaFieldDefinition::GetValueType ( ) {
    CRFieldValueType _result;
    HRESULT _hr = get_ValueType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1252)
inline short IFormulaFieldDefinition::GetNumberOfBytes ( ) {
    short _result;
    HRESULT _hr = get_NumberOfBytes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1253)
inline _bstr_t IFormulaFieldDefinition::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1254)
inline _variant_t IFormulaFieldDefinition::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1255)
inline _bstr_t IFormulaFieldDefinition::GetFormulaFieldName ( ) {
    BSTR _result;
    HRESULT _hr = get_FormulaFieldName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1256)
inline _bstr_t IFormulaFieldDefinition::GetText ( ) {
    BSTR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1257)
inline void IFormulaFieldDefinition::PutText ( _bstr_t ppText ) {
    HRESULT _hr = put_Text(ppText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1258)
inline IReportPtr IFormulaFieldDefinition::GetParent ( ) {
    struct IReport * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IReportPtr(_result, false);
}

#pragma implementation_key(1259)
inline _variant_t IFormulaFieldDefinition::GetPreviousValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PreviousValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1260)
inline _variant_t IFormulaFieldDefinition::GetNextValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_NextValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1261)
inline HRESULT IFormulaFieldDefinition::Check ( VARIANT_BOOL * pBool, BSTR * ppErrorString ) {
    HRESULT _hr = raw_Check(pBool, ppErrorString);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IParameterFieldDefinitions wrapper method implementations
//

#pragma implementation_key(1262)
inline IUnknownPtr IParameterFieldDefinitions::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1263)
inline IParameterFieldDefinitionPtr IParameterFieldDefinitions::GetItem ( long index ) {
    struct IParameterFieldDefinition * _result;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IParameterFieldDefinitionPtr(_result, false);
}

#pragma implementation_key(1264)
inline long IParameterFieldDefinitions::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1265)
inline IReportPtr IParameterFieldDefinitions::GetParent ( ) {
    struct IReport * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IReportPtr(_result, false);
}

#pragma implementation_key(1266)
inline IParameterFieldDefinitionPtr IParameterFieldDefinitions::Add ( _bstr_t parameterName, CRFieldValueType ValueType ) {
    struct IParameterFieldDefinition * _result;
    HRESULT _hr = raw_Add(parameterName, ValueType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IParameterFieldDefinitionPtr(_result, false);
}

#pragma implementation_key(1267)
inline HRESULT IParameterFieldDefinitions::Delete ( const _variant_t & index ) {
    HRESULT _hr = raw_Delete(index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1268)
inline IParameterFieldDefinitionPtr IParameterFieldDefinitions::GetItemByName ( _bstr_t Name, const _variant_t & SubreportName ) {
    struct IParameterFieldDefinition * _result;
    HRESULT _hr = raw_GetItemByName(Name, SubreportName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IParameterFieldDefinitionPtr(_result, false);
}

//
// interface IParameterFieldDefinition wrapper method implementations
//

#pragma implementation_key(1269)
inline enum CRFieldKind IParameterFieldDefinition::GetKind ( ) {
    enum CRFieldKind _result;
    HRESULT _hr = get_Kind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1270)
inline CRFieldValueType IParameterFieldDefinition::GetValueType ( ) {
    CRFieldValueType _result;
    HRESULT _hr = get_ValueType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1271)
inline short IParameterFieldDefinition::GetNumberOfBytes ( ) {
    short _result;
    HRESULT _hr = get_NumberOfBytes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1272)
inline _bstr_t IParameterFieldDefinition::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1273)
inline _variant_t IParameterFieldDefinition::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1274)
inline _bstr_t IParameterFieldDefinition::GetParameterFieldName ( ) {
    BSTR _result;
    HRESULT _hr = get_ParameterFieldName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1275)
inline IReportPtr IParameterFieldDefinition::GetParent ( ) {
    struct IReport * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IReportPtr(_result, false);
}

#pragma implementation_key(1276)
inline _variant_t IParameterFieldDefinition::GetPreviousValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PreviousValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1277)
inline _variant_t IParameterFieldDefinition::GetNextValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_NextValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1278)
inline _bstr_t IParameterFieldDefinition::GetPrompt ( ) {
    BSTR _result;
    HRESULT _hr = get_Prompt(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1279)
inline void IParameterFieldDefinition::PutPrompt ( _bstr_t ppPrompt ) {
    HRESULT _hr = put_Prompt(ppPrompt);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1280)
inline VARIANT_BOOL IParameterFieldDefinition::GetIsDefaultValueSet ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IsDefaultValueSet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1281)
inline _bstr_t IParameterFieldDefinition::GetReportName ( ) {
    BSTR _result;
    HRESULT _hr = get_ReportName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1282)
inline VARIANT_BOOL IParameterFieldDefinition::GetNeedsCurrentValue ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_NeedsCurrentValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1283)
inline VARIANT_BOOL IParameterFieldDefinition::GetIsCurrentValueSet ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IsCurrentValueSet(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1284)
inline _variant_t IParameterFieldDefinition::GetCurrentValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_CurrentValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1285)
inline _variant_t IParameterFieldDefinition::GetDefaultValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_DefaultValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1286)
inline HRESULT IParameterFieldDefinition::SetCurrentValue ( const _variant_t & CurrentValue, const _variant_t & ValueType ) {
    HRESULT _hr = raw_SetCurrentValue(CurrentValue, ValueType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1287)
inline HRESULT IParameterFieldDefinition::SetDefaultValue ( const _variant_t & DefaultValue, const _variant_t & ValueType ) {
    HRESULT _hr = raw_SetDefaultValue(DefaultValue, ValueType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1288)
inline VARIANT_BOOL IParameterFieldDefinition::GetEnableRangeLimit ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableRangeLimit(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1289)
inline void IParameterFieldDefinition::PutEnableRangeLimit ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_EnableRangeLimit(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1290)
inline _variant_t IParameterFieldDefinition::GetMinimumValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MinimumValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1291)
inline void IParameterFieldDefinition::PutMinimumValue ( const _variant_t & pMinimumValue ) {
    HRESULT _hr = put_MinimumValue(pMinimumValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1292)
inline _variant_t IParameterFieldDefinition::GetMaximumValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MaximumValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1293)
inline void IParameterFieldDefinition::PutMaximumValue ( const _variant_t & pMaximumValue ) {
    HRESULT _hr = put_MaximumValue(pMaximumValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1294)
inline _bstr_t IParameterFieldDefinition::GetEditMask ( ) {
    BSTR _result;
    HRESULT _hr = get_EditMask(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1295)
inline void IParameterFieldDefinition::PutEditMask ( _bstr_t ppEditMask ) {
    HRESULT _hr = put_EditMask(ppEditMask);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1296)
inline enum CRParameterFieldType IParameterFieldDefinition::GetParameterType ( ) {
    enum CRParameterFieldType _result;
    HRESULT _hr = get_ParameterType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1297)
inline VARIANT_BOOL IParameterFieldDefinition::GetDisallowEditing ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_DisallowEditing(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1298)
inline void IParameterFieldDefinition::PutDisallowEditing ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_DisallowEditing(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1299)
inline short IParameterFieldDefinition::GetNumberOfDefaultValues ( ) {
    short _result;
    HRESULT _hr = get_NumberOfDefaultValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1300)
inline _variant_t IParameterFieldDefinition::GetNthDefaultValue ( short index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetNthDefaultValue(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1301)
inline HRESULT IParameterFieldDefinition::SetNthDefaultValue ( short index, const _variant_t & nthDefaultValue ) {
    HRESULT _hr = raw_SetNthDefaultValue(index, nthDefaultValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1302)
inline HRESULT IParameterFieldDefinition::AddDefaultValue ( const _variant_t & DefaultValue ) {
    HRESULT _hr = raw_AddDefaultValue(DefaultValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1303)
inline HRESULT IParameterFieldDefinition::DeleteNthDefaultValue ( short index ) {
    HRESULT _hr = raw_DeleteNthDefaultValue(index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1304)
inline VARIANT_BOOL IParameterFieldDefinition::GetEnableNullValue ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableNullValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1305)
inline void IParameterFieldDefinition::PutEnableNullValue ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_EnableNullValue(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1306)
inline VARIANT_BOOL IParameterFieldDefinition::GetEnableMultipleValues ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableMultipleValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1307)
inline void IParameterFieldDefinition::PutEnableMultipleValues ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_EnableMultipleValues(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1308)
inline enum CRDiscreteOrRangeKind IParameterFieldDefinition::GetDiscreteOrRangeKind ( ) {
    enum CRDiscreteOrRangeKind _result;
    HRESULT _hr = get_DiscreteOrRangeKind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1309)
inline void IParameterFieldDefinition::PutDiscreteOrRangeKind ( enum CRDiscreteOrRangeKind pDiscreteOrRangeKind ) {
    HRESULT _hr = put_DiscreteOrRangeKind(pDiscreteOrRangeKind);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1310)
inline VARIANT_BOOL IParameterFieldDefinition::GetPlaceInGroup ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PlaceInGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1311)
inline void IParameterFieldDefinition::PutPlaceInGroup ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_PlaceInGroup(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1312)
inline short IParameterFieldDefinition::GetGroupNumber ( ) {
    short _result;
    HRESULT _hr = get_GroupNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1313)
inline void IParameterFieldDefinition::PutGroupNumber ( short pGroupNumber ) {
    HRESULT _hr = put_GroupNumber(pGroupNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1314)
inline VARIANT_BOOL IParameterFieldDefinition::GetEnableExclusiveGroup ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableExclusiveGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1315)
inline void IParameterFieldDefinition::PutEnableExclusiveGroup ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_EnableExclusiveGroup(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1316)
inline short IParameterFieldDefinition::GetNumberOfCurrentValues ( ) {
    short _result;
    HRESULT _hr = get_NumberOfCurrentValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1317)
inline short IParameterFieldDefinition::GetNumberOfCurrentRanges ( ) {
    short _result;
    HRESULT _hr = get_NumberOfCurrentRanges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1318)
inline _variant_t IParameterFieldDefinition::GetNthCurrentValue ( short index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetNthCurrentValue(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1319)
inline HRESULT IParameterFieldDefinition::AddCurrentValue ( const _variant_t & CurrentValue ) {
    HRESULT _hr = raw_AddCurrentValue(CurrentValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1320)
inline HRESULT IParameterFieldDefinition::GetNthCurrentRange ( short index, VARIANT * pStart, VARIANT * pEnd, enum CRRangeInfo * pRangeInfo ) {
    HRESULT _hr = raw_GetNthCurrentRange(index, pStart, pEnd, pRangeInfo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1321)
inline HRESULT IParameterFieldDefinition::AddCurrentRange ( const _variant_t & start, const _variant_t & end, enum CRRangeInfo rangeInfo ) {
    HRESULT _hr = raw_AddCurrentRange(start, end, rangeInfo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1322)
inline HRESULT IParameterFieldDefinition::ClearCurrentValueAndRange ( ) {
    HRESULT _hr = raw_ClearCurrentValueAndRange();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1323)
inline _bstr_t IParameterFieldDefinition::GetNthValueDescription ( short index ) {
    BSTR _result;
    HRESULT _hr = get_NthValueDescription(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1324)
inline void IParameterFieldDefinition::PutNthValueDescription ( short index, _bstr_t pValueDescription ) {
    HRESULT _hr = put_NthValueDescription(index, pValueDescription);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1325)
inline VARIANT_BOOL IParameterFieldDefinition::GetEnableShowDescriptionOnly ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableShowDescriptionOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1326)
inline void IParameterFieldDefinition::PutEnableShowDescriptionOnly ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_EnableShowDescriptionOnly(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1327)
inline enum CRParameterPicklistSortMethod IParameterFieldDefinition::GetPicklistSortMethod ( ) {
    enum CRParameterPicklistSortMethod _result;
    HRESULT _hr = get_PicklistSortMethod(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1328)
inline void IParameterFieldDefinition::PutPicklistSortMethod ( enum CRParameterPicklistSortMethod pMethod ) {
    HRESULT _hr = put_PicklistSortMethod(pMethod);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1329)
inline VARIANT_BOOL IParameterFieldDefinition::GetEnableSortBasedOnDesc ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_EnableSortBasedOnDesc(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1330)
inline void IParameterFieldDefinition::PutEnableSortBasedOnDesc ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_EnableSortBasedOnDesc(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IGroupNameFieldDefinitions wrapper method implementations
//

#pragma implementation_key(1331)
inline IUnknownPtr IGroupNameFieldDefinitions::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1332)
inline IGroupNameFieldDefinitionPtr IGroupNameFieldDefinitions::GetItem ( long index ) {
    struct IGroupNameFieldDefinition * _result;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IGroupNameFieldDefinitionPtr(_result, false);
}

#pragma implementation_key(1333)
inline long IGroupNameFieldDefinitions::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1334)
inline IReportPtr IGroupNameFieldDefinitions::GetParent ( ) {
    struct IReport * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IReportPtr(_result, false);
}

//
// interface IGroupNameFieldDefinition wrapper method implementations
//

#pragma implementation_key(1335)
inline enum CRFieldKind IGroupNameFieldDefinition::GetKind ( ) {
    enum CRFieldKind _result;
    HRESULT _hr = get_Kind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1336)
inline CRFieldValueType IGroupNameFieldDefinition::GetValueType ( ) {
    CRFieldValueType _result;
    HRESULT _hr = get_ValueType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1337)
inline short IGroupNameFieldDefinition::GetNumberOfBytes ( ) {
    short _result;
    HRESULT _hr = get_NumberOfBytes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1338)
inline _bstr_t IGroupNameFieldDefinition::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1339)
inline _variant_t IGroupNameFieldDefinition::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1340)
inline _bstr_t IGroupNameFieldDefinition::GetGroupNameFieldName ( ) {
    BSTR _result;
    HRESULT _hr = get_GroupNameFieldName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1341)
inline IReportPtr IGroupNameFieldDefinition::GetParent ( ) {
    struct IReport * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IReportPtr(_result, false);
}

#pragma implementation_key(1342)
inline _variant_t IGroupNameFieldDefinition::GetPreviousValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PreviousValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1343)
inline _variant_t IGroupNameFieldDefinition::GetNextValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_NextValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1344)
inline short IGroupNameFieldDefinition::GetGroupNumber ( ) {
    short _result;
    HRESULT _hr = get_GroupNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1345)
inline _bstr_t IGroupNameFieldDefinition::GetGroupNameConditionFormula ( ) {
    BSTR _result;
    HRESULT _hr = get_GroupNameConditionFormula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1346)
inline void IGroupNameFieldDefinition::PutGroupNameConditionFormula ( _bstr_t pVal ) {
    HRESULT _hr = put_GroupNameConditionFormula(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISummaryFieldDefinitions wrapper method implementations
//

#pragma implementation_key(1347)
inline IUnknownPtr ISummaryFieldDefinitions::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1348)
inline ISummaryFieldDefinitionPtr ISummaryFieldDefinitions::GetItem ( long index ) {
    struct ISummaryFieldDefinition * _result;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISummaryFieldDefinitionPtr(_result, false);
}

#pragma implementation_key(1349)
inline long ISummaryFieldDefinitions::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1350)
inline IReportPtr ISummaryFieldDefinitions::GetParent ( ) {
    struct IReport * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IReportPtr(_result, false);
}

#pragma implementation_key(1351)
inline ISummaryFieldDefinitionPtr ISummaryFieldDefinitions::Add ( long groupLevel, const _variant_t & Field, enum CRSummaryType SummaryType, const _variant_t & secondSummaryFieldOrFactor ) {
    struct ISummaryFieldDefinition * _result;
    HRESULT _hr = raw_Add(groupLevel, Field, SummaryType, secondSummaryFieldOrFactor, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISummaryFieldDefinitionPtr(_result, false);
}

#pragma implementation_key(1352)
inline HRESULT ISummaryFieldDefinitions::Delete ( const _variant_t & index ) {
    HRESULT _hr = raw_Delete(index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IPageEngine wrapper method implementations
//

#pragma implementation_key(1353)
inline enum CRImageType IPageEngine::GetImageOptions ( ) {
    enum CRImageType _result;
    HRESULT _hr = get_ImageOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1354)
inline void IPageEngine::PutImageOptions ( enum CRImageType pImageOptions ) {
    HRESULT _hr = put_ImageOptions(pImageOptions);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1355)
inline IPageGeneratorPtr IPageEngine::CreatePageGenerator ( const _variant_t & GroupPath, const _variant_t & DrillDownLevel ) {
    struct IPageGenerator * _result;
    HRESULT _hr = raw_CreatePageGenerator(GroupPath, DrillDownLevel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPageGeneratorPtr(_result, false);
}

#pragma implementation_key(1356)
inline _variant_t IPageEngine::RenderTotallerETF ( const _variant_t & rootGroupPath, long startingChildNumber, short pastRootLevels, const _variant_t & maxNodeCount, enum CRRenderResultType resultType ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_RenderTotallerETF(rootGroupPath, startingChildNumber, pastRootLevels, maxNodeCount, resultType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1357)
inline _variant_t IPageEngine::RenderTotallerHTML ( const _variant_t & rootGroupPath, long startingChildNumber, short pastRootLevels, const _variant_t & maxNodeCount, const _variant_t & openGroupPath, VARIANT_BOOL includeDrillDownLinks, _bstr_t baseURL, enum CRRenderResultType resultType ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_RenderTotallerHTML(rootGroupPath, startingChildNumber, pastRootLevels, maxNodeCount, openGroupPath, includeDrillDownLinks, baseURL, resultType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1358)
inline IReportPtr IPageEngine::GetParent ( ) {
    struct IReport * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IReportPtr(_result, false);
}

#pragma implementation_key(1359)
inline enum CRPlaceHolderType IPageEngine::GetPlaceHolderOptions ( ) {
    enum CRPlaceHolderType _result;
    HRESULT _hr = get_PlaceHolderOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1360)
inline void IPageEngine::PutPlaceHolderOptions ( enum CRPlaceHolderType pPlaceHolderType ) {
    HRESULT _hr = put_PlaceHolderOptions(pPlaceHolderType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1361)
inline enum CRValueFormatType IPageEngine::GetValueFormatOptions ( ) {
    enum CRValueFormatType _result;
    HRESULT _hr = get_ValueFormatOptions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1362)
inline void IPageEngine::PutValueFormatOptions ( enum CRValueFormatType pValueFormatType ) {
    HRESULT _hr = put_ValueFormatOptions(pValueFormatType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IPageGenerator wrapper method implementations
//

#pragma implementation_key(1363)
inline IPageEnginePtr IPageGenerator::GetParent ( ) {
    struct IPageEngine * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPageEnginePtr(_result, false);
}

#pragma implementation_key(1364)
inline IPagesPtr IPageGenerator::GetPages ( ) {
    struct IPages * _result;
    HRESULT _hr = get_Pages(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPagesPtr(_result, false);
}

#pragma implementation_key(1365)
inline short IPageGenerator::GetDrillDownLevel ( ) {
    short _result;
    HRESULT _hr = get_DrillDownLevel(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1366)
inline _variant_t IPageGenerator::GetGroupPath ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_GroupPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1367)
inline long IPageGenerator::GetPageNumberForGroup ( const _variant_t & GroupPath ) {
    long _result;
    HRESULT _hr = raw_GetPageNumberForGroup(GroupPath, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1368)
inline IPageGeneratorPtr IPageGenerator::DrillOnGraph ( long PageNumber, long xOffset, long yOffset ) {
    struct IPageGenerator * _result;
    HRESULT _hr = raw_DrillOnGraph(PageNumber, xOffset, yOffset, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPageGeneratorPtr(_result, false);
}

#pragma implementation_key(1369)
inline HRESULT IPageGenerator::SearchForText ( _bstr_t Text, enum CRSearchDirection direction, long * pPageNumber ) {
    HRESULT _hr = raw_SearchForText(Text, direction, pPageNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1370)
inline _bstr_t IPageGenerator::GetGroupName ( ) {
    BSTR _result;
    HRESULT _hr = get_GroupName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1371)
inline _bstr_t IPageGenerator::GetReportName ( ) {
    BSTR _result;
    HRESULT _hr = get_ReportName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1372)
inline long IPageGenerator::GetContainingPageNumber ( ) {
    long _result;
    HRESULT _hr = get_ContainingPageNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1373)
inline _variant_t IPageGenerator::GetContainingGroupPath ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_ContainingGroupPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1374)
inline _bstr_t IPageGenerator::GetContainingGroupName ( ) {
    BSTR _result;
    HRESULT _hr = get_ContainingGroupName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1375)
inline long IPageGenerator::GetxOffset ( ) {
    long _result;
    HRESULT _hr = get_xOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1376)
inline long IPageGenerator::GetyOffset ( ) {
    long _result;
    HRESULT _hr = get_yOffset(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1377)
inline _variant_t IPageGenerator::RenderTotallerETF ( const _variant_t & rootGroupPath, long startingChildNumber, short pastRootLevels, const _variant_t & maxNodeCount, enum CRRenderResultType resultType ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_RenderTotallerETF(rootGroupPath, startingChildNumber, pastRootLevels, maxNodeCount, resultType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1378)
inline _variant_t IPageGenerator::RenderTotallerHTML ( const _variant_t & rootGroupPath, long startingChildNumber, short pastRootLevels, const _variant_t & maxNodeCount, const _variant_t & openGroupPath, VARIANT_BOOL includeDrillDownLinks, _bstr_t baseURL, enum CRRenderResultType resultType ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_RenderTotallerHTML(rootGroupPath, startingChildNumber, pastRootLevels, maxNodeCount, openGroupPath, includeDrillDownLinks, baseURL, resultType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1379)
inline IPageGeneratorPtr IPageGenerator::DrillOnMap ( long PageNumber, long xOffset, long yOffset ) {
    struct IPageGenerator * _result;
    HRESULT _hr = raw_DrillOnMap(PageNumber, xOffset, yOffset, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPageGeneratorPtr(_result, false);
}

#pragma implementation_key(1380)
inline IPageGeneratorPtr IPageGenerator::DrillOnSubreport ( long PageNumber, long xOffset, long yOffset ) {
    struct IPageGenerator * _result;
    HRESULT _hr = raw_DrillOnSubreport(PageNumber, xOffset, yOffset, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPageGeneratorPtr(_result, false);
}

#pragma implementation_key(1381)
inline _variant_t IPageGenerator::Export ( enum CRRenderResultType resultType ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_Export(resultType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1382)
inline IPageGeneratorPtr IPageGenerator::CreateSubreportPageGenerator ( const _variant_t & GroupPath, const _variant_t & DrillDownLevel ) {
    struct IPageGenerator * _result;
    HRESULT _hr = raw_CreateSubreportPageGenerator(GroupPath, DrillDownLevel, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPageGeneratorPtr(_result, false);
}

#pragma implementation_key(1383)
inline VARIANT_BOOL IPageGenerator::FindText ( _bstr_t Text, enum CRSearchDirection direction, VARIANT * pPageNumber ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_FindText(Text, direction, pPageNumber, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPages wrapper method implementations
//

#pragma implementation_key(1384)
inline IUnknownPtr IPages::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1385)
inline IPagePtr IPages::GetItem ( long index ) {
    struct IPage * _result;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPagePtr(_result, false);
}

#pragma implementation_key(1386)
inline long IPages::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1387)
inline IPageGeneratorPtr IPages::GetParent ( ) {
    struct IPageGenerator * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPageGeneratorPtr(_result, false);
}

//
// interface IPage wrapper method implementations
//

#pragma implementation_key(1388)
inline IPageGeneratorPtr IPage::GetParent ( ) {
    struct IPageGenerator * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IPageGeneratorPtr(_result, false);
}

#pragma implementation_key(1389)
inline long IPage::GetPageNumber ( ) {
    long _result;
    HRESULT _hr = get_PageNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1390)
inline VARIANT_BOOL IPage::GetIsLastPage ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IsLastPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1391)
inline _variant_t IPage::RenderEPF ( enum CRRenderResultType resultType ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_RenderEPF(resultType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1392)
inline _variant_t IPage::RenderHTML ( VARIANT_BOOL includeDrillDownLinks, enum CRHTMLPageStyle pageStyle, enum CRHTMLToolbarStyle toolbarStyle, _bstr_t baseURL, enum CRRenderResultType resultType ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_RenderHTML(includeDrillDownLinks, pageStyle, toolbarStyle, baseURL, resultType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1393)
inline VARIANT_BOOL IPage::GetIsMissingTotalPageCount ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IsMissingTotalPageCount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IExportOptions wrapper method implementations
//

#pragma implementation_key(1394)
inline IReportPtr IExportOptions::GetParent ( ) {
    struct IReport * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IReportPtr(_result, false);
}

#pragma implementation_key(1395)
inline enum CRExportFormatType IExportOptions::GetFormatType ( ) {
    enum CRExportFormatType _result;
    HRESULT _hr = get_FormatType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1396)
inline void IExportOptions::PutFormatType ( enum CRExportFormatType pFormatType ) {
    HRESULT _hr = put_FormatType(pFormatType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1397)
inline enum CRExportDestinationType IExportOptions::GetDestinationType ( ) {
    enum CRExportDestinationType _result;
    HRESULT _hr = get_DestinationType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1398)
inline void IExportOptions::PutDestinationType ( enum CRExportDestinationType pDestinationType ) {
    HRESULT _hr = put_DestinationType(pDestinationType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1399)
inline _bstr_t IExportOptions::GetExchangeProfile ( ) {
    BSTR _result;
    HRESULT _hr = get_ExchangeProfile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1400)
inline void IExportOptions::PutExchangeProfile ( _bstr_t ppExchangeProfile ) {
    HRESULT _hr = put_ExchangeProfile(ppExchangeProfile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1401)
inline _bstr_t IExportOptions::GetDiskFileName ( ) {
    BSTR _result;
    HRESULT _hr = get_DiskFileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1402)
inline void IExportOptions::PutDiskFileName ( _bstr_t ppDiskFileName ) {
    HRESULT _hr = put_DiskFileName(ppDiskFileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1403)
inline VARIANT_BOOL IExportOptions::GetUseReportDateFormat ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_UseReportDateFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1404)
inline void IExportOptions::PutUseReportDateFormat ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_UseReportDateFormat(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1405)
inline VARIANT_BOOL IExportOptions::GetUseReportNumberFormat ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_UseReportNumberFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1406)
inline void IExportOptions::PutUseReportNumberFormat ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_UseReportNumberFormat(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1407)
inline _bstr_t IExportOptions::GetCharFieldDelimiter ( ) {
    BSTR _result;
    HRESULT _hr = get_CharFieldDelimiter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1408)
inline void IExportOptions::PutCharFieldDelimiter ( _bstr_t ppCharFieldDelimiter ) {
    HRESULT _hr = put_CharFieldDelimiter(ppCharFieldDelimiter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1409)
inline _bstr_t IExportOptions::GetCharStringDelimiter ( ) {
    BSTR _result;
    HRESULT _hr = get_CharStringDelimiter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1410)
inline void IExportOptions::PutCharStringDelimiter ( _bstr_t ppCharStringDelimiter ) {
    HRESULT _hr = put_CharStringDelimiter(ppCharStringDelimiter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1411)
inline short IExportOptions::GetNumberOfLinesPerPage ( ) {
    short _result;
    HRESULT _hr = get_NumberOfLinesPerPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1412)
inline void IExportOptions::PutNumberOfLinesPerPage ( short pNumberOfLinesPerPage ) {
    HRESULT _hr = put_NumberOfLinesPerPage(pNumberOfLinesPerPage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1413)
inline _bstr_t IExportOptions::GetODBCDataSourceName ( ) {
    BSTR _result;
    HRESULT _hr = get_ODBCDataSourceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1414)
inline void IExportOptions::PutODBCDataSourceName ( _bstr_t ppODBCDataSourceName ) {
    HRESULT _hr = put_ODBCDataSourceName(ppODBCDataSourceName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1415)
inline _bstr_t IExportOptions::GetODBCDataSourceUserID ( ) {
    BSTR _result;
    HRESULT _hr = get_ODBCDataSourceUserID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1416)
inline void IExportOptions::PutODBCDataSourceUserID ( _bstr_t ppODBCDataSourceUserID ) {
    HRESULT _hr = put_ODBCDataSourceUserID(ppODBCDataSourceUserID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1417)
inline void IExportOptions::PutODBCDataSourcePassword ( _bstr_t _arg1 ) {
    HRESULT _hr = put_ODBCDataSourcePassword(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1418)
inline _bstr_t IExportOptions::GetODBCExportTableName ( ) {
    BSTR _result;
    HRESULT _hr = get_ODBCExportTableName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1419)
inline void IExportOptions::PutODBCExportTableName ( _bstr_t ppODBCExportTableName ) {
    HRESULT _hr = put_ODBCExportTableName(ppODBCExportTableName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1420)
inline _bstr_t IExportOptions::GetHTMLFileName ( ) {
    BSTR _result;
    HRESULT _hr = get_HTMLFileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1421)
inline void IExportOptions::PutHTMLFileName ( _bstr_t ppHTMLFileName ) {
    HRESULT _hr = put_HTMLFileName(ppHTMLFileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1422)
inline void IExportOptions::PutExchangePassword ( _bstr_t _arg1 ) {
    HRESULT _hr = put_ExchangePassword(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1423)
inline enum CRExchangeDestinationType IExportOptions::GetExchangeDestinationType ( ) {
    enum CRExchangeDestinationType _result;
    HRESULT _hr = get_ExchangeDestinationType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1424)
inline void IExportOptions::PutExchangeDestinationType ( enum CRExchangeDestinationType pExchangeDestinationType ) {
    HRESULT _hr = put_ExchangeDestinationType(pExchangeDestinationType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1425)
inline _bstr_t IExportOptions::GetExchangeFolderPath ( ) {
    BSTR _result;
    HRESULT _hr = get_ExchangeFolderPath(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1426)
inline void IExportOptions::PutExchangeFolderPath ( _bstr_t ppExchangeFolderPath ) {
    HRESULT _hr = put_ExchangeFolderPath(ppExchangeFolderPath);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1427)
inline _bstr_t IExportOptions::GetMailCcList ( ) {
    BSTR _result;
    HRESULT _hr = get_MailCcList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1428)
inline void IExportOptions::PutMailCcList ( _bstr_t ppMailCcList ) {
    HRESULT _hr = put_MailCcList(ppMailCcList);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1429)
inline _bstr_t IExportOptions::GetMailToList ( ) {
    BSTR _result;
    HRESULT _hr = get_MailToList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1430)
inline void IExportOptions::PutMailToList ( _bstr_t ppMailToList ) {
    HRESULT _hr = put_MailToList(ppMailToList);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1431)
inline _bstr_t IExportOptions::GetMailSubject ( ) {
    BSTR _result;
    HRESULT _hr = get_MailSubject(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1432)
inline void IExportOptions::PutMailSubject ( _bstr_t ppMailSubject ) {
    HRESULT _hr = put_MailSubject(ppMailSubject);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1433)
inline _bstr_t IExportOptions::GetMailMessage ( ) {
    BSTR _result;
    HRESULT _hr = get_MailMessage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1434)
inline void IExportOptions::PutMailMessage ( _bstr_t ppMailMessage ) {
    HRESULT _hr = put_MailMessage(ppMailMessage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1435)
inline _bstr_t IExportOptions::GetMailBccList ( ) {
    BSTR _result;
    HRESULT _hr = get_MailBccList(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1436)
inline void IExportOptions::PutMailBccList ( _bstr_t ppMailBccList ) {
    HRESULT _hr = put_MailBccList(ppMailBccList);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1437)
inline _bstr_t IExportOptions::GetFormatDllName ( ) {
    BSTR _result;
    HRESULT _hr = get_FormatDllName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1438)
inline _bstr_t IExportOptions::GetDestinationDllName ( ) {
    BSTR _result;
    HRESULT _hr = get_DestinationDllName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1439)
inline VARIANT_BOOL IExportOptions::GetExchangeTabHasColumnHeadings ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ExchangeTabHasColumnHeadings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1440)
inline void IExportOptions::PutExchangeTabHasColumnHeadings ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_ExchangeTabHasColumnHeadings(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1441)
inline HRESULT IExportOptions::Reset ( ) {
    HRESULT _hr = raw_Reset();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1442)
inline HRESULT IExportOptions::PromptForExportOptions ( ) {
    HRESULT _hr = raw_PromptForExportOptions();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1443)
inline VARIANT_BOOL IExportOptions::GetExcelTabHasColumnHeadings ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ExcelTabHasColumnHeadings(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1444)
inline void IExportOptions::PutExcelTabHasColumnHeadings ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_ExcelTabHasColumnHeadings(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1445)
inline VARIANT_BOOL IExportOptions::GetExcelUseWorksheetFunctions ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ExcelUseWorksheetFunctions(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1446)
inline void IExportOptions::PutExcelUseWorksheetFunctions ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_ExcelUseWorksheetFunctions(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1447)
inline VARIANT_BOOL IExportOptions::GetExcelUseConstantColumnWidth ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ExcelUseConstantColumnWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1448)
inline void IExportOptions::PutExcelUseConstantColumnWidth ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_ExcelUseConstantColumnWidth(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1449)
inline double IExportOptions::GetExcelConstantColumnWidth ( ) {
    double _result;
    HRESULT _hr = get_ExcelConstantColumnWidth(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1450)
inline void IExportOptions::PutExcelConstantColumnWidth ( double pColWidth ) {
    HRESULT _hr = put_ExcelConstantColumnWidth(pColWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1451)
inline enum CRAreaKind IExportOptions::GetExcelAreaType ( ) {
    enum CRAreaKind _result;
    HRESULT _hr = get_ExcelAreaType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1452)
inline void IExportOptions::PutExcelAreaType ( enum CRAreaKind pAreaKind ) {
    HRESULT _hr = put_ExcelAreaType(pAreaKind);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1453)
inline short IExportOptions::GetExcelAreaGroupNumber ( ) {
    short _result;
    HRESULT _hr = get_ExcelAreaGroupNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1454)
inline void IExportOptions::PutExcelAreaGroupNumber ( short pGroupNumber ) {
    HRESULT _hr = put_ExcelAreaGroupNumber(pGroupNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1455)
inline VARIANT_BOOL IExportOptions::GetExcelUseTabularFormat ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ExcelUseTabularFormat(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1456)
inline void IExportOptions::PutExcelUseTabularFormat ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_ExcelUseTabularFormat(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1457)
inline _bstr_t IExportOptions::GetApplicationFileName ( ) {
    BSTR _result;
    HRESULT _hr = get_ApplicationFileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1458)
inline void IExportOptions::PutApplicationFileName ( _bstr_t ppAppFileName ) {
    HRESULT _hr = put_ApplicationFileName(ppAppFileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1459)
inline _bstr_t IExportOptions::GetLotusDominoDatabaseName ( ) {
    BSTR _result;
    HRESULT _hr = get_LotusDominoDatabaseName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1460)
inline void IExportOptions::PutLotusDominoDatabaseName ( _bstr_t ppLotusDominoDatabaseName ) {
    HRESULT _hr = put_LotusDominoDatabaseName(ppLotusDominoDatabaseName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1461)
inline _bstr_t IExportOptions::GetLotusDominoFormName ( ) {
    BSTR _result;
    HRESULT _hr = get_LotusDominoFormName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1462)
inline void IExportOptions::PutLotusDominoFormName ( _bstr_t ppLotusDominoFormName ) {
    HRESULT _hr = put_LotusDominoFormName(ppLotusDominoFormName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1463)
inline _bstr_t IExportOptions::GetLotusDominoComments ( ) {
    BSTR _result;
    HRESULT _hr = get_LotusDominoComments(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1464)
inline void IExportOptions::PutLotusDominoComments ( _bstr_t ppLotusDominoComments ) {
    HRESULT _hr = put_LotusDominoComments(ppLotusDominoComments);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1465)
inline VARIANT_BOOL IExportOptions::GetHTMLEnableSeparatedPages ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HTMLEnableSeparatedPages(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1466)
inline void IExportOptions::PutHTMLEnableSeparatedPages ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_HTMLEnableSeparatedPages(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1467)
inline VARIANT_BOOL IExportOptions::GetHTMLHasPageNavigator ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HTMLHasPageNavigator(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1468)
inline void IExportOptions::PutHTMLHasPageNavigator ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_HTMLHasPageNavigator(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1469)
inline VARIANT_BOOL IExportOptions::GetPDFExportAllPages ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_PDFExportAllPages(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1470)
inline void IExportOptions::PutPDFExportAllPages ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_PDFExportAllPages(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1471)
inline long IExportOptions::GetPDFFirstPageNumber ( ) {
    long _result;
    HRESULT _hr = get_PDFFirstPageNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1472)
inline void IExportOptions::PutPDFFirstPageNumber ( long pFirstPageNumber ) {
    HRESULT _hr = put_PDFFirstPageNumber(pFirstPageNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1473)
inline long IExportOptions::GetPDFLastPageNumber ( ) {
    long _result;
    HRESULT _hr = get_PDFLastPageNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1474)
inline void IExportOptions::PutPDFLastPageNumber ( long pLastPageNumber ) {
    HRESULT _hr = put_PDFLastPageNumber(pLastPageNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1475)
inline VARIANT_BOOL IExportOptions::GetRTFExportAllPages ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_RTFExportAllPages(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1476)
inline void IExportOptions::PutRTFExportAllPages ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_RTFExportAllPages(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1477)
inline long IExportOptions::GetRTFFirstPageNumber ( ) {
    long _result;
    HRESULT _hr = get_RTFFirstPageNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1478)
inline void IExportOptions::PutRTFFirstPageNumber ( long pFirstPageNumber ) {
    HRESULT _hr = put_RTFFirstPageNumber(pFirstPageNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1479)
inline long IExportOptions::GetRTFLastPageNumber ( ) {
    long _result;
    HRESULT _hr = get_RTFLastPageNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1480)
inline void IExportOptions::PutRTFLastPageNumber ( long pLastPageNumber ) {
    HRESULT _hr = put_RTFLastPageNumber(pLastPageNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1481)
inline _bstr_t IExportOptions::GetXMLFileName ( ) {
    BSTR _result;
    HRESULT _hr = get_XMLFileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1482)
inline void IExportOptions::PutXMLFileName ( _bstr_t ppXMLFileName ) {
    HRESULT _hr = put_XMLFileName(ppXMLFileName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1483)
inline VARIANT_BOOL IExportOptions::GetXMLAllowMultipleFiles ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_XMLAllowMultipleFiles(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1484)
inline void IExportOptions::PutXMLAllowMultipleFiles ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_XMLAllowMultipleFiles(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1485)
inline VARIANT_BOOL IExportOptions::GetWORDWExportAllPages ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_WORDWExportAllPages(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1486)
inline void IExportOptions::PutWORDWExportAllPages ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_WORDWExportAllPages(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1487)
inline long IExportOptions::GetWORDWFirstPageNumber ( ) {
    long _result;
    HRESULT _hr = get_WORDWFirstPageNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1488)
inline void IExportOptions::PutWORDWFirstPageNumber ( long pFirstPageNumber ) {
    HRESULT _hr = put_WORDWFirstPageNumber(pFirstPageNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1489)
inline long IExportOptions::GetWORDWLastPageNumber ( ) {
    long _result;
    HRESULT _hr = get_WORDWLastPageNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1490)
inline void IExportOptions::PutWORDWLastPageNumber ( long pLastPageNumber ) {
    HRESULT _hr = put_WORDWLastPageNumber(pLastPageNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1491)
inline VARIANT_BOOL IExportOptions::GetUseDefaultCharactersPerInch ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_UseDefaultCharactersPerInch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1492)
inline void IExportOptions::PutUseDefaultCharactersPerInch ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_UseDefaultCharactersPerInch(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1493)
inline long IExportOptions::GetUserDefinedCharactersPerInch ( ) {
    long _result;
    HRESULT _hr = get_UserDefinedCharactersPerInch(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1494)
inline void IExportOptions::PutUserDefinedCharactersPerInch ( long pUserDefinedCPI ) {
    HRESULT _hr = put_UserDefinedCharactersPerInch(pUserDefinedCPI);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1495)
inline void IExportOptions::PutExcelPageBreaks ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_ExcelPageBreaks(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1496)
inline VARIANT_BOOL IExportOptions::GetExcelPageBreaks ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ExcelPageBreaks(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1497)
inline void IExportOptions::PutExcelConvertDateToString ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_ExcelConvertDateToString(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1498)
inline VARIANT_BOOL IExportOptions::GetExcelConvertDateToString ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ExcelConvertDateToString(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1499)
inline VARIANT_BOOL IExportOptions::GetExcelExportAllPages ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ExcelExportAllPages(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1500)
inline void IExportOptions::PutExcelExportAllPages ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_ExcelExportAllPages(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1501)
inline long IExportOptions::GetExcelFirstPageNumber ( ) {
    long _result;
    HRESULT _hr = get_ExcelFirstPageNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1502)
inline void IExportOptions::PutExcelFirstPageNumber ( long pFirstPageNumber ) {
    HRESULT _hr = put_ExcelFirstPageNumber(pFirstPageNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1503)
inline long IExportOptions::GetExcelLastPageNumber ( ) {
    long _result;
    HRESULT _hr = get_ExcelLastPageNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1504)
inline void IExportOptions::PutExcelLastPageNumber ( long pLastPageNumber ) {
    HRESULT _hr = put_ExcelLastPageNumber(pLastPageNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1505)
inline _bstr_t IExportOptions::GetMailUserName ( ) {
    BSTR _result;
    HRESULT _hr = get_MailUserName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1506)
inline void IExportOptions::PutMailUserName ( _bstr_t ppUserName ) {
    HRESULT _hr = put_MailUserName(ppUserName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1507)
inline _bstr_t IExportOptions::GetMailPassword ( ) {
    BSTR _result;
    HRESULT _hr = get_MailPassword(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1508)
inline void IExportOptions::PutMailPassword ( _bstr_t ppPassword ) {
    HRESULT _hr = put_MailPassword(ppPassword);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1509)
inline enum CRExcelExportPageAreaPair IExportOptions::GetExcelExportPageAreaPair ( ) {
    enum CRExcelExportPageAreaPair _result;
    HRESULT _hr = get_ExcelExportPageAreaPair(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1510)
inline void IExportOptions::PutExcelExportPageAreaPair ( enum CRExcelExportPageAreaPair exportPageAreaPair ) {
    HRESULT _hr = put_ExcelExportPageAreaPair(exportPageAreaPair);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1511)
inline VARIANT_BOOL IExportOptions::GetExcelMaintainRelativeObjectPosition ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ExcelMaintainRelativeObjectPosition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1512)
inline void IExportOptions::PutExcelMaintainRelativeObjectPosition ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_ExcelMaintainRelativeObjectPosition(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1513)
inline VARIANT_BOOL IExportOptions::GetExcelShowGridlines ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ExcelShowGridlines(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1514)
inline void IExportOptions::PutExcelShowGridlines ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_ExcelShowGridlines(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1515)
inline VARIANT_BOOL IExportOptions::GetExcelChopPageHeader ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ExcelChopPageHeader(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1516)
inline void IExportOptions::PutExcelChopPageHeader ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_ExcelChopPageHeader(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1517)
inline VARIANT_BOOL IExportOptions::GetExcelExportImagesInDataOnly ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ExcelExportImagesInDataOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1518)
inline void IExportOptions::PutExcelExportImagesInDataOnly ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_ExcelExportImagesInDataOnly(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1519)
inline VARIANT_BOOL IExportOptions::GetExcelUseFormatInDataOnly ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ExcelUseFormatInDataOnly(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1520)
inline void IExportOptions::PutExcelUseFormatInDataOnly ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_ExcelUseFormatInDataOnly(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1521)
inline VARIANT_BOOL IExportOptions::GetExcelMaintainColumnAlignment ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_ExcelMaintainColumnAlignment(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1522)
inline void IExportOptions::PutExcelMaintainColumnAlignment ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_ExcelMaintainColumnAlignment(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IApplication wrapper method implementations
//

#pragma implementation_key(1523)
inline IReportPtr IApplication::OpenReport ( _bstr_t pFileName, const _variant_t & OpenMethod ) {
    struct IReport * _result;
    HRESULT _hr = raw_OpenReport(pFileName, OpenMethod, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IReportPtr(_result, false);
}

#pragma implementation_key(1524)
inline VARIANT_BOOL IApplication::CanClose ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_CanClose(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1525)
inline HRESULT IApplication::LogOnServer ( _bstr_t pDllName, _bstr_t pServerName, const _variant_t & pDatabaseName, const _variant_t & pUserID, const _variant_t & pPassword ) {
    HRESULT _hr = raw_LogOnServer(pDllName, pServerName, pDatabaseName, pUserID, pPassword);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1526)
inline HRESULT IApplication::LogOffServer ( _bstr_t pDllName, _bstr_t pServerName, const _variant_t & pDatabaseName, const _variant_t & pUserID, const _variant_t & pPassword ) {
    HRESULT _hr = raw_LogOffServer(pDllName, pServerName, pDatabaseName, pUserID, pPassword);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1527)
inline HRESULT IApplication::SetMorePrintEngineErrorMessages ( VARIANT_BOOL bl ) {
    HRESULT _hr = raw_SetMorePrintEngineErrorMessages(bl);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1528)
inline HRESULT IApplication::SetMatchLogOnInfo ( VARIANT_BOOL bl ) {
    HRESULT _hr = raw_SetMatchLogOnInfo(bl);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1529)
inline IReportPtr IApplication::NewReport ( ) {
    struct IReport * _result;
    HRESULT _hr = raw_NewReport(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IReportPtr(_result, false);
}

#pragma implementation_key(1530)
inline short IApplication::GetVersion ( ) {
    short _result;
    HRESULT _hr = raw_GetVersion(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1531)
inline HRESULT IApplication::LogOnServerEx ( _bstr_t pDllName, _bstr_t pServerName, const _variant_t & pDatabaseName, const _variant_t & pUserID, const _variant_t & pPassword, const _variant_t & pServerType, const _variant_t & pConnectionString ) {
    HRESULT _hr = raw_LogOnServerEx(pDllName, pServerName, pDatabaseName, pUserID, pPassword, pServerType, pConnectionString);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1532)
inline HRESULT IApplication::LogOnServerWithPrivateInfo ( _bstr_t pDllName, const _variant_t & privateInfo ) {
    HRESULT _hr = raw_LogOnServerWithPrivateInfo(pDllName, privateInfo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1533)
inline VARIANT_BOOL IApplication::GetLicenseStatus ( VARIANT * pMaxLicenseNumber, VARIANT * pLicenseUsed ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_GetLicenseStatus(pMaxLicenseNumber, pLicenseUsed, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1534)
inline HRESULT IApplication::SetLicenseKeycode ( _bstr_t pKeycode ) {
    HRESULT _hr = raw_SetLicenseKeycode(pKeycode);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1535)
inline HRESULT IApplication::RunReportWizard ( struct IReport * pReport, const _variant_t & dataSource ) {
    HRESULT _hr = raw_RunReportWizard(pReport, dataSource);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ISortFields wrapper method implementations
//

#pragma implementation_key(1536)
inline IUnknownPtr ISortFields::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1537)
inline ISortFieldPtr ISortFields::GetItem ( long index ) {
    struct ISortField * _result;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISortFieldPtr(_result, false);
}

#pragma implementation_key(1538)
inline long ISortFields::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1539)
inline IReportPtr ISortFields::GetParent ( ) {
    struct IReport * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IReportPtr(_result, false);
}

#pragma implementation_key(1540)
inline HRESULT ISortFields::Add ( struct IFieldDefinition * pFieldDefinition, enum CRSortDirection SortDirection ) {
    HRESULT _hr = raw_Add(pFieldDefinition, SortDirection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1541)
inline HRESULT ISortFields::Delete ( long index ) {
    HRESULT _hr = raw_Delete(index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ISortField wrapper method implementations
//

#pragma implementation_key(1542)
inline IReportPtr ISortField::GetParent ( ) {
    struct IReport * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IReportPtr(_result, false);
}

#pragma implementation_key(1543)
inline enum CRSortDirection ISortField::GetSortDirection ( ) {
    enum CRSortDirection _result;
    HRESULT _hr = get_SortDirection(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1544)
inline void ISortField::PutSortDirection ( enum CRSortDirection pSortDirection ) {
    HRESULT _hr = put_SortDirection(pSortDirection);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1545)
inline IDispatchPtr ISortField::GetField ( ) {
    IDispatch * _result;
    HRESULT _hr = get_Field(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1546)
inline void ISortField::PutField ( IDispatch * ppField ) {
    HRESULT _hr = put_Field(ppField);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IPrintingStatus wrapper method implementations
//

#pragma implementation_key(1547)
inline IReportPtr IPrintingStatus::GetParent ( ) {
    struct IReport * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IReportPtr(_result, false);
}

#pragma implementation_key(1548)
inline long IPrintingStatus::GetNumberOfRecordRead ( ) {
    long _result;
    HRESULT _hr = get_NumberOfRecordRead(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1549)
inline long IPrintingStatus::GetNumberOfRecordSelected ( ) {
    long _result;
    HRESULT _hr = get_NumberOfRecordSelected(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1550)
inline long IPrintingStatus::GetNumberOfRecordPrinted ( ) {
    long _result;
    HRESULT _hr = get_NumberOfRecordPrinted(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1551)
inline enum CRPrintingProgress IPrintingStatus::GetProgress ( ) {
    enum CRPrintingProgress _result;
    HRESULT _hr = get_Progress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1552)
inline long IPrintingStatus::GetNumberOfPages ( ) {
    long _result;
    HRESULT _hr = get_NumberOfPages(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IRunningTotalFieldDefinitions wrapper method implementations
//

#pragma implementation_key(1553)
inline IUnknownPtr IRunningTotalFieldDefinitions::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1554)
inline IRunningTotalFieldDefinitionPtr IRunningTotalFieldDefinitions::GetItem ( long index ) {
    struct IRunningTotalFieldDefinition * _result;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRunningTotalFieldDefinitionPtr(_result, false);
}

#pragma implementation_key(1555)
inline long IRunningTotalFieldDefinitions::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1556)
inline IReportPtr IRunningTotalFieldDefinitions::GetParent ( ) {
    struct IReport * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IReportPtr(_result, false);
}

#pragma implementation_key(1557)
inline IRunningTotalFieldDefinitionPtr IRunningTotalFieldDefinitions::Add ( _bstr_t runningTotalName ) {
    struct IRunningTotalFieldDefinition * _result;
    HRESULT _hr = raw_Add(runningTotalName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRunningTotalFieldDefinitionPtr(_result, false);
}

#pragma implementation_key(1558)
inline HRESULT IRunningTotalFieldDefinitions::Delete ( const _variant_t & index ) {
    HRESULT _hr = raw_Delete(index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1559)
inline IRunningTotalFieldDefinitionPtr IRunningTotalFieldDefinitions::GetItemByName ( _bstr_t Name ) {
    struct IRunningTotalFieldDefinition * _result;
    HRESULT _hr = raw_GetItemByName(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IRunningTotalFieldDefinitionPtr(_result, false);
}

//
// interface IRunningTotalFieldDefinition wrapper method implementations
//

#pragma implementation_key(1560)
inline enum CRFieldKind IRunningTotalFieldDefinition::GetKind ( ) {
    enum CRFieldKind _result;
    HRESULT _hr = get_Kind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1561)
inline CRFieldValueType IRunningTotalFieldDefinition::GetValueType ( ) {
    CRFieldValueType _result;
    HRESULT _hr = get_ValueType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1562)
inline short IRunningTotalFieldDefinition::GetNumberOfBytes ( ) {
    short _result;
    HRESULT _hr = get_NumberOfBytes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1563)
inline _bstr_t IRunningTotalFieldDefinition::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1564)
inline _variant_t IRunningTotalFieldDefinition::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1565)
inline IReportPtr IRunningTotalFieldDefinition::GetParent ( ) {
    struct IReport * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IReportPtr(_result, false);
}

#pragma implementation_key(1566)
inline _variant_t IRunningTotalFieldDefinition::GetPreviousValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PreviousValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1567)
inline _variant_t IRunningTotalFieldDefinition::GetNextValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_NextValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1568)
inline _bstr_t IRunningTotalFieldDefinition::GetRunningTotalFieldName ( ) {
    BSTR _result;
    HRESULT _hr = get_RunningTotalFieldName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1569)
inline IDispatchPtr IRunningTotalFieldDefinition::GetSummarizedField ( ) {
    IDispatch * _result;
    HRESULT _hr = get_SummarizedField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1570)
inline HRESULT IRunningTotalFieldDefinition::SetSummarizedField ( const _variant_t & SummarizedField ) {
    HRESULT _hr = raw_SetSummarizedField(SummarizedField);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1571)
inline IDispatchPtr IRunningTotalFieldDefinition::GetSecondarySummarizedField ( ) {
    IDispatch * _result;
    HRESULT _hr = get_SecondarySummarizedField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1572)
inline HRESULT IRunningTotalFieldDefinition::SetSecondarySummarizedField ( const _variant_t & secondarySummariedField ) {
    HRESULT _hr = raw_SetSecondarySummarizedField(secondarySummariedField);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1573)
inline long IRunningTotalFieldDefinition::GetSummaryOperationParameter ( ) {
    long _result;
    HRESULT _hr = get_SummaryOperationParameter(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1574)
inline void IRunningTotalFieldDefinition::PutSummaryOperationParameter ( long pOperationParameter ) {
    HRESULT _hr = put_SummaryOperationParameter(pOperationParameter);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1575)
inline enum CRSummaryType IRunningTotalFieldDefinition::GetSummaryType ( ) {
    enum CRSummaryType _result;
    HRESULT _hr = get_SummaryType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1576)
inline void IRunningTotalFieldDefinition::PutSummaryType ( enum CRSummaryType pSummaryType ) {
    HRESULT _hr = put_SummaryType(pSummaryType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1577)
inline enum CRRunningTotalCondition IRunningTotalFieldDefinition::GetEvaluateCondition ( ) {
    enum CRRunningTotalCondition _result;
    HRESULT _hr = get_EvaluateCondition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1578)
inline HRESULT IRunningTotalFieldDefinition::SetNoEvaluateCondition ( ) {
    HRESULT _hr = raw_SetNoEvaluateCondition();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1579)
inline enum CRRunningTotalCondition IRunningTotalFieldDefinition::GetResetCondition ( ) {
    enum CRRunningTotalCondition _result;
    HRESULT _hr = get_ResetCondition(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1580)
inline HRESULT IRunningTotalFieldDefinition::SetNoResetCondition ( ) {
    HRESULT _hr = raw_SetNoResetCondition();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1581)
inline short IRunningTotalFieldDefinition::GetEvaluateGroupNumber ( ) {
    short _result;
    HRESULT _hr = get_EvaluateGroupNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1582)
inline void IRunningTotalFieldDefinition::PutEvaluateGroupNumber ( short pEvaluateGroupNumber ) {
    HRESULT _hr = put_EvaluateGroupNumber(pEvaluateGroupNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1583)
inline short IRunningTotalFieldDefinition::GetResetGroupNumber ( ) {
    short _result;
    HRESULT _hr = get_ResetGroupNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1584)
inline void IRunningTotalFieldDefinition::PutResetGroupNumber ( short pResetGroupNumber ) {
    HRESULT _hr = put_ResetGroupNumber(pResetGroupNumber);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1585)
inline IDispatchPtr IRunningTotalFieldDefinition::GetEvaluateConditionField ( ) {
    IDispatch * _result;
    HRESULT _hr = get_EvaluateConditionField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1586)
inline HRESULT IRunningTotalFieldDefinition::SetEvaluateConditionField ( const _variant_t & pEvaluateConditionField ) {
    HRESULT _hr = raw_SetEvaluateConditionField(pEvaluateConditionField);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1587)
inline IDispatchPtr IRunningTotalFieldDefinition::GetResetConditionField ( ) {
    IDispatch * _result;
    HRESULT _hr = get_ResetConditionField(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

#pragma implementation_key(1588)
inline HRESULT IRunningTotalFieldDefinition::SetResetConditionField ( const _variant_t & pResetConditionField ) {
    HRESULT _hr = raw_SetResetConditionField(pResetConditionField);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1589)
inline _bstr_t IRunningTotalFieldDefinition::GetEvaluateConditionFormula ( ) {
    BSTR _result;
    HRESULT _hr = get_EvaluateConditionFormula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1590)
inline void IRunningTotalFieldDefinition::PutEvaluateConditionFormula ( _bstr_t ppText ) {
    HRESULT _hr = put_EvaluateConditionFormula(ppText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1591)
inline _bstr_t IRunningTotalFieldDefinition::GetResetConditionFormula ( ) {
    BSTR _result;
    HRESULT _hr = get_ResetConditionFormula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1592)
inline void IRunningTotalFieldDefinition::PutResetConditionFormula ( _bstr_t ppText ) {
    HRESULT _hr = put_ResetConditionFormula(ppText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1593)
inline enum CRHierarchicalSummaryType IRunningTotalFieldDefinition::GetHierarchicalSummaryType ( ) {
    enum CRHierarchicalSummaryType _result;
    HRESULT _hr = get_HierarchicalSummaryType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1594)
inline void IRunningTotalFieldDefinition::PutHierarchicalSummaryType ( enum CRHierarchicalSummaryType pHierarchicalType ) {
    HRESULT _hr = put_HierarchicalSummaryType(pHierarchicalType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface ISQLExpressionFieldDefinitions wrapper method implementations
//

#pragma implementation_key(1595)
inline IUnknownPtr ISQLExpressionFieldDefinitions::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1596)
inline ISQLExpressionFieldDefinitionPtr ISQLExpressionFieldDefinitions::GetItem ( long index ) {
    struct ISQLExpressionFieldDefinition * _result;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISQLExpressionFieldDefinitionPtr(_result, false);
}

#pragma implementation_key(1597)
inline long ISQLExpressionFieldDefinitions::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1598)
inline IReportPtr ISQLExpressionFieldDefinitions::GetParent ( ) {
    struct IReport * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IReportPtr(_result, false);
}

#pragma implementation_key(1599)
inline ISQLExpressionFieldDefinitionPtr ISQLExpressionFieldDefinitions::Add ( _bstr_t SQLExpressionName, _bstr_t Text ) {
    struct ISQLExpressionFieldDefinition * _result;
    HRESULT _hr = raw_Add(SQLExpressionName, Text, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISQLExpressionFieldDefinitionPtr(_result, false);
}

#pragma implementation_key(1600)
inline HRESULT ISQLExpressionFieldDefinitions::Delete ( const _variant_t & index ) {
    HRESULT _hr = raw_Delete(index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1601)
inline ISQLExpressionFieldDefinitionPtr ISQLExpressionFieldDefinitions::GetItemByName ( _bstr_t Name ) {
    struct ISQLExpressionFieldDefinition * _result;
    HRESULT _hr = raw_GetItemByName(Name, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISQLExpressionFieldDefinitionPtr(_result, false);
}

//
// interface ISQLExpressionFieldDefinition wrapper method implementations
//

#pragma implementation_key(1602)
inline enum CRFieldKind ISQLExpressionFieldDefinition::GetKind ( ) {
    enum CRFieldKind _result;
    HRESULT _hr = get_Kind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1603)
inline CRFieldValueType ISQLExpressionFieldDefinition::GetValueType ( ) {
    CRFieldValueType _result;
    HRESULT _hr = get_ValueType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1604)
inline short ISQLExpressionFieldDefinition::GetNumberOfBytes ( ) {
    short _result;
    HRESULT _hr = get_NumberOfBytes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1605)
inline _bstr_t ISQLExpressionFieldDefinition::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1606)
inline _variant_t ISQLExpressionFieldDefinition::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1607)
inline IReportPtr ISQLExpressionFieldDefinition::GetParent ( ) {
    struct IReport * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IReportPtr(_result, false);
}

#pragma implementation_key(1608)
inline _variant_t ISQLExpressionFieldDefinition::GetPreviousValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PreviousValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1609)
inline _variant_t ISQLExpressionFieldDefinition::GetNextValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_NextValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1610)
inline _bstr_t ISQLExpressionFieldDefinition::GetSQLExpressionFieldName ( ) {
    BSTR _result;
    HRESULT _hr = get_SQLExpressionFieldName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1611)
inline _bstr_t ISQLExpressionFieldDefinition::GetText ( ) {
    BSTR _result;
    HRESULT _hr = get_Text(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1612)
inline void ISQLExpressionFieldDefinition::PutText ( _bstr_t ppText ) {
    HRESULT _hr = put_Text(ppText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1613)
inline HRESULT ISQLExpressionFieldDefinition::Check ( VARIANT_BOOL * pBool, BSTR * ppErrorString ) {
    HRESULT _hr = raw_Check(pBool, ppErrorString);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IReportAlerts wrapper method implementations
//

#pragma implementation_key(1614)
inline IUnknownPtr IReportAlerts::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1615)
inline IReportAlertPtr IReportAlerts::GetItem ( const _variant_t & index ) {
    struct IReportAlert * _result;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IReportAlertPtr(_result, false);
}

#pragma implementation_key(1616)
inline long IReportAlerts::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1617)
inline IReportPtr IReportAlerts::GetParent ( ) {
    struct IReport * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IReportPtr(_result, false);
}

#pragma implementation_key(1618)
inline IReportAlertPtr IReportAlerts::Add ( _bstr_t Name, _bstr_t DefaultMessage, VARIANT_BOOL IsEnabled, _bstr_t ConditionFormula, _bstr_t MessageFormula ) {
    struct IReportAlert * _result;
    HRESULT _hr = raw_Add(Name, DefaultMessage, IsEnabled, ConditionFormula, MessageFormula, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IReportAlertPtr(_result, false);
}

#pragma implementation_key(1619)
inline HRESULT IReportAlerts::Delete ( const _variant_t & index ) {
    HRESULT _hr = raw_Delete(index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IReportAlert wrapper method implementations
//

#pragma implementation_key(1620)
inline IReportPtr IReportAlert::GetParent ( ) {
    struct IReport * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IReportPtr(_result, false);
}

#pragma implementation_key(1621)
inline _bstr_t IReportAlert::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1622)
inline void IReportAlert::PutName ( _bstr_t ppName ) {
    HRESULT _hr = put_Name(ppName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1623)
inline _bstr_t IReportAlert::GetDefaultMessage ( ) {
    BSTR _result;
    HRESULT _hr = get_DefaultMessage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1624)
inline void IReportAlert::PutDefaultMessage ( _bstr_t ppMessage ) {
    HRESULT _hr = put_DefaultMessage(ppMessage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1625)
inline VARIANT_BOOL IReportAlert::GetIsEnabled ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IsEnabled(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1626)
inline void IReportAlert::PutIsEnabled ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_IsEnabled(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1627)
inline _bstr_t IReportAlert::GetConditionFormula ( ) {
    BSTR _result;
    HRESULT _hr = get_ConditionFormula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1628)
inline void IReportAlert::PutConditionFormula ( _bstr_t ppText ) {
    HRESULT _hr = put_ConditionFormula(ppText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1629)
inline _bstr_t IReportAlert::GetMessageFormula ( ) {
    BSTR _result;
    HRESULT _hr = get_MessageFormula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1630)
inline void IReportAlert::PutMessageFormula ( _bstr_t ppText ) {
    HRESULT _hr = put_MessageFormula(ppText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1631)
inline IReportAlertInstancesPtr IReportAlert::GetAlertInstances ( ) {
    struct IReportAlertInstances * _result;
    HRESULT _hr = get_AlertInstances(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IReportAlertInstancesPtr(_result, false);
}

//
// interface IReportAlertInstances wrapper method implementations
//

#pragma implementation_key(1632)
inline IUnknownPtr IReportAlertInstances::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1633)
inline IReportAlertInstancePtr IReportAlertInstances::GetItem ( long index ) {
    struct IReportAlertInstance * _result;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IReportAlertInstancePtr(_result, false);
}

#pragma implementation_key(1634)
inline long IReportAlertInstances::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1635)
inline IReportAlertPtr IReportAlertInstances::GetParent ( ) {
    struct IReportAlert * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IReportAlertPtr(_result, false);
}

//
// interface IReportAlertInstance wrapper method implementations
//

#pragma implementation_key(1636)
inline IReportAlertPtr IReportAlertInstance::GetParent ( ) {
    struct IReportAlert * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IReportAlertPtr(_result, false);
}

#pragma implementation_key(1637)
inline _bstr_t IReportAlertInstance::GetAlertMessage ( ) {
    BSTR _result;
    HRESULT _hr = get_AlertMessage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface ICrystalReportSource wrapper method implementations
//

#pragma implementation_key(1638)
inline HRESULT ICrystalReportSource::GetPage ( long lCookie, _bstr_t bstrBranch, _bstr_t bstrFormula, long lPageNumber, short DrillDownLevel ) {
    HRESULT _hr = raw_GetPage(lCookie, bstrBranch, bstrFormula, lPageNumber, DrillDownLevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1639)
inline HRESULT ICrystalReportSource::GetTotaller ( long lCookie, _bstr_t bstrBranch, _bstr_t bstrFormula, _bstr_t bstrRootGroup, long lStartFrom, short nLevelsPastRoot, const _variant_t & vtMaxNodeCount ) {
    HRESULT _hr = raw_GetTotaller(lCookie, bstrBranch, bstrFormula, bstrRootGroup, lStartFrom, nLevelsPastRoot, vtMaxNodeCount);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1640)
inline HRESULT ICrystalReportSource::GetLastPageNumber ( long lCookie, _bstr_t bstrBranch, _bstr_t bstrFormula, short DrillDownLevel ) {
    HRESULT _hr = raw_GetLastPageNumber(lCookie, bstrBranch, bstrFormula, DrillDownLevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1641)
inline HRESULT ICrystalReportSource::FindGroup ( long lCookie, _bstr_t bstrBranch, _bstr_t bstrFormula, _bstr_t bstrGroupPath, short DrillDownLevel ) {
    HRESULT _hr = raw_FindGroup(lCookie, bstrBranch, bstrFormula, bstrGroupPath, DrillDownLevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1642)
inline HRESULT ICrystalReportSource::FindText ( long lCookie, _bstr_t bstrBranch, _bstr_t bstrFormula, long lFromPage, long lFromInstance, _bstr_t bstrText, enum CRSearchDirection nMode, short DrillDownLevel ) {
    HRESULT _hr = raw_FindText(lCookie, bstrBranch, bstrFormula, lFromPage, lFromInstance, bstrText, nMode, DrillDownLevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1643)
inline HRESULT ICrystalReportSource::DrillGraph ( long lCookie, _bstr_t bstrBranch, _bstr_t bstrFormula, long lPageNumber, long xOffset, long yOffset, short DrillDownLevel ) {
    HRESULT _hr = raw_DrillGraph(lCookie, bstrBranch, bstrFormula, lPageNumber, xOffset, yOffset, DrillDownLevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1644)
inline HRESULT ICrystalReportSource::Refresh ( long lCookie ) {
    HRESULT _hr = raw_Refresh(lCookie);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1645)
inline HRESULT ICrystalReportSource::Cancel ( long lCookie ) {
    HRESULT _hr = raw_Cancel(lCookie);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ICrystalReportProperties wrapper method implementations
//

#pragma implementation_key(1646)
inline _bstr_t ICrystalReportProperties::GetTitle ( ) {
    BSTR _result;
    HRESULT _hr = raw_GetTitle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface ICrystalReportSourceProperties wrapper method implementations
//

#pragma implementation_key(1647)
inline enum CRImageType ICrystalReportSourceProperties::GetImageType ( ) {
    enum CRImageType _result;
    HRESULT _hr = raw_GetImageType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1648)
inline VARIANT_BOOL ICrystalReportSourceProperties::SupportsSelectionFormula ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_SupportsSelectionFormula(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ICrystalReportSourceProperties2 wrapper method implementations
//

#pragma implementation_key(1649)
inline VARIANT_BOOL ICrystalReportSourceProperties2::SupportsExport ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_SupportsExport(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1650)
inline VARIANT_BOOL ICrystalReportSourceProperties2::SupportsSearchExpert ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_SupportsSearchExpert(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ICrystalReportSourceProperties3 wrapper method implementations
//

#pragma implementation_key(1651)
inline HRESULT ICrystalReportSourceProperties3::SetContainer ( IUnknown * newVal ) {
    HRESULT _hr = raw_SetContainer(newVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ICrystalReportSourceProperties4 wrapper method implementations
//

#pragma implementation_key(1652)
inline VARIANT_BOOL ICrystalReportSourceProperties4::SupportsExportInDrilldownViews ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_SupportsExportInDrilldownViews(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1653)
inline HRESULT ICrystalReportSourceProperties4::RequestSmartImageHandling ( VARIANT_BOOL newVal ) {
    HRESULT _hr = raw_RequestSmartImageHandling(newVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1654)
inline VARIANT_BOOL ICrystalReportSourceProperties4::SupportsExportPageRanges ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = raw_SupportsExportPageRanges(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ICrystalReportPrinterPort wrapper method implementations
//

#pragma implementation_key(1655)
inline HRESULT ICrystalReportPrinterPort::Print ( _bstr_t pBstrBranch, short DrillDownLevel ) {
    HRESULT _hr = raw_Print(pBstrBranch, DrillDownLevel);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1656)
inline _bstr_t ICrystalReportPrinterPort::GetPrinterName ( ) {
    BSTR _result;
    HRESULT _hr = raw_GetPrinterName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1657)
inline _bstr_t ICrystalReportPrinterPort::GetDriverName ( ) {
    BSTR _result;
    HRESULT _hr = raw_GetDriverName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1658)
inline _bstr_t ICrystalReportPrinterPort::GetPortName ( ) {
    BSTR _result;
    HRESULT _hr = raw_GetPortName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1659)
inline enum CRPaperOrientation ICrystalReportPrinterPort::GetPaperOrientation ( ) {
    enum CRPaperOrientation _result;
    HRESULT _hr = raw_GetPaperOrientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1660)
inline enum CRPaperSize ICrystalReportPrinterPort::GetPaperSize ( ) {
    enum CRPaperSize _result;
    HRESULT _hr = raw_GetPaperSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ICrystalReportPrinterPortEx wrapper method implementations
//

#pragma implementation_key(1661)
inline HRESULT ICrystalReportPrinterPortEx::Print ( _bstr_t pBstrBranch, short DrillDownLevel, _bstr_t bstrSubreportContext ) {
    HRESULT _hr = raw_Print(pBstrBranch, DrillDownLevel, bstrSubreportContext);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1662)
inline _bstr_t ICrystalReportPrinterPortEx::GetPrinterName ( ) {
    BSTR _result;
    HRESULT _hr = raw_GetPrinterName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1663)
inline _bstr_t ICrystalReportPrinterPortEx::GetDriverName ( ) {
    BSTR _result;
    HRESULT _hr = raw_GetDriverName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1664)
inline _bstr_t ICrystalReportPrinterPortEx::GetPortName ( ) {
    BSTR _result;
    HRESULT _hr = raw_GetPortName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1665)
inline enum CRPaperOrientation ICrystalReportPrinterPortEx::GetPaperOrientation ( ) {
    enum CRPaperOrientation _result;
    HRESULT _hr = raw_GetPaperOrientation(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1666)
inline enum CRPaperSize ICrystalReportPrinterPortEx::GetPaperSize ( ) {
    enum CRPaperSize _result;
    HRESULT _hr = raw_GetPaperSize(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ICrystalReportSourceEvents wrapper method implementations
//

#pragma implementation_key(1667)
inline HRESULT ICrystalReportSourceEvents::OnStartBinding ( long dwReserved ) {
    HRESULT _hr = raw_OnStartBinding(dwReserved);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1668)
inline HRESULT ICrystalReportSourceEvents::OnStopBinding ( HRESULT hrStatus, _bstr_t bstrStatusText ) {
    HRESULT _hr = raw_OnStopBinding(hrStatus, bstrStatusText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1669)
inline HRESULT ICrystalReportSourceEvents::OnDataAvailable ( const _variant_t & vtDataDescription, const _variant_t & vtData, const _variant_t & vtParam ) {
    HRESULT _hr = raw_OnDataAvailable(vtDataDescription, vtData, vtParam);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1670)
inline HRESULT ICrystalReportSourceEvents::OnProgress ( long ulProgress, long ulProgressMax, long ulStatusCode, _bstr_t szStatusText ) {
    HRESULT _hr = raw_OnProgress(ulProgress, ulProgressMax, ulStatusCode, szStatusText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// dispinterface IReportEvent wrapper method implementations
//

#pragma implementation_key(1671)
inline HRESULT IReportEvent::NoData ( VARIANT_BOOL * pCancel ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400b", pCancel);
}

#pragma implementation_key(1672)
inline HRESULT IReportEvent::BeforeFormatPage ( long PageNumber ) {
    return _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", PageNumber);
}

#pragma implementation_key(1673)
inline HRESULT IReportEvent::AfterFormatPage ( long PageNumber ) {
    return _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", PageNumber);
}

#pragma implementation_key(1674)
inline HRESULT IReportEvent::FieldMapping ( VARIANT * reportFieldArray, const _variant_t & databaseFieldArray, VARIANT_BOOL * useDefault ) {
    return _com_dispatch_method(this, 0x1e4, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x400c\x000c\x400b", reportFieldArray, &databaseFieldArray, useDefault);
}

//
// interface ICrystalReportExport wrapper method implementations
//

#pragma implementation_key(1675)
inline HRESULT ICrystalReportExport::SetReportSource ( IUnknown * pNewVal ) {
    HRESULT _hr = raw_SetReportSource(pNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1676)
inline HRESULT ICrystalReportExport::Export ( unsigned int hWnd, _bstr_t pBstrBranch, _bstr_t bstrSubreportContext, _bstr_t pBstrFormula, const _variant_t & vtPromptingInfo ) {
    HRESULT _hr = raw_Export(hWnd, pBstrBranch, bstrSubreportContext, pBstrFormula, vtPromptingInfo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1677)
inline _bstr_t ICrystalReportExport::GetFileName ( ) {
    BSTR _result;
    HRESULT _hr = raw_GetFileName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1678)
inline HRESULT ICrystalReportExport::SetFileName ( _bstr_t pNewVal ) {
    HRESULT _hr = raw_SetFileName(pNewVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1679)
inline HRESULT ICrystalReportExport::GetExportType ( VARIANT * format, VARIANT * reserved ) {
    HRESULT _hr = raw_GetExportType(format, reserved);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1680)
inline HRESULT ICrystalReportExport::SetExportType ( const _variant_t & format, const _variant_t & reserved ) {
    HRESULT _hr = raw_SetExportType(format, reserved);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ICrystalReportExportEvents wrapper method implementations
//

#pragma implementation_key(1681)
inline HRESULT ICrystalReportExportEvents::ExportCancelled ( ) {
    HRESULT _hr = raw_ExportCancelled();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1682)
inline HRESULT ICrystalReportExportEvents::ExportFailed ( ) {
    HRESULT _hr = raw_ExportFailed();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1683)
inline HRESULT ICrystalReportExportEvents::ExportComplete ( _bstr_t pFileName, _bstr_t pFileType ) {
    HRESULT _hr = raw_ExportComplete(pFileName, pFileType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// dispinterface ISectionEvent wrapper method implementations
//

#pragma implementation_key(1684)
inline HRESULT ISectionEvent::format ( IDispatch * pFormattingInfo ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", pFormattingInfo);
}

//
// interface ISpecialVarFieldDefinition wrapper method implementations
//

#pragma implementation_key(1685)
inline enum CRFieldKind ISpecialVarFieldDefinition::GetKind ( ) {
    enum CRFieldKind _result;
    HRESULT _hr = get_Kind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1686)
inline CRFieldValueType ISpecialVarFieldDefinition::GetValueType ( ) {
    CRFieldValueType _result;
    HRESULT _hr = get_ValueType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1687)
inline short ISpecialVarFieldDefinition::GetNumberOfBytes ( ) {
    short _result;
    HRESULT _hr = get_NumberOfBytes(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1688)
inline _bstr_t ISpecialVarFieldDefinition::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1689)
inline _variant_t ISpecialVarFieldDefinition::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1690)
inline enum CRSpecialVarType ISpecialVarFieldDefinition::GetspecialVarType ( ) {
    enum CRSpecialVarType _result;
    HRESULT _hr = get_specialVarType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1691)
inline IReportPtr ISpecialVarFieldDefinition::GetParent ( ) {
    struct IReport * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IReportPtr(_result, false);
}

#pragma implementation_key(1692)
inline _variant_t ISpecialVarFieldDefinition::GetPreviousValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PreviousValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1693)
inline _variant_t ISpecialVarFieldDefinition::GetNextValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_NextValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface IMapObject wrapper method implementations
//

#pragma implementation_key(1694)
inline _bstr_t IMapObject::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1695)
inline void IMapObject::PutName ( _bstr_t ppName ) {
    HRESULT _hr = put_Name(ppName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1696)
inline enum CRObjectKind IMapObject::GetKind ( ) {
    enum CRObjectKind _result;
    HRESULT _hr = get_Kind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1697)
inline long IMapObject::GetLeft ( ) {
    long _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1698)
inline void IMapObject::PutLeft ( long pLeft ) {
    HRESULT _hr = put_Left(pLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1699)
inline long IMapObject::GetTop ( ) {
    long _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1700)
inline void IMapObject::PutTop ( long pTop ) {
    HRESULT _hr = put_Top(pTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1701)
inline long IMapObject::GetWidth ( ) {
    long _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1702)
inline void IMapObject::PutWidth ( long pWidth ) {
    HRESULT _hr = put_Width(pWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1703)
inline long IMapObject::GetHeight ( ) {
    long _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1704)
inline void IMapObject::PutHeight ( long pHeight ) {
    HRESULT _hr = put_Height(pHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1705)
inline enum CRLineStyle IMapObject::GetLeftLineStyle ( ) {
    enum CRLineStyle _result;
    HRESULT _hr = get_LeftLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1706)
inline void IMapObject::PutLeftLineStyle ( enum CRLineStyle pLeftLineStyle ) {
    HRESULT _hr = put_LeftLineStyle(pLeftLineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1707)
inline enum CRLineStyle IMapObject::GetRightLineStyle ( ) {
    enum CRLineStyle _result;
    HRESULT _hr = get_RightLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1708)
inline void IMapObject::PutRightLineStyle ( enum CRLineStyle pRightLineStyle ) {
    HRESULT _hr = put_RightLineStyle(pRightLineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1709)
inline enum CRLineStyle IMapObject::GetTopLineStyle ( ) {
    enum CRLineStyle _result;
    HRESULT _hr = get_TopLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1710)
inline void IMapObject::PutTopLineStyle ( enum CRLineStyle pTopLineStyle ) {
    HRESULT _hr = put_TopLineStyle(pTopLineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1711)
inline enum CRLineStyle IMapObject::GetBottomLineStyle ( ) {
    enum CRLineStyle _result;
    HRESULT _hr = get_BottomLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1712)
inline void IMapObject::PutBottomLineStyle ( enum CRLineStyle pBottomLineStyle ) {
    HRESULT _hr = put_BottomLineStyle(pBottomLineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1713)
inline VARIANT_BOOL IMapObject::GetHasDropShadow ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HasDropShadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1714)
inline void IMapObject::PutHasDropShadow ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_HasDropShadow(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1715)
inline OLE_COLOR IMapObject::GetBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1716)
inline void IMapObject::PutBackColor ( OLE_COLOR pBackColor ) {
    HRESULT _hr = put_BackColor(pBackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1717)
inline OLE_COLOR IMapObject::GetBorderColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BorderColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1718)
inline void IMapObject::PutBorderColor ( OLE_COLOR pBorderColor ) {
    HRESULT _hr = put_BorderColor(pBorderColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1719)
inline ISectionPtr IMapObject::GetParent ( ) {
    struct ISection * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISectionPtr(_result, false);
}

#pragma implementation_key(1720)
inline VARIANT_BOOL IMapObject::GetSuppress ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Suppress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1721)
inline void IMapObject::PutSuppress ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_Suppress(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1722)
inline VARIANT_BOOL IMapObject::GetCloseAtPageBreak ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_CloseAtPageBreak(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1723)
inline void IMapObject::PutCloseAtPageBreak ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_CloseAtPageBreak(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1724)
inline VARIANT_BOOL IMapObject::GetKeepTogether ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_KeepTogether(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1725)
inline void IMapObject::PutKeepTogether ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_KeepTogether(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1726)
inline _bstr_t IMapObject::GetConditionFormula ( const _variant_t & FormulaType ) {
    BSTR _result;
    HRESULT _hr = get_ConditionFormula(FormulaType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1727)
inline void IMapObject::PutConditionFormula ( const _variant_t & FormulaType, _bstr_t pVal ) {
    HRESULT _hr = put_ConditionFormula(FormulaType, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1728)
inline _bstr_t IMapObject::GetCssClass ( ) {
    BSTR _result;
    HRESULT _hr = get_CssClass(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1729)
inline void IMapObject::PutCssClass ( _bstr_t ppCssClass ) {
    HRESULT _hr = put_CssClass(ppCssClass);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1730)
inline enum CRHyperlinkType IMapObject::GetHyperlinkType ( ) {
    enum CRHyperlinkType _result;
    HRESULT _hr = get_HyperlinkType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1731)
inline void IMapObject::PutHyperlinkType ( enum CRHyperlinkType pType ) {
    HRESULT _hr = put_HyperlinkType(pType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1732)
inline _bstr_t IMapObject::GetHyperlinkText ( ) {
    BSTR _result;
    HRESULT _hr = get_HyperlinkText(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1733)
inline void IMapObject::PutHyperlinkText ( _bstr_t pText ) {
    HRESULT _hr = put_HyperlinkText(pText);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IOlapGridObject wrapper method implementations
//

#pragma implementation_key(1734)
inline _bstr_t IOlapGridObject::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1735)
inline void IOlapGridObject::PutName ( _bstr_t ppName ) {
    HRESULT _hr = put_Name(ppName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1736)
inline enum CRObjectKind IOlapGridObject::GetKind ( ) {
    enum CRObjectKind _result;
    HRESULT _hr = get_Kind(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1737)
inline long IOlapGridObject::GetLeft ( ) {
    long _result;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1738)
inline void IOlapGridObject::PutLeft ( long pLeft ) {
    HRESULT _hr = put_Left(pLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1739)
inline long IOlapGridObject::GetTop ( ) {
    long _result;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1740)
inline void IOlapGridObject::PutTop ( long pTop ) {
    HRESULT _hr = put_Top(pTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1741)
inline long IOlapGridObject::GetWidth ( ) {
    long _result;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1742)
inline long IOlapGridObject::GetHeight ( ) {
    long _result;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1743)
inline enum CRLineStyle IOlapGridObject::GetLeftLineStyle ( ) {
    enum CRLineStyle _result;
    HRESULT _hr = get_LeftLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1744)
inline void IOlapGridObject::PutLeftLineStyle ( enum CRLineStyle pLeftLineStyle ) {
    HRESULT _hr = put_LeftLineStyle(pLeftLineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1745)
inline enum CRLineStyle IOlapGridObject::GetRightLineStyle ( ) {
    enum CRLineStyle _result;
    HRESULT _hr = get_RightLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1746)
inline void IOlapGridObject::PutRightLineStyle ( enum CRLineStyle pRightLineStyle ) {
    HRESULT _hr = put_RightLineStyle(pRightLineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1747)
inline enum CRLineStyle IOlapGridObject::GetTopLineStyle ( ) {
    enum CRLineStyle _result;
    HRESULT _hr = get_TopLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1748)
inline void IOlapGridObject::PutTopLineStyle ( enum CRLineStyle pTopLineStyle ) {
    HRESULT _hr = put_TopLineStyle(pTopLineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1749)
inline enum CRLineStyle IOlapGridObject::GetBottomLineStyle ( ) {
    enum CRLineStyle _result;
    HRESULT _hr = get_BottomLineStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1750)
inline void IOlapGridObject::PutBottomLineStyle ( enum CRLineStyle pBottomLineStyle ) {
    HRESULT _hr = put_BottomLineStyle(pBottomLineStyle);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1751)
inline VARIANT_BOOL IOlapGridObject::GetHasDropShadow ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_HasDropShadow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1752)
inline void IOlapGridObject::PutHasDropShadow ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_HasDropShadow(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1753)
inline OLE_COLOR IOlapGridObject::GetBackColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BackColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1754)
inline void IOlapGridObject::PutBackColor ( OLE_COLOR pBackColor ) {
    HRESULT _hr = put_BackColor(pBackColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1755)
inline OLE_COLOR IOlapGridObject::GetBorderColor ( ) {
    OLE_COLOR _result;
    HRESULT _hr = get_BorderColor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1756)
inline void IOlapGridObject::PutBorderColor ( OLE_COLOR pBorderColor ) {
    HRESULT _hr = put_BorderColor(pBorderColor);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1757)
inline ISectionPtr IOlapGridObject::GetParent ( ) {
    struct ISection * _result;
    HRESULT _hr = get_Parent(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return ISectionPtr(_result, false);
}

#pragma implementation_key(1758)
inline VARIANT_BOOL IOlapGridObject::GetSuppress ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_Suppress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1759)
inline void IOlapGridObject::PutSuppress ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_Suppress(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1760)
inline VARIANT_BOOL IOlapGridObject::GetCloseAtPageBreak ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_CloseAtPageBreak(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1761)
inline void IOlapGridObject::PutCloseAtPageBreak ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_CloseAtPageBreak(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1762)
inline VARIANT_BOOL IOlapGridObject::GetKeepTogether ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_KeepTogether(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1763)
inline void IOlapGridObject::PutKeepTogether ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_KeepTogether(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1764)
inline _bstr_t IOlapGridObject::GetConditionFormula ( const _variant_t & FormulaType ) {
    BSTR _result;
    HRESULT _hr = get_ConditionFormula(FormulaType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1765)
inline void IOlapGridObject::PutConditionFormula ( const _variant_t & FormulaType, _bstr_t pVal ) {
    HRESULT _hr = put_ConditionFormula(FormulaType, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IFormattingInfo wrapper method implementations
//

#pragma implementation_key(1766)
inline VARIANT_BOOL IFormattingInfo::GetIsRepeatedGroupHeader ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IsRepeatedGroupHeader(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1767)
inline VARIANT_BOOL IFormattingInfo::GetIsStartOfGroup ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IsStartOfGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1768)
inline VARIANT_BOOL IFormattingInfo::GetIsEndOfGroup ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_IsEndOfGroup(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IFieldMappingData wrapper method implementations
//

#pragma implementation_key(1769)
inline CRFieldValueType IFieldMappingData::GetValueType ( ) {
    CRFieldValueType _result;
    HRESULT _hr = get_ValueType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1770)
inline void IFieldMappingData::PutValueType ( CRFieldValueType pValueType ) {
    HRESULT _hr = put_ValueType(pValueType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1771)
inline _bstr_t IFieldMappingData::GetTableName ( ) {
    BSTR _result;
    HRESULT _hr = get_TableName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1772)
inline void IFieldMappingData::PutTableName ( _bstr_t pTableName ) {
    HRESULT _hr = put_TableName(pTableName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1773)
inline _bstr_t IFieldMappingData::GetFieldName ( ) {
    BSTR _result;
    HRESULT _hr = get_FieldName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1774)
inline void IFieldMappingData::PutFieldName ( _bstr_t pFieldName ) {
    HRESULT _hr = put_FieldName(pFieldName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1775)
inline short IFieldMappingData::GetMappingToFieldIndex ( ) {
    short _result;
    HRESULT _hr = get_MappingToFieldIndex(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1776)
inline void IFieldMappingData::PutMappingToFieldIndex ( short pMappingTo ) {
    HRESULT _hr = put_MappingToFieldIndex(pMappingTo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IParameterValue wrapper method implementations
//

#pragma implementation_key(1777)
inline _variant_t IParameterValue::GetStartValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_StartValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1778)
inline void IParameterValue::PutStartValue ( const _variant_t & StartValue ) {
    HRESULT _hr = put_StartValue(StartValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1779)
inline _variant_t IParameterValue::GetEndValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_EndValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1780)
inline void IParameterValue::PutEndValue ( const _variant_t & EndValue ) {
    HRESULT _hr = put_EndValue(EndValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1781)
inline VARIANT_BOOL IParameterValue::GetRangeValue ( ) {
    VARIANT_BOOL _result;
    HRESULT _hr = get_RangeValue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1782)
inline void IParameterValue::PutRangeValue ( VARIANT_BOOL pBool ) {
    HRESULT _hr = put_RangeValue(pBool);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1783)
inline enum CRRangeInfo IParameterValue::GetrangeInfo ( ) {
    enum CRRangeInfo _result;
    HRESULT _hr = get_rangeInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1784)
inline void IParameterValue::PutrangeInfo ( enum CRRangeInfo rangeInfo ) {
    HRESULT _hr = put_rangeInfo(rangeInfo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IParameterValues wrapper method implementations
//

#pragma implementation_key(1785)
inline IUnknownPtr IParameterValues::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1786)
inline IParameterValuePtr IParameterValues::GetItem ( long index ) {
    struct IParameterValue * _result;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IParameterValuePtr(_result, false);
}

#pragma implementation_key(1787)
inline long IParameterValues::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1788)
inline HRESULT IParameterValues::Add ( struct IParameterValue * pValue ) {
    HRESULT _hr = raw_Add(pValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1789)
inline HRESULT IParameterValues::Delete ( long index ) {
    HRESULT _hr = raw_Delete(index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IParameterValueInfo wrapper method implementations
//

#pragma implementation_key(1790)
inline IParameterValuesPtr IParameterValueInfo::GetParameterValues ( ) {
    struct IParameterValues * _result;
    HRESULT _hr = get_ParameterValues(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IParameterValuesPtr(_result, false);
}

#pragma implementation_key(1791)
inline void IParameterValueInfo::PutParameterValues ( struct IParameterValues * ppValues ) {
    HRESULT _hr = put_ParameterValues(ppValues);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1792)
inline _bstr_t IParameterValueInfo::GetparameterName ( ) {
    BSTR _result;
    HRESULT _hr = get_parameterName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1793)
inline void IParameterValueInfo::PutparameterName ( _bstr_t pParameterName ) {
    HRESULT _hr = put_parameterName(pParameterName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IParameterValueInfos wrapper method implementations
//

#pragma implementation_key(1794)
inline IUnknownPtr IParameterValueInfos::Get_NewEnum ( ) {
    IUnknown * _result;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

#pragma implementation_key(1795)
inline IParameterValueInfoPtr IParameterValueInfos::GetItem ( long index ) {
    struct IParameterValueInfo * _result;
    HRESULT _hr = get_Item(index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IParameterValueInfoPtr(_result, false);
}

#pragma implementation_key(1796)
inline long IParameterValueInfos::GetCount ( ) {
    long _result;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

#pragma implementation_key(1797)
inline HRESULT IParameterValueInfos::Add ( struct IParameterValueInfo * pValueInfo ) {
    HRESULT _hr = raw_Add(pValueInfo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1798)
inline HRESULT IParameterValueInfos::Delete ( long index ) {
    HRESULT _hr = raw_Delete(index);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IConnectionProperty wrapper method implementations
//

#pragma implementation_key(1799)
inline _bstr_t IConnectionProperty::GetName ( ) {
    BSTR _result;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1800)
inline void IConnectionProperty::PutName ( _bstr_t pName ) {
    HRESULT _hr = put_Name(pName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1801)
inline _bstr_t IConnectionProperty::GetLocalizedName ( ) {
    BSTR _result;
    HRESULT _hr = get_LocalizedName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1802)
inline void IConnectionProperty::PutLocalizedName ( _bstr_t pLocName ) {
    HRESULT _hr = put_LocalizedName(pLocName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1803)
inline _bstr_t IConnectionProperty::GetDescription ( ) {
    BSTR _result;
    HRESULT _hr = get_Description(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

#pragma implementation_key(1804)
inline void IConnectionProperty::PutDescription ( _bstr_t pDescription ) {
    HRESULT _hr = put_Description(pDescription);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1805)
inline _variant_t IConnectionProperty::GetValue ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Value(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

#pragma implementation_key(1806)
inline void IConnectionProperty::PutValue ( const _variant_t & pValue ) {
    HRESULT _hr = put_Value(pValue);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

#pragma implementation_key(1807)
inline INameValuePairsPtr IConnectionProperty::GetChildProperties ( ) {
    struct INameValuePairs * _result;
    HRESULT _hr = get_ChildProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return INameValuePairsPtr(_result, false);
}

//
// interface ICrystalReportSourceEx wrapper method implementations
//

#pragma implementation_key(1808)
inline HRESULT ICrystalReportSourceEx::GetPage ( long lCookie, _bstr_t bstrViewContext, _bstr_t bstrSubreportContext, _bstr_t bstrFormula, const _variant_t & vtPromptingInfo, long lPageNumber, const _variant_t & vtReserved ) {
    HRESULT _hr = raw_GetPage(lCookie, bstrViewContext, bstrSubreportContext, bstrFormula, vtPromptingInfo, lPageNumber, vtReserved);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1809)
inline HRESULT ICrystalReportSourceEx::GetTotaller ( long lCookie, _bstr_t bstrViewContext, _bstr_t bstrSubreportContext, _bstr_t bstrFormula, const _variant_t & vtPromptingInfo, long lStartFrom, short nLevelsPastRoot, const _variant_t & vtMaxNodeCount ) {
    HRESULT _hr = raw_GetTotaller(lCookie, bstrViewContext, bstrSubreportContext, bstrFormula, vtPromptingInfo, lStartFrom, nLevelsPastRoot, vtMaxNodeCount);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1810)
inline HRESULT ICrystalReportSourceEx::GetLastPageNumber ( long lCookie, _bstr_t bstrViewContext, _bstr_t bstrSubreportContext, _bstr_t bstrFormula, const _variant_t & vtPromptingInfo, const _variant_t & vtReserved ) {
    HRESULT _hr = raw_GetLastPageNumber(lCookie, bstrViewContext, bstrSubreportContext, bstrFormula, vtPromptingInfo, vtReserved);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1811)
inline HRESULT ICrystalReportSourceEx::FindGroup ( long lCookie, _bstr_t bstrViewContext, _bstr_t bstrSubreportContext, _bstr_t bstrFormula, const _variant_t & vtPromptingInfo, _bstr_t bstrGroupPath, const _variant_t & vtReserved ) {
    HRESULT _hr = raw_FindGroup(lCookie, bstrViewContext, bstrSubreportContext, bstrFormula, vtPromptingInfo, bstrGroupPath, vtReserved);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1812)
inline HRESULT ICrystalReportSourceEx::FindText ( long lCookie, _bstr_t bstrViewContext, _bstr_t bstrSubreportContext, _bstr_t bstrFormula, const _variant_t & vtPromptingInfo, long lFromPage, long lFromInstance, _bstr_t bstrText, enum CRSearchDirection nMode, const _variant_t & vtReserved ) {
    HRESULT _hr = raw_FindText(lCookie, bstrViewContext, bstrSubreportContext, bstrFormula, vtPromptingInfo, lFromPage, lFromInstance, bstrText, nMode, vtReserved);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1813)
inline HRESULT ICrystalReportSourceEx::DrillGraph ( long lCookie, _bstr_t bstrViewContext, _bstr_t bstrSubreportContext, _bstr_t bstrFormula, const _variant_t & vtPromptingInfo, long lPageNumber, long xOffset, long yOffset, _bstr_t bstrReserved, const _variant_t & vtReserved, const _variant_t & vtReserved2 ) {
    HRESULT _hr = raw_DrillGraph(lCookie, bstrViewContext, bstrSubreportContext, bstrFormula, vtPromptingInfo, lPageNumber, xOffset, yOffset, bstrReserved, vtReserved, vtReserved2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1814)
inline HRESULT ICrystalReportSourceEx::DrillMap ( long lCookie, _bstr_t bstrViewContext, _bstr_t bstrSubreportContext, _bstr_t bstrFormula, const _variant_t & vtPromptingInfo, long lPageNumber, long xOffset, long yOffset, _bstr_t bstrReserved, const _variant_t & vtReserved, const _variant_t & vtReserved2 ) {
    HRESULT _hr = raw_DrillMap(lCookie, bstrViewContext, bstrSubreportContext, bstrFormula, vtPromptingInfo, lPageNumber, xOffset, yOffset, bstrReserved, vtReserved, vtReserved2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1815)
inline HRESULT ICrystalReportSourceEx::Search ( long lCookie, _bstr_t bstrViewContext, _bstr_t bstrSubreportContext, _bstr_t bstrFormula, const _variant_t & vtPromptingInfo, long lPageN, long lSectionInstN, _bstr_t bstrSearchFormula, _bstr_t bstrReserved, const _variant_t & vtReserved ) {
    HRESULT _hr = raw_Search(lCookie, bstrViewContext, bstrSubreportContext, bstrFormula, vtPromptingInfo, lPageN, lSectionInstN, bstrSearchFormula, bstrReserved, vtReserved);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1816)
inline HRESULT ICrystalReportSourceEx::Export ( long lCookie, _bstr_t bstrViewContext, _bstr_t bstrSubreportContext, _bstr_t bstrFormula, const _variant_t & vtPromptingInfo, const _variant_t & exportFormat, const _variant_t & pageRange ) {
    HRESULT _hr = raw_Export(lCookie, bstrViewContext, bstrSubreportContext, bstrFormula, vtPromptingInfo, exportFormat, pageRange);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1817)
inline HRESULT ICrystalReportSourceEx::GetExportFormats ( long lCookie ) {
    HRESULT _hr = raw_GetExportFormats(lCookie);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1818)
inline HRESULT ICrystalReportSourceEx::Refresh ( long lCookie, const _variant_t & vtPromptingInfo ) {
    HRESULT _hr = raw_Refresh(lCookie, vtPromptingInfo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1819)
inline HRESULT ICrystalReportSourceEx::Cancel ( long lCookie ) {
    HRESULT _hr = raw_Cancel(lCookie);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface ICrystalReportSourceEx2 wrapper method implementations
//

#pragma implementation_key(1820)
inline HRESULT ICrystalReportSourceEx2::GetPage ( long lCookie, _bstr_t bstrViewContext, _bstr_t bstrSubreportContext, _bstr_t bstrFormula, const _variant_t & vtPromptingInfo, long lPageNumber, const _variant_t & vtReserved ) {
    HRESULT _hr = raw_GetPage(lCookie, bstrViewContext, bstrSubreportContext, bstrFormula, vtPromptingInfo, lPageNumber, vtReserved);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1821)
inline HRESULT ICrystalReportSourceEx2::GetTotaller ( long lCookie, _bstr_t bstrViewContext, _bstr_t bstrSubreportContext, _bstr_t bstrFormula, const _variant_t & vtPromptingInfo, long lStartFrom, short nLevelsPastRoot, const _variant_t & vtMaxNodeCount ) {
    HRESULT _hr = raw_GetTotaller(lCookie, bstrViewContext, bstrSubreportContext, bstrFormula, vtPromptingInfo, lStartFrom, nLevelsPastRoot, vtMaxNodeCount);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1822)
inline HRESULT ICrystalReportSourceEx2::GetLastPageNumber ( long lCookie, _bstr_t bstrViewContext, _bstr_t bstrSubreportContext, _bstr_t bstrFormula, const _variant_t & vtPromptingInfo, const _variant_t & vtReserved ) {
    HRESULT _hr = raw_GetLastPageNumber(lCookie, bstrViewContext, bstrSubreportContext, bstrFormula, vtPromptingInfo, vtReserved);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1823)
inline HRESULT ICrystalReportSourceEx2::FindGroup ( long lCookie, _bstr_t bstrViewContext, _bstr_t bstrSubreportContext, _bstr_t bstrFormula, const _variant_t & vtPromptingInfo, _bstr_t bstrGroupPath, const _variant_t & vtReserved ) {
    HRESULT _hr = raw_FindGroup(lCookie, bstrViewContext, bstrSubreportContext, bstrFormula, vtPromptingInfo, bstrGroupPath, vtReserved);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1824)
inline HRESULT ICrystalReportSourceEx2::FindText ( long lCookie, _bstr_t bstrViewContext, _bstr_t bstrSubreportContext, _bstr_t bstrFormula, const _variant_t & vtPromptingInfo, long lFromPage, long lFromInstance, _bstr_t bstrText, enum CRSearchDirection nMode, const _variant_t & vtReserved ) {
    HRESULT _hr = raw_FindText(lCookie, bstrViewContext, bstrSubreportContext, bstrFormula, vtPromptingInfo, lFromPage, lFromInstance, bstrText, nMode, vtReserved);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1825)
inline HRESULT ICrystalReportSourceEx2::DrillGraph ( long lCookie, _bstr_t bstrViewContext, _bstr_t bstrSubreportContext, _bstr_t bstrFormula, const _variant_t & vtPromptingInfo, long lPageNumber, long xOffset, long yOffset, _bstr_t bstrReserved, const _variant_t & vtReserved, const _variant_t & vtReserved2 ) {
    HRESULT _hr = raw_DrillGraph(lCookie, bstrViewContext, bstrSubreportContext, bstrFormula, vtPromptingInfo, lPageNumber, xOffset, yOffset, bstrReserved, vtReserved, vtReserved2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1826)
inline HRESULT ICrystalReportSourceEx2::DrillMap ( long lCookie, _bstr_t bstrViewContext, _bstr_t bstrSubreportContext, _bstr_t bstrFormula, const _variant_t & vtPromptingInfo, long lPageNumber, long xOffset, long yOffset, _bstr_t bstrReserved, const _variant_t & vtReserved, const _variant_t & vtReserved2 ) {
    HRESULT _hr = raw_DrillMap(lCookie, bstrViewContext, bstrSubreportContext, bstrFormula, vtPromptingInfo, lPageNumber, xOffset, yOffset, bstrReserved, vtReserved, vtReserved2);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1827)
inline HRESULT ICrystalReportSourceEx2::Search ( long lCookie, _bstr_t bstrViewContext, _bstr_t bstrSubreportContext, _bstr_t bstrFormula, const _variant_t & vtPromptingInfo, long lPageN, long lSectionInstN, _bstr_t bstrSearchFormula, _bstr_t bstrReserved, const _variant_t & vtReserved ) {
    HRESULT _hr = raw_Search(lCookie, bstrViewContext, bstrSubreportContext, bstrFormula, vtPromptingInfo, lPageN, lSectionInstN, bstrSearchFormula, bstrReserved, vtReserved);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1828)
inline HRESULT ICrystalReportSourceEx2::Export ( long lCookie, _bstr_t bstrViewContext, _bstr_t bstrSubreportContext, _bstr_t bstrFormula, const _variant_t & vtPromptingInfo, const _variant_t & exportFormat, const _variant_t & pageRange ) {
    HRESULT _hr = raw_Export(lCookie, bstrViewContext, bstrSubreportContext, bstrFormula, vtPromptingInfo, exportFormat, pageRange);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1829)
inline HRESULT ICrystalReportSourceEx2::GetExportFormats ( long lCookie ) {
    HRESULT _hr = raw_GetExportFormats(lCookie);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1830)
inline HRESULT ICrystalReportSourceEx2::Refresh ( long lCookie, const _variant_t & vtPromptingInfo ) {
    HRESULT _hr = raw_Refresh(lCookie, vtPromptingInfo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1831)
inline HRESULT ICrystalReportSourceEx2::Cancel ( long lCookie ) {
    HRESULT _hr = raw_Cancel(lCookie);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

#pragma implementation_key(1832)
inline HRESULT ICrystalReportSourceEx2::Update ( long lCookie ) {
    HRESULT _hr = raw_Update(lCookie);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}
